[
  {
    "objectID": "testler.html",
    "href": "testler.html",
    "title": "Hipotez Testleri",
    "section": "",
    "text": "Bu ders notunda, hipotez testlerinin temel kavramlarını inceleyeceğiz ve özellikle t-testleri ile bunların non-parametrik karşılıklarına odaklanacağız. RMarkdown kullanarak, kodlarımızı, çıktılarımızı, tablolarımızı ve grafiklerimizi tek bir dokümanda birleştireceğiz.\nRMarkdown, veri analizi ve raporlama için mükemmel bir araçtır. Başlıca avantajları şunlardır:\n\nKod ve çıktıyı birleştirme\nDinamik raporlar oluşturma\nÇeşitli çıktı formatları (HTML, PDF, Word)\nEtkileşimli grafikler ve tablolar oluşturma imkanı\nYeniden üretilebilir araştırma için ideal\n\n\n\nt-testleri, iki grup arasındaki ortalama farklarını karşılaştırmak için kullanılan parametrik testlerdir. Üç temel t-testi türü vardır:\n\nTek örneklem t-testi\nBağımsız örneklem t-testi\nBağımlı örneklem t-testi\n\n\n\n\nTek örneklem t-testi, bir örneklem ortalamasının belirli bir değerden farklı olup olmadığını test eder.\nÖrnek veri oluşturma\n\n\nCode\nset.seed(123)\ndata &lt;- rnorm(100, mean = 52, sd = 5)\n\n\nt-testi uygulama\n\n\nCode\nt_test_result &lt;- t.test(data, mu = 50)\n\n\nSonuçları gösterme\n\n\nCode\nt_test_result\n\n\n\n    One Sample t-test\n\ndata:  data\nt = 5.3725, df = 99, p-value = 5.159e-07\nalternative hypothesis: true mean is not equal to 50\n95 percent confidence interval:\n 51.54642 53.35764\nsample estimates:\nmean of x \n 52.45203 \n\n\nSonuçları daha okunaklı bir tablo halinde sunalım:\n\n\nCode\nlibrary(knitr)\nlibrary(dplyr)\nlibrary(kableExtra)\nt_test_table &lt;- data.frame( Statistic = c(\"t-değeri\", \"Serbestlik Derecesi\", \"p-değeri\", \"Güven Aralığı\", \"Örneklem Ortalaması\"), Value = c( round(t_test_result$statistic, 3), t_test_result$parameter, round(t_test_result$p.value, 4), paste(round(t_test_result$conf.int, 2), collapse = \" - \"), round(t_test_result$estimate, 2) ) )\n\nkable(t_test_table, caption = \"Tek Örneklem T-testi Sonuçları\") %&gt;% kable_styling(bootstrap_options = c(\"striped\", \"hover\"))\n\n\n\n\nTek Örneklem T-testi Sonuçları\n\n\nStatistic\nValue\n\n\n\n\nt-değeri\n5.372\n\n\nSerbestlik Derecesi\n99\n\n\np-değeri\n0\n\n\nGüven Aralığı\n51.55 - 53.36\n\n\nÖrneklem Ortalaması\n52.45\n\n\n\n\n\n\n\n\n\n\n\nBağımsız iki örneklem t-testi, iki bağımsız grubun ortalamalarını karşılaştırır.\nÖrnek veri oluşturma\n\n\nCode\nset.seed(456)\ngroup1 &lt;- rnorm(50, mean = 25, sd = 5) \ngroup2 &lt;- rnorm(50, mean = 28, sd = 5)\n\n\nt-testi uygulama\n\n\nCode\nind_t_test &lt;- t.test(group1, group2)\n\n\nSonuçları gösterme\n\n\nCode\nind_t_test\n\n\n\n    Welch Two Sample t-test\n\ndata:  group1 and group2\nt = -2.7148, df = 96.986, p-value = 0.00785\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -4.7291397 -0.7346981\nsample estimates:\nmean of x mean of y \n 25.73691  28.46883 \n\n\nSonuçları daha okunaklı bir tablo halinde sunalım:\n\n\nCode\nlibrary(ggplot2)\ndata_long &lt;- data.frame( value = c(group1, group2), group = rep(c(\"Grup 1\", \"Grup 2\"), each = 50) )\n\nggplot(data_long, aes(x = group, y = value, fill = group)) + geom_boxplot() + geom_jitter(width = 0.2, alpha = 0.5) + theme_minimal() + labs(title = \"Grup 1 ve Grup 2 Karşılaştırması\", x = \"Gruplar\", y = \"Değerler\")\n\n\n\n\n\n\n\n\n\n\n\n\nBağımlı örneklem t-testi, aynı bireylerin iki farklı durumda ölçülen değerlerini karşılaştırır.\nÖrnek veri oluşturma\n\n\nCode\nset.seed(789)\nbefore &lt;- rnorm(30, mean = 70, sd = 10) \nafter &lt;- before + rnorm(30, mean = 5, sd = 5)\n\n\nt-testi uygulama\n\n\nCode\npaired_t_test &lt;- t.test(before, after, paired = TRUE)\n\n\nSonuçları gösterme\n\n\nCode\npaired_t_test\n\n\n\n    Paired t-test\n\ndata:  before and after\nt = -5.5709, df = 29, p-value = 5.199e-06\nalternative hypothesis: true mean difference is not equal to 0\n95 percent confidence interval:\n -7.505526 -3.474479\nsample estimates:\nmean difference \n      -5.490002 \n\n\n\n\nCode\npaired_data &lt;- data.frame( time = rep(c(\"Önce\", \"Sonra\"), each = 30), value = c(before, after), subject = rep(1:30, 2) )\n\nggplot(paired_data, aes(x = time, y = value, group = subject)) + geom_line(alpha = 0.3) + geom_point(aes(color = time), size = 3) + theme_minimal() + labs(title = \"Önce ve Sonra Ölçümleri\", x = \"Zaman\", y = \"Değerler\")\n\n\n\n\n\n\n\n\n\n\n\n\nT-testlerinin varsayımları karşılanmadığında (örneğin, normallik varsayımı), non-parametrik testler kullanılır. T-testlerinin non-parametrik karşılıkları şunlardır:\n\nTek örneklem t-testi → Wilcoxon işaretli sıra testi\nBağımsız örneklem t-testi → Mann-Whitney U testi\nBağımlı örneklem→ Wilcoxon işaretli sıra testi\n\n\n\n\nÖrnek veri oluşturma\n\n\nCode\nset.seed(101) \ndata_np &lt;- rexp(50, rate = 0.5)\n\n\nWilcoxon işaretli sıra testi\n\n\nCode\nwilcox_test &lt;- wilcox.test(data_np, mu = 2)\n\n\nSonuçları gösterme\n\n\nCode\nwilcox_test\n\n\n\n    Wilcoxon signed rank test with continuity correction\n\ndata:  data_np\nV = 357, p-value = 0.006873\nalternative hypothesis: true location is not equal to 2\n\n\n\n\n\nÖrnek veri oluşturma\n\n\nCode\nset.seed(102) \ngroup1_np &lt;- rexp(40, rate = 0.5) \ngroup2_np &lt;- rexp(40, rate = 0.7)\n\n\nMann-Whitney U Testi\n\n\nCode\nmw_test &lt;- wilcox.test(group1_np, group2_np)\n\n\nSonuçları gösterme\n\n\nCode\nmw_test\n\n\n\n    Wilcoxon rank sum exact test\n\ndata:  group1_np and group2_np\nW = 948, p-value = 0.1566\nalternative hypothesis: true location shift is not equal to 0\n\n\n\n\nCode\nnp_data_long &lt;- data.frame( value = c(group1_np, group2_np), group = rep(c(\"Grup 1\", \"Grup 2\"), each = 40) )\n\nggplot(np_data_long, aes(x = group, y = value, fill = group)) + geom_violin(trim = FALSE) + geom_boxplot(width = 0.1, fill = \"white\") + theme_minimal() + labs(title = \"Grup 1 ve Grup 2 Karşılaştırması (Non-parametrik)\", x = \"Gruplar\", y = \"Değerler\")"
  },
  {
    "objectID": "testler.html#t-testleri",
    "href": "testler.html#t-testleri",
    "title": "Hipotez Testleri",
    "section": "",
    "text": "t-testleri, iki grup arasındaki ortalama farklarını karşılaştırmak için kullanılan parametrik testlerdir. Üç temel t-testi türü vardır:\n\nTek örneklem t-testi\nBağımsız örneklem t-testi\nBağımlı örneklem t-testi"
  },
  {
    "objectID": "testler.html#tek-örneklem-t-testi",
    "href": "testler.html#tek-örneklem-t-testi",
    "title": "Hipotez Testleri",
    "section": "",
    "text": "Tek örneklem t-testi, bir örneklem ortalamasının belirli bir değerden farklı olup olmadığını test eder.\nÖrnek veri oluşturma\n\n\nCode\nset.seed(123)\ndata &lt;- rnorm(100, mean = 52, sd = 5)\n\n\nt-testi uygulama\n\n\nCode\nt_test_result &lt;- t.test(data, mu = 50)\n\n\nSonuçları gösterme\n\n\nCode\nt_test_result\n\n\n\n    One Sample t-test\n\ndata:  data\nt = 5.3725, df = 99, p-value = 5.159e-07\nalternative hypothesis: true mean is not equal to 50\n95 percent confidence interval:\n 51.54642 53.35764\nsample estimates:\nmean of x \n 52.45203 \n\n\nSonuçları daha okunaklı bir tablo halinde sunalım:\n\n\nCode\nlibrary(knitr)\nlibrary(dplyr)\nlibrary(kableExtra)\nt_test_table &lt;- data.frame( Statistic = c(\"t-değeri\", \"Serbestlik Derecesi\", \"p-değeri\", \"Güven Aralığı\", \"Örneklem Ortalaması\"), Value = c( round(t_test_result$statistic, 3), t_test_result$parameter, round(t_test_result$p.value, 4), paste(round(t_test_result$conf.int, 2), collapse = \" - \"), round(t_test_result$estimate, 2) ) )\n\nkable(t_test_table, caption = \"Tek Örneklem T-testi Sonuçları\") %&gt;% kable_styling(bootstrap_options = c(\"striped\", \"hover\"))\n\n\n\n\nTek Örneklem T-testi Sonuçları\n\n\nStatistic\nValue\n\n\n\n\nt-değeri\n5.372\n\n\nSerbestlik Derecesi\n99\n\n\np-değeri\n0\n\n\nGüven Aralığı\n51.55 - 53.36\n\n\nÖrneklem Ortalaması\n52.45"
  },
  {
    "objectID": "testler.html#bağımsız-iki-örneklem-t-testi",
    "href": "testler.html#bağımsız-iki-örneklem-t-testi",
    "title": "Hipotez Testleri",
    "section": "",
    "text": "Bağımsız iki örneklem t-testi, iki bağımsız grubun ortalamalarını karşılaştırır.\nÖrnek veri oluşturma\n\n\nCode\nset.seed(456)\ngroup1 &lt;- rnorm(50, mean = 25, sd = 5) \ngroup2 &lt;- rnorm(50, mean = 28, sd = 5)\n\n\nt-testi uygulama\n\n\nCode\nind_t_test &lt;- t.test(group1, group2)\n\n\nSonuçları gösterme\n\n\nCode\nind_t_test\n\n\n\n    Welch Two Sample t-test\n\ndata:  group1 and group2\nt = -2.7148, df = 96.986, p-value = 0.00785\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -4.7291397 -0.7346981\nsample estimates:\nmean of x mean of y \n 25.73691  28.46883 \n\n\nSonuçları daha okunaklı bir tablo halinde sunalım:\n\n\nCode\nlibrary(ggplot2)\ndata_long &lt;- data.frame( value = c(group1, group2), group = rep(c(\"Grup 1\", \"Grup 2\"), each = 50) )\n\nggplot(data_long, aes(x = group, y = value, fill = group)) + geom_boxplot() + geom_jitter(width = 0.2, alpha = 0.5) + theme_minimal() + labs(title = \"Grup 1 ve Grup 2 Karşılaştırması\", x = \"Gruplar\", y = \"Değerler\")"
  },
  {
    "objectID": "testler.html#bağımlı-örneklem-t-testi",
    "href": "testler.html#bağımlı-örneklem-t-testi",
    "title": "Hipotez Testleri",
    "section": "",
    "text": "Bağımlı örneklem t-testi, aynı bireylerin iki farklı durumda ölçülen değerlerini karşılaştırır.\nÖrnek veri oluşturma\n\n\nCode\nset.seed(789)\nbefore &lt;- rnorm(30, mean = 70, sd = 10) \nafter &lt;- before + rnorm(30, mean = 5, sd = 5)\n\n\nt-testi uygulama\n\n\nCode\npaired_t_test &lt;- t.test(before, after, paired = TRUE)\n\n\nSonuçları gösterme\n\n\nCode\npaired_t_test\n\n\n\n    Paired t-test\n\ndata:  before and after\nt = -5.5709, df = 29, p-value = 5.199e-06\nalternative hypothesis: true mean difference is not equal to 0\n95 percent confidence interval:\n -7.505526 -3.474479\nsample estimates:\nmean difference \n      -5.490002 \n\n\n\n\nCode\npaired_data &lt;- data.frame( time = rep(c(\"Önce\", \"Sonra\"), each = 30), value = c(before, after), subject = rep(1:30, 2) )\n\nggplot(paired_data, aes(x = time, y = value, group = subject)) + geom_line(alpha = 0.3) + geom_point(aes(color = time), size = 3) + theme_minimal() + labs(title = \"Önce ve Sonra Ölçümleri\", x = \"Zaman\", y = \"Değerler\")"
  },
  {
    "objectID": "testler.html#non-parametrik-testler",
    "href": "testler.html#non-parametrik-testler",
    "title": "Hipotez Testleri",
    "section": "",
    "text": "T-testlerinin varsayımları karşılanmadığında (örneğin, normallik varsayımı), non-parametrik testler kullanılır. T-testlerinin non-parametrik karşılıkları şunlardır:\n\nTek örneklem t-testi → Wilcoxon işaretli sıra testi\nBağımsız örneklem t-testi → Mann-Whitney U testi\nBağımlı örneklem→ Wilcoxon işaretli sıra testi"
  },
  {
    "objectID": "testler.html#wilcoxon-işaretli-sıra-testi",
    "href": "testler.html#wilcoxon-işaretli-sıra-testi",
    "title": "Hipotez Testleri",
    "section": "",
    "text": "Örnek veri oluşturma\n\n\nCode\nset.seed(101) \ndata_np &lt;- rexp(50, rate = 0.5)\n\n\nWilcoxon işaretli sıra testi\n\n\nCode\nwilcox_test &lt;- wilcox.test(data_np, mu = 2)\n\n\nSonuçları gösterme\n\n\nCode\nwilcox_test\n\n\n\n    Wilcoxon signed rank test with continuity correction\n\ndata:  data_np\nV = 357, p-value = 0.006873\nalternative hypothesis: true location is not equal to 2"
  },
  {
    "objectID": "testler.html#mann-whitney-u-testi",
    "href": "testler.html#mann-whitney-u-testi",
    "title": "Hipotez Testleri",
    "section": "",
    "text": "Örnek veri oluşturma\n\n\nCode\nset.seed(102) \ngroup1_np &lt;- rexp(40, rate = 0.5) \ngroup2_np &lt;- rexp(40, rate = 0.7)\n\n\nMann-Whitney U Testi\n\n\nCode\nmw_test &lt;- wilcox.test(group1_np, group2_np)\n\n\nSonuçları gösterme\n\n\nCode\nmw_test\n\n\n\n    Wilcoxon rank sum exact test\n\ndata:  group1_np and group2_np\nW = 948, p-value = 0.1566\nalternative hypothesis: true location shift is not equal to 0\n\n\n\n\nCode\nnp_data_long &lt;- data.frame( value = c(group1_np, group2_np), group = rep(c(\"Grup 1\", \"Grup 2\"), each = 40) )\n\nggplot(np_data_long, aes(x = group, y = value, fill = group)) + geom_violin(trim = FALSE) + geom_boxplot(width = 0.1, fill = \"white\") + theme_minimal() + labs(title = \"Grup 1 ve Grup 2 Karşılaştırması (Non-parametrik)\", x = \"Gruplar\", y = \"Değerler\")"
  },
  {
    "objectID": "demo/repro.html",
    "href": "demo/repro.html",
    "title": "Uretilebilir Rapor 1",
    "section": "",
    "text": "Burada iki koşullu bir çalışmadan elde edilen verileri simüle edeceğiz. A koşulundaki ortalama 0 ve B koşulundaki ortalama 1’dir.\n\n\nCode\nn &lt;- 100\n\ndata &lt;- data.frame(\n  id = 1:n,\n  condition = c(\"A\", \"B\") |&gt; rep(each = n/2),\n  dv = c(rnorm(n/2, 0), rnorm(n/2, 1))\n)"
  },
  {
    "objectID": "demo/repro.html#veri-üretim",
    "href": "demo/repro.html#veri-üretim",
    "title": "Uretilebilir Rapor 1",
    "section": "",
    "text": "Burada iki koşullu bir çalışmadan elde edilen verileri simüle edeceğiz. A koşulundaki ortalama 0 ve B koşulundaki ortalama 1’dir.\n\n\nCode\nn &lt;- 100\n\ndata &lt;- data.frame(\n  id = 1:n,\n  condition = c(\"A\", \"B\") |&gt; rep(each = n/2),\n  dv = c(rnorm(n/2, 0), rnorm(n/2, 1))\n)"
  },
  {
    "objectID": "demo/repro.html#grafik",
    "href": "demo/repro.html#grafik",
    "title": "Uretilebilir Rapor 1",
    "section": "Grafik",
    "text": "Grafik"
  },
  {
    "objectID": "demo/html_document2.html",
    "href": "demo/html_document2.html",
    "title": "referans verme",
    "section": "",
    "text": "Pırlanta ücretleri çeşitli faktörlere bağlıdır\n\ncut (Bakınız Tablo @ref(tab:kesim))\ncolour (Bakınız Tablo @ref(tab:renk))\nclarity (Bakınız Şekil @ref(fig:parlaklik))\ncarats (Bakınız Şekil @ref(fig:karat))\nBakınız Bolum @ref(sonuclar) sonuclar icin\n\n\n\n\n\n\n\nCode\ndiamonds %&gt;%\n  group_by(cut) %&gt;%\n  summarise(avg = mean(price),\n            .groups = \"drop\") %&gt;%\n  kable(digits = 0, \n        col.names = c(\"Cut\", \"Average Price\"),\n        caption = \"Kesime göre ortalama pırlanta fiyatı.\") %&gt;%\n  kable_material()\n\n\n\n\nKesime göre ortalama pırlanta fiyatı.\n\n\nCut\nAverage Price\n\n\n\n\nFair\n4359\n\n\nGood\n3929\n\n\nVery Good\n3982\n\n\nPremium\n4584\n\n\nIdeal\n3458\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndiamonds %&gt;%\n  group_by(color) %&gt;%\n  summarise(avg = mean(price),\n            .groups = \"drop\") %&gt;%\n  kable(digits = 0, \n        col.names = c(\"Cut\", \"Average Price\"),\n        caption = \"Renge göre ortalama pırlanta fiyatı.\") %&gt;%\n  kable_material()\n\n\n\n\nRenge göre ortalama pırlanta fiyatı.\n\n\nCut\nAverage Price\n\n\n\n\nD\n3170\n\n\nE\n3077\n\n\nF\n3725\n\n\nG\n3999\n\n\nH\n4487\n\n\nI\n5092\n\n\nJ\n5324\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(diamonds, aes(x = clarity, y = price)) +\n  geom_boxplot() \n\n\n\n\n\nParlaklığa göre pırlanta fiyatı\n\n\n\n\n\n\n\n\n\nCode\nggplot(diamonds, aes(x = carat, y = price)) +\n  stat_smooth()\n\n\n\n\n\nKarata göre pırlanta fiyatı\n\n\n\n\n\n\n\n“Kodlar haricinde pırlantalarla ilgilenmiyorum :)”"
  },
  {
    "objectID": "demo/html_document2.html#tablolar",
    "href": "demo/html_document2.html#tablolar",
    "title": "referans verme",
    "section": "",
    "text": "Code\ndiamonds %&gt;%\n  group_by(cut) %&gt;%\n  summarise(avg = mean(price),\n            .groups = \"drop\") %&gt;%\n  kable(digits = 0, \n        col.names = c(\"Cut\", \"Average Price\"),\n        caption = \"Kesime göre ortalama pırlanta fiyatı.\") %&gt;%\n  kable_material()\n\n\n\n\nKesime göre ortalama pırlanta fiyatı.\n\n\nCut\nAverage Price\n\n\n\n\nFair\n4359\n\n\nGood\n3929\n\n\nVery Good\n3982\n\n\nPremium\n4584\n\n\nIdeal\n3458\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndiamonds %&gt;%\n  group_by(color) %&gt;%\n  summarise(avg = mean(price),\n            .groups = \"drop\") %&gt;%\n  kable(digits = 0, \n        col.names = c(\"Cut\", \"Average Price\"),\n        caption = \"Renge göre ortalama pırlanta fiyatı.\") %&gt;%\n  kable_material()\n\n\n\n\nRenge göre ortalama pırlanta fiyatı.\n\n\nCut\nAverage Price\n\n\n\n\nD\n3170\n\n\nE\n3077\n\n\nF\n3725\n\n\nG\n3999\n\n\nH\n4487\n\n\nI\n5092\n\n\nJ\n5324"
  },
  {
    "objectID": "demo/html_document2.html#grafikler",
    "href": "demo/html_document2.html#grafikler",
    "title": "referans verme",
    "section": "",
    "text": "Code\nggplot(diamonds, aes(x = clarity, y = price)) +\n  geom_boxplot() \n\n\n\n\n\nParlaklığa göre pırlanta fiyatı\n\n\n\n\n\n\n\n\n\nCode\nggplot(diamonds, aes(x = carat, y = price)) +\n  stat_smooth()\n\n\n\n\n\nKarata göre pırlanta fiyatı\n\n\n\n\n\n\n\n“Kodlar haricinde pırlantalarla ilgilenmiyorum :)”"
  },
  {
    "objectID": "09_dongfonk.html",
    "href": "09_dongfonk.html",
    "title": "Döngü Fonkisyonları",
    "section": "",
    "text": "Programlama yaparken for ve while döngüleri yazmak yararlıdır, ancak komut satırında etkileşimli olarak çalışırken özellikle kolay değildir. Küme parantezleri içeren çok satırlı ifadeleri komut satırında çalışırken sıralamak o kadar kolay değildir. R, hayatınızı kolaylaştırmak için döngüleri kompakt bir biçimde uygulayan bazı fonksiyonlara sahiptir.\n\nlapply(): Bir liste üzerinde döngü ve her öğe üzerinde bir işlevi değerlendirme\nsapply(): lapply ile aynıdır ancak sonucu basitleştirmeye çalışın\napply(): Bir dizinin kenar boşlukları üzerinde bir işlev uygulama\ntapply(): Bir vektörün alt kümeleri üzerinde bir fonksiyon uygulama\nmapply(): lapply nin çok değişkenli versiyonu\n\nYardımcı bir fonksiyonlardan biri olan split de özellikle lapply ile birlikte kullanışlıdır."
  },
  {
    "objectID": "09_dongfonk.html#komut-satırında-döngü-oluşturma",
    "href": "09_dongfonk.html#komut-satırında-döngü-oluşturma",
    "title": "Döngü Fonkisyonları",
    "section": "",
    "text": "Programlama yaparken for ve while döngüleri yazmak yararlıdır, ancak komut satırında etkileşimli olarak çalışırken özellikle kolay değildir. Küme parantezleri içeren çok satırlı ifadeleri komut satırında çalışırken sıralamak o kadar kolay değildir. R, hayatınızı kolaylaştırmak için döngüleri kompakt bir biçimde uygulayan bazı fonksiyonlara sahiptir.\n\nlapply(): Bir liste üzerinde döngü ve her öğe üzerinde bir işlevi değerlendirme\nsapply(): lapply ile aynıdır ancak sonucu basitleştirmeye çalışın\napply(): Bir dizinin kenar boşlukları üzerinde bir işlev uygulama\ntapply(): Bir vektörün alt kümeleri üzerinde bir fonksiyon uygulama\nmapply(): lapply nin çok değişkenli versiyonu\n\nYardımcı bir fonksiyonlardan biri olan split de özellikle lapply ile birlikte kullanışlıdır."
  },
  {
    "objectID": "09_dongfonk.html#lapply",
    "href": "09_dongfonk.html#lapply",
    "title": "Döngü Fonkisyonları",
    "section": "lapply()",
    "text": "lapply()\nlapply() fonksiyonu aşağıdaki basit işlemler dizisini gerçekleştirir:\n\nBir liste üzerinde döngü yaparak, listedeki her bir öğe üzerinde yineleme yapar\nListenin her bir öğesine bir fonksiyon uygular (sizin belirlediğiniz bir fonksiyon)\nve bir liste döndürür (l “liste” içindir).\n\nBu fonksiyon üç argüman alır: (1) bir liste X; (2) bir fonksiyon (veya bir fonksiyonun adı) FUN; (3) ... argümanı aracılığıyla diğer argümanlar. Eğer X bir liste değilse, as.list() kullanılarak bir listeye zorlanacaktır.\nlapply()` fonksiyonunun gövdesi burada görülebilir.\n\n\nCode\nlapply\n\n\nfunction (X, FUN, ...) \n{\n    FUN &lt;- match.fun(FUN)\n    if (!is.vector(X) || is.object(X)) \n        X &lt;- as.list(X)\n    .Internal(lapply(X, FUN))\n}\n&lt;bytecode: 0x000001eb0628edd8&gt;\n&lt;environment: namespace:base&gt;\n\n\nGirdinin sınıfından bağımsız olarak lapply() fonksiyonunun her zaman bir liste döndürdüğünü unutmamak önemlidir.\nİşte mean() fonksiyonunun bir listenin tüm elemanlarına uygulanmasına bir örnek. Orijinal listede isimler varsa, isimler çıktıda korunacaktır.\n\n\nCode\nx &lt;- list(a = 1:5, b = rnorm(10))\nlapply(x, mean)\n\n\n$a\n[1] 3\n\n$b\n[1] 0.1322028\n\n\nBurada mean() fonksiyonunu lapply() fonksiyonuna bir argüman olarak aktardığımıza dikkat edin. R’deki fonksiyonlar bu şekilde kullanılabilir ve tıpkı diğer nesneler gibi argüman olarak ileri geri aktarılabilir. Bir fonksiyonu başka bir fonksiyona aktardığınızda, bir fonksiyonu çağırırken yaptığınız gibi () açık ve kapalı parantezlerini eklemeniz gerekmez.\nİşte lapply() kullanımına başka bir örnek.\n\n\nCode\nx &lt;- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))\nlapply(x, mean)\n\n\n$a\n[1] 2.5\n\n$b\n[1] 0.248845\n\n$c\n[1] 0.9935285\n\n$d\n[1] 5.051388\n\n\nBir fonksiyonu her biri farklı bir argümanla birden çok kez değerlendirmek için lapply() fonksiyonunu kullanabilirsiniz. Aşağıda, runif() fonksiyonunu (düzgün dağılımlı rastgele değişkenler üretmek için) her seferinde farklı sayıda rastgele sayı üreterek dört kez çağırdığım bir örnek yer almaktadır.\n\n\nCode\nx &lt;- 1:4\nlapply(x, runif)\n\n\n[[1]]\n[1] 0.02778712\n\n[[2]]\n[1] 0.5273108 0.8803191\n\n[[3]]\n[1] 0.37306337 0.04795913 0.13862825\n\n[[4]]\n[1] 0.3214921 0.1548316 0.1322282 0.2213059\n\n\nBir fonksiyonu lapply() fonksiyonuna aktardığınızda, lapply() listenin elemanlarını alır ve bunları uyguladığınız fonksiyonun ilk argümanı olarak geçirir. Yukarıdaki örnekte, runif() fonksiyonunun ilk argümanı ndir ve bu nedenle 1:4 dizisinin tüm elemanları runif() fonksiyonunun n argümanına aktarılır.\nlapply() fonksiyonuna aktardığınız fonksiyonlar başka argümanlara sahip olabilir. Örneğin, runif() fonksiyonunun bir min ve max argümanı da vardır. Yukarıdaki örnekte min ve max için varsayılan değerleri kullandım. Bunun için lapply() bağlamında farklı değerleri nasıl belirtebilirsiniz?\nİşte burada lapply() fonksiyonunun ... argümanı devreye girer. ... argümanına yerleştirdiğiniz tüm argümanlar, listenin öğelerine uygulanan fonksiyona aktarılacaktır.\nBurada, min = 0 ve max = 10 argümanları her çağrıldığında runif() fonksiyonuna aktarılır.\n\n\nCode\nx &lt;- 1:4\nlapply(x, runif, min = 0, max = 10)\n\n\n[[1]]\n[1] 2.263808\n\n[[2]]\n[1] 1.314165 9.815635\n\n[[3]]\n[1] 3.270137 5.069395 6.814425\n\n[[4]]\n[1] 0.9916910 1.1890256 0.5043966 9.2925392\n\n\nYani artık rastgele sayılar 0 ile 1 arasında (varsayılan) olmak yerine, hepsi 0 ile 10 arasındadır.\nlapply() fonksiyonu ve arkadaşları anonim/isimsiz fonksiyonları yoğun bir şekilde kullanır. Anonim fonksiyonların isimleri yoktur. Bu fonksiyonlar siz lapply() fonksiyonunu kullanırken “anında” oluşturulur. lapply() çağrısı tamamlandığında, fonksiyon kaybolur ve çalışma alanında görünmez.\nBurada iki matris içeren bir liste oluşturuyorum.\n\n\nCode\nx &lt;- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2)) \nx\n\n\n$a\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n$b\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n\nListedeki her matrisin ilk sütununu almak istediğimi varsayalım. Şöyle yazabilirim her matrisin ilk sütununu çıkarmak için anonim bir fonksiyon.\n\n\nCode\nlapply(x, function(elt) { elt[,1] })\n\n\n$a\n[1] 1 2\n\n$b\n[1] 1 2 3\n\n\nDikkat ederseniz function() tanımını doğrudan lapply() çağrısının içinde. Bu tamamen kabul edilebilir bir durumdur. Keyfi olarak karmaşık bir fonksiyon tanımını lapply() içine koyabilirsiniz, ancak daha karmaşık olacaksa, fonksiyonu ayrı olarak tanımlamak muhtemelen daha iyi bir fikirdir.\nÖrneğin, aşağıdakileri yapabilirdim.\n\n\nCode\nf &lt;- function(elt) {\n        elt[, 1]\n}\nlapply(x, f)\n\n\n$a\n[1] 1 2\n\n$b\n[1] 1 2 3\n\n\nArtık fonksiyon anonim değildir; adı fdir. Anonim bir fonksiyon mu kullanacağınız yoksa önce bir fonksiyon mu tanımlayacağınız bağlamınıza bağlıdır. Eğer f fonksiyonunun kodunuzun diğer bölümlerinde çok ihtiyaç duyacağınız bir şey olduğunu düşünüyorsanız, onu ayrıca tanımlamak isteyebilirsiniz. Ancak sadece bu lapply() çağrısı için kullanacaksanız, muhtemelen anonim bir fonksiyon kullanmak daha basittir."
  },
  {
    "objectID": "09_dongfonk.html#sapply",
    "href": "09_dongfonk.html#sapply",
    "title": "Döngü Fonkisyonları",
    "section": "sapply()",
    "text": "sapply()\nsapply() fonksiyonu lapply() fonksiyonuna benzer şekilde davranır; tek gerçek fark dönüş değerindedir. sapply() mümkünse lapply() sonucunu basitleştirmeye çalışacaktır. Esasen, sapply() girdisi üzerinde lapply() çağırır ve ardından aşağıdaki algoritmayı uygular:\n\nEğer sonuç her elemanın uzunluğu 1 olan bir liste ise, o zaman bir vektör döndürülür\nSonuç, her elemanı aynı uzunlukta (&gt; 1) bir vektör olan bir liste ise, bir matris döndürülür.\nİşleri çözemezse, bir liste döndürülür\n\nİşte lapply() çağrısının sonucu.\n\n\nCode\nx &lt;- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100, 5))\nlapply(x, mean)\n\n\n$a\n[1] 2.5\n\n$b\n[1] -0.251483\n\n$c\n[1] 1.481246\n\n$d\n[1] 4.968715\n\n\nlapply()` işlevinin (her zamanki gibi) bir liste döndürdüğüne, ancak listenin her bir öğesinin uzunluğunun 1 olduğuna dikkat edin.\nİşte aynı liste üzerinde sapply() çağrısının sonucu.\n\n\nCode\nsapply(x, mean) \n\n\n        a         b         c         d \n 2.500000 -0.251483  1.481246  4.968715 \n\n\nlapply()işlevinin sonucu, her öğesinin uzunluğu 1 olan bir liste olduğundan,sapply()` işlevi çıktıyı, genellikle bir listeden daha kullanışlı olan sayısal bir vektöre daraltmıştır."
  },
  {
    "objectID": "09_dongfonk.html#split",
    "href": "09_dongfonk.html#split",
    "title": "Döngü Fonkisyonları",
    "section": "split()",
    "text": "split()\nsplit()` fonksiyonu bir vektörü veya diğer nesneleri alır ve bunları bir faktör veya faktörler listesi tarafından belirlenen gruplara böler.\nsplit() fonksiyonunun argümanları şunlardır\n\n\nCode\nstr(split)\n\n\nfunction (x, f, drop = FALSE, ...)  \n\n\nnerede\n\nx` bir vektör (veya liste) veya veri setidir\nf` bir faktör (veya bir faktöre zorlanmış) veya bir faktörler listesi\ndrop boş faktör seviyelerinin bırakılıp bırakılmayacağını belirtir\n\nsplit() ve lapply() veya sapply() gibi bir fonksiyonun kombinasyonu R’de yaygın bir paradigmadır. Temel fikir, bir veri yapısını alıp başka bir değişken tarafından tanımlanan alt kümelere bölebilmeniz ve bu alt kümeler üzerinde bir fonksiyon uygulayabilmenizdir. Bu fonksiyonun alt kümeler üzerinde uygulanmasının sonuçları daha sonra harmanlanır ve bir nesne olarak döndürülür. Bu işlem dizisi bazen başka bağlamlarda “map-reduce” olarak adlandırılır.\nBurada bazı verileri simüle ediyoruz ve bir faktör değişkenine göre bölüyoruz. Bir faktör değişkeninde “seviyeler oluşturmak” için gl() fonksiyonunu kullandığımıza dikkat edin.\n\n\nCode\nx &lt;- c(rnorm(10), runif(10), rnorm(10, 5)) # 30 elemanlı vektor\nf &lt;- gl(3, 10) # 3 kaetgorili bagimsiz değişken\nsplit(x, f)\n\n\n$`1`\n [1]  0.3981302 -0.4075286  1.3242586 -0.7012317 -0.5806143 -1.0010722\n [7] -0.6681786  0.9451850  0.4337021  1.0051592\n\n$`2`\n [1] 0.34822440 0.94893818 0.64667919 0.03527777 0.59644846 0.41531800\n [7] 0.07689704 0.52804888 0.96233331 0.70874005\n\n$`3`\n [1] 5.134448 5.765599 5.955137 4.949434 4.694185 5.893674 3.952702 6.971337\n [9] 4.616368 6.654145\n\n\nYaygın bir deyim split ve ardından lapplydir.\n\n\nCode\nlapply(split(x, f), mean)\n\n\n$`1`\n[1] 0.07478098\n\n$`2`\n[1] 0.5266905\n\n$`3`\n[1] 5.458703\n\n\n\nVeri Setini Bölme\n\n\nCode\nlibrary(datasets)\nhead(airquality)\n\n\n  Ozone Solar.R Wind Temp Month Day\n1    41     190  7.4   67     5   1\n2    36     118  8.0   72     5   2\n3    12     149 12.6   74     5   3\n4    18     313 11.5   62     5   4\n5    NA      NA 14.3   56     5   5\n6    28      NA 14.9   66     5   6\n\n\nHer ay için ayrı alt veri seti olduğu için airquality veri setini Month değişkenine göre bölebiliriz.\n\n\nCode\ns &lt;- split(airquality, airquality$Month)\nstr(s)\n\n\nList of 5\n $ 5:'data.frame':  31 obs. of  6 variables:\n  ..$ Ozone  : int [1:31] 41 36 12 18 NA 28 23 19 8 NA ...\n  ..$ Solar.R: int [1:31] 190 118 149 313 NA NA 299 99 19 194 ...\n  ..$ Wind   : num [1:31] 7.4 8 12.6 11.5 14.3 14.9 8.6 13.8 20.1 8.6 ...\n  ..$ Temp   : int [1:31] 67 72 74 62 56 66 65 59 61 69 ...\n  ..$ Month  : int [1:31] 5 5 5 5 5 5 5 5 5 5 ...\n  ..$ Day    : int [1:31] 1 2 3 4 5 6 7 8 9 10 ...\n $ 6:'data.frame':  30 obs. of  6 variables:\n  ..$ Ozone  : int [1:30] NA NA NA NA NA NA 29 NA 71 39 ...\n  ..$ Solar.R: int [1:30] 286 287 242 186 220 264 127 273 291 323 ...\n  ..$ Wind   : num [1:30] 8.6 9.7 16.1 9.2 8.6 14.3 9.7 6.9 13.8 11.5 ...\n  ..$ Temp   : int [1:30] 78 74 67 84 85 79 82 87 90 87 ...\n  ..$ Month  : int [1:30] 6 6 6 6 6 6 6 6 6 6 ...\n  ..$ Day    : int [1:30] 1 2 3 4 5 6 7 8 9 10 ...\n $ 7:'data.frame':  31 obs. of  6 variables:\n  ..$ Ozone  : int [1:31] 135 49 32 NA 64 40 77 97 97 85 ...\n  ..$ Solar.R: int [1:31] 269 248 236 101 175 314 276 267 272 175 ...\n  ..$ Wind   : num [1:31] 4.1 9.2 9.2 10.9 4.6 10.9 5.1 6.3 5.7 7.4 ...\n  ..$ Temp   : int [1:31] 84 85 81 84 83 83 88 92 92 89 ...\n  ..$ Month  : int [1:31] 7 7 7 7 7 7 7 7 7 7 ...\n  ..$ Day    : int [1:31] 1 2 3 4 5 6 7 8 9 10 ...\n $ 8:'data.frame':  31 obs. of  6 variables:\n  ..$ Ozone  : int [1:31] 39 9 16 78 35 66 122 89 110 NA ...\n  ..$ Solar.R: int [1:31] 83 24 77 NA NA NA 255 229 207 222 ...\n  ..$ Wind   : num [1:31] 6.9 13.8 7.4 6.9 7.4 4.6 4 10.3 8 8.6 ...\n  ..$ Temp   : int [1:31] 81 81 82 86 85 87 89 90 90 92 ...\n  ..$ Month  : int [1:31] 8 8 8 8 8 8 8 8 8 8 ...\n  ..$ Day    : int [1:31] 1 2 3 4 5 6 7 8 9 10 ...\n $ 9:'data.frame':  30 obs. of  6 variables:\n  ..$ Ozone  : int [1:30] 96 78 73 91 47 32 20 23 21 24 ...\n  ..$ Solar.R: int [1:30] 167 197 183 189 95 92 252 220 230 259 ...\n  ..$ Wind   : num [1:30] 6.9 5.1 2.8 4.6 7.4 15.5 10.9 10.3 10.9 9.7 ...\n  ..$ Temp   : int [1:30] 91 92 93 93 87 84 80 78 75 73 ...\n  ..$ Month  : int [1:30] 9 9 9 9 9 9 9 9 9 9 ...\n  ..$ Day    : int [1:30] 1 2 3 4 5 6 7 8 9 10 ...\n\n\nDaha sonra her bir alt veri seti için Ozone, Solar.R ve Wind sütun ortalamalarını alabiliriz.\n\n\nCode\nlapply(s, function(x) {\n        colMeans(x[, c(\"Ozone\", \"Solar.R\", \"Wind\")])\n}) ## anaomin fonkisyon kullanıldığına dikkat ediniz.\n\n\n$`5`\n   Ozone  Solar.R     Wind \n      NA       NA 11.62258 \n\n$`6`\n    Ozone   Solar.R      Wind \n       NA 190.16667  10.26667 \n\n$`7`\n     Ozone    Solar.R       Wind \n        NA 216.483871   8.941935 \n\n$`8`\n   Ozone  Solar.R     Wind \n      NA       NA 8.793548 \n\n$`9`\n   Ozone  Solar.R     Wind \n      NA 167.4333  10.1800 \n\n\nDaha okunabilir bir çıktı için burada sapply() kullanmak daha iyi olabilir.\n\n\nCode\nsapply(s, function(x) {\n        colMeans(x[, c(\"Ozone\", \"Solar.R\", \"Wind\")])\n})\n\n\n               5         6          7        8        9\nOzone         NA        NA         NA       NA       NA\nSolar.R       NA 190.16667 216.483871       NA 167.4333\nWind    11.62258  10.26667   8.941935 8.793548  10.1800\n\n\nNe yazık ki, verilerde NAlar vardır, bu nedenle bu değişkenlerin ortalamalarını alamayız. Ancak, colMeans fonksiyonuna ortalamayı hesaplamadan önce NAları kaldırmasını söyleyebiliriz.\n\n\nCode\nsapply(s, function(x) {\n        colMeans(x[, c(\"Ozone\", \"Solar.R\", \"Wind\")], \n                 na.rm = TRUE)\n})\n\n\n                5         6          7          8         9\nOzone    23.61538  29.44444  59.115385  59.961538  31.44828\nSolar.R 181.29630 190.16667 216.483871 171.857143 167.43333\nWind     11.62258  10.26667   8.941935   8.793548  10.18000"
  },
  {
    "objectID": "09_dongfonk.html#tapply",
    "href": "09_dongfonk.html#tapply",
    "title": "Döngü Fonkisyonları",
    "section": "tapply",
    "text": "tapply\ntapply() fonksiyonun temel görevi verileri belirlenen grup veya faktör değişkenine göre özetlemektir.\nFonksiyonda bulunan x argümanı vektör, veri seti ve liste şeklindeki nesneleri, index argümanı “x” nesnesinin alt boyut, grup veya faktör değişkenini, FUN argümanı ise uygulanacak fonksiyonu belirtir.\n\n\\(tapply(x, Index, FUN, …)\\)\ntapply() liste ve veri seti yapısındaki nesnelere uygulandığında, grup veya faktör değişkenine ilişkin fonksiyon değerlerini fonksiyon türüne gore vektör ya da liste şeklinde verir.\nEğer tapply() içinde kullanılan fonksiyon tek bir değer veriyorsa, çıktı vektör; birden fazla değer veriyorsa, çıktı liste yapısındadır.\n\n\n\nCode\nstr(tapply)\n\n\nfunction (X, INDEX, FUN = NULL, ..., default = NA, simplify = TRUE)  \n\n\ntapply()` işlevinin argümanları aşağıdaki gibidir:\n\nX` bir vektördür\nINDEX bir faktör ya da faktörler listesidir (ya da faktörlere zorlanırlar)\nFUN` uygulanacak bir işlevdir\n… geçirilecek diğer argümanları içerir FUN\nbasitleştir, sonucu basitleştirmeli miyiz?\n\nSayılardan oluşan bir vektör verildiğinde, basit bir işlem grup ortalamalarını almaktır.\n\n\nCode\n## veri üret\nx &lt;- c(rnorm(10), runif(10), rnorm(10, 1))\n## factor değişken\nf &lt;- gl(3, 10)   \nf\n\n\n [1] 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3\nLevels: 1 2 3\n\n\nCode\ntapply(x, f, mean)\n\n\n        1         2         3 \n0.1457707 0.4659058 1.2320306 \n\n\nSonucu sadeleştirmeden grup ortalamalarını da alabiliriz, bu da bize bir liste verecektir. Tek bir değer döndüren fonksiyonlar için genellikle istediğimiz bu değildir, ancak yapılabilir.\n\n\nCode\ntapply(x, f, mean, simplify = FALSE)\n\n\n$`1`\n[1] 0.1457707\n\n$`2`\n[1] 0.4659058\n\n$`3`\n[1] 1.232031\n\n\nTek bir değerden daha fazlasını döndüren fonksiyonları da uygulayabiliriz. Bu durumda, tapply() sonucu basitleştirmeyecek ve bir liste döndürecektir. İşte her bir alt grubun ranjını bulmak için bir örnek.\n\n\nCode\ntapply(x, f, range)\n\n\n$`1`\n[1] -1.024548  1.512213\n\n$`2`\n[1] 0.06490054 0.85750154\n\n$`3`\n[1] -0.8697888  2.4970410\n\n\n\n\nCode\nisim &lt;- c(\"Ali\",\"Elif\",\"Su\",\"Deniz\",\"Aras\",\"Berk\",\"Can\",\"Ece\",\"Efe\",\"Arda\")\nboy &lt;- c(160,165,170,155,167,162,169,158,160,164)\nkilo &lt;- c(55,55,57,50,48,65,58,62,45,47)\ncinsiyet &lt;- c(\"erkek\",\"kadin\",\"kadin\",\"kadin\",\"erkek\",\n\"erkek\",\"erkek\",\"kadin\",\"erkek\",\"erkek\")\ncinsiyet &lt;- factor(cinsiyet)\nbeden &lt;- c(\"S\",\"M\",\"S\",\"M\",\"S\",\"L\",\"M\",\"L\",\"S\",\"S\")\nbeden &lt;- factor(beden)\n# tapply() fonksiyonunun liste veri yapısına uygulanması\nListe &lt;- list(isim=isim,boy=boy,cinsiyet=cinsiyet,beden=beden,kilo=kilo)\ndf &lt;- data.frame(isim=isim,boy=boy,cinsiyet=cinsiyet,beden=beden,kilo=kilo)\ntapply(Liste$boy, Liste$cinsiyet, sort)\n\n\n$erkek\n[1] 160 160 162 164 167 169\n\n$kadin\n[1] 155 158 165 170\n\n\n\n\nCode\ntapply(Liste$boy, Liste$cinsiyet, sort, decreasing=TRUE)\n\n\n$erkek\n[1] 169 167 164 162 160 160\n\n$kadin\n[1] 170 165 158 155\n\n\n\n\nCode\ntapply(df$boy, Liste$cinsiyet, sort)\n\n\n$erkek\n[1] 160 160 162 164 167 169\n\n$kadin\n[1] 155 158 165 170\n\n\n\n\nCode\ntapply(df$boy, Liste$cinsiyet, mean)\n\n\n   erkek    kadin \n163.6667 162.0000 \n\n\n\n\nCode\ntapply(df$boy, Liste$cinsiyet, sort, decreasing=TRUE)\n\n\n$erkek\n[1] 169 167 164 162 160 160\n\n$kadin\n[1] 170 165 158 155"
  },
  {
    "objectID": "09_dongfonk.html#by-fonksiyonu",
    "href": "09_dongfonk.html#by-fonksiyonu",
    "title": "Döngü Fonkisyonları",
    "section": "by() Fonksiyonu",
    "text": "by() Fonksiyonu\n\n\nCode\nby(df$boy, Liste$cinsiyet, sort)\n\n\nListe$cinsiyet: erkek\n[1] 160 160 162 164 167 169\n------------------------------------------------------------ \nListe$cinsiyet: kadin\n[1] 155 158 165 170\n\n\nCode\nby(df$boy, Liste$cinsiyet, sort, decreasing=TRUE)\n\n\nListe$cinsiyet: erkek\n[1] 169 167 164 162 160 160\n------------------------------------------------------------ \nListe$cinsiyet: kadin\n[1] 170 165 158 155\n\n\nCode\nby(df$boy, Liste$cinsiyet, mean)\n\n\nListe$cinsiyet: erkek\n[1] 163.6667\n------------------------------------------------------------ \nListe$cinsiyet: kadin\n[1] 162\n\n\nCode\nby(df$boy, Liste$cinsiyet, mean)\n\n\nListe$cinsiyet: erkek\n[1] 163.6667\n------------------------------------------------------------ \nListe$cinsiyet: kadin\n[1] 162\n\n\n\n\nCode\nby(df$boy, Liste$cinsiyet, mean)\n\n\nListe$cinsiyet: erkek\n[1] 163.6667\n------------------------------------------------------------ \nListe$cinsiyet: kadin\n[1] 162\n\n\nCode\nby(df$boy, Liste$cinsiyet, mean)\n\n\nListe$cinsiyet: erkek\n[1] 163.6667\n------------------------------------------------------------ \nListe$cinsiyet: kadin\n[1] 162"
  },
  {
    "objectID": "09_dongfonk.html#apply",
    "href": "09_dongfonk.html#apply",
    "title": "Döngü Fonkisyonları",
    "section": "apply()",
    "text": "apply()\napply() fonksiyonu, bir dizinin kenar boşlukları üzerinde bir fonksiyonu (genellikle anonim bir fonksiyon) değerlendirmek için kullanılır. Çoğunlukla bir matrisin (sadece 2 boyutlu bir dizi) satırlarına veya sütunlarına bir fonksiyon uygulamak için kullanılır. Ancak, örneğin bir dizi matrisin ortalamasını almak gibi genel dizilerde de kullanılabilir. apply() kullanmak bir döngü yazmaktan gerçekten daha hızlı değildir, ancak tek satırda çalışır ve oldukça kompakttır.\n\n\nCode\nstr(apply)\n\n\nfunction (X, MARGIN, FUN, ..., simplify = TRUE)  \n\n\napply()` işlevinin argümanları şunlardır\n\nX` bir dizidir\nMARGIN` hangi kenar boşluklarının “tutulması” gerektiğini gösteren bir tamsayı vektörüdür.\nFUN` uygulanacak bir fonksiyondur\n…,FUN`a aktarılacak diğer argümanlar içindir\n\nBurada 20’ye 10’luk bir normal rastgele sayılar matrisi oluşturuyorum. Daha sonra her bir sütunun ortalamasını hesaplıyorum.\n\n\nCode\nx &lt;- matrix(rnorm(200), 20, 10)\napply(x, 2, mean)  ## Her sütunun ortalamasını alın\n\n\n [1] -0.05285811 -0.07607188 -0.14416325  0.26788937 -0.04893217 -0.31775109\n [7]  0.04588463 -0.02798894  0.07064680 -0.23878366\n\n\nAyrıca her satırın toplamını da hesaplayabilirim.\n\n\nCode\napply(x, 1, sum)   ## Her satırın ortalamasını alın\n\n\n [1] -3.81001275  0.28069148 -2.84131594 -0.34383521  3.35432798 -1.41790398\n [7]  4.16348869 -3.12614772 -5.05668423  5.08399986 -0.48483448  5.33222301\n[13] -3.33862932 -1.39998450  2.37859098  0.01082604 -6.29457190 -0.26287700\n[19]  0.71133578 -3.38125293\n\n\nHer iki apply() çağrısında da dönüş değerinin bir sayı vektörü olduğuna dikkat edin.\nMuhtemelen ikinci argümanın, satır istatistikleri mi yoksa sütun istatistikleri mi istediğimize bağlı olarak 1 veya 2 olduğunu fark etmişsinizdir. Peki apply() fonksiyonunun ikinci argümanı tam olarak nedir?\nMARGIN argümanı esasen apply() fonksiyonuna dizinin hangi boyutunu korumak veya saklamak istediğinizi belirtir. Yani her bir sütunun ortalamasını alırken şunu belirtirim\n\n\nCode\napply(x, 2, mean)\n\n\nçünkü ortalamayı alarak ilk boyutu (satırları) daraltmak istiyorum ve sütun sayısını korumak istiyorum. Benzer şekilde, satır toplamlarını istediğimde\n\n\nCode\napply(x, 1, mean)\n\n\nçünkü sütunları (ikinci boyut) daraltmak ve satır sayısını (ilk boyut) korumak istiyorum.\n\nSütun/Satır Toplamları ve Ortalamaları\nMatrislerin sütun/satır toplamları ve sütun/satır ortalamalarının özel durumları için bazı kullanışlı kısa yollarımız vardır.\n\nrowSums = apply(x, 1, sum)\nrowMeans = apply(x, 1, mean)\ncolSums = apply(x, 2, sum)\ncolMeans = apply(x, 2, mean)\n\nKısayol fonksiyonları yoğun bir şekilde optimize edilmiştir ve bu nedenle çok daha hızlıdır, ancak büyük bir matris kullanmadığınız sürece muhtemelen fark etmeyeceksiniz. Bu fonksiyonların bir başka güzel yönü de biraz daha açıklayıcı olmalarıdır. Kodunuzda colMeans(x) yazmak, apply(x, 2, mean) yazmaktan muhtemelen daha anlaşılırdır.\n\nOrtalaması 50, standart sapması 5 olan normal dağılıma sahip 100 elemanlı “S1” vektöründen 20 satırlı ve 5 sütunlu matrisin oluşturulması\n\n\n\nCode\nset.seed(12)\nS1 &lt;- sample(rnorm(10000, 50, 5), 100, replace=TRUE)\nMatris1 &lt;- matrix(S1, nrow=20, ncol=5)\n\n\n\nmean() fonksiyonunun “Matris1” nesnesinin her bir sütununa uygulanarak sütunların ortalamasının alınması\n\n\n\nCode\napply(Matris1, 2, mean) # Fonksiyonun ikinci girdisi olan 2  sütun elamanlarını temsil etmektedir.\n\n\n[1] 48.20485 52.13701 49.38658 50.61689 48.60479\n\n\n\nsummary() fonksiyonunun “Matris1” nesnesinin her bir sütununa uygulanması\n\n\n\nCode\napply(Matris1, 2, summary)\n\n\n            [,1]     [,2]     [,3]     [,4]     [,5]\nMin.    39.00080 40.23309 39.04749 39.32974 37.74364\n1st Qu. 45.21933 48.44165 45.57123 47.36401 43.71252\nMedian  49.31295 52.24410 49.49029 51.08794 47.62144\nMean    48.20485 52.13701 49.38658 50.61689 48.60479\n3rd Qu. 52.40540 55.97719 52.70180 54.36235 53.32016\nMax.    55.24910 63.33272 58.88203 59.93019 60.51715\n\n\n\nsummary() fonksiyonunun “Matris1” nesnesinin her bir satırına uygulanması\n\n\n\nCode\napply(Matris1, 1, summary)\n\n\n            [,1]     [,2]     [,3]     [,4]     [,5]     [,6]     [,7]     [,8]\nMin.    45.82396 39.16789 51.63544 40.23309 39.04749 44.81304 39.73637 51.11418\n1st Qu. 47.78055 39.32974 52.46878 43.82775 47.16408 47.46234 46.19462 51.96290\nMedian  48.36804 46.24689 53.43269 47.65095 49.56534 49.64774 49.12984 52.65739\nMean    50.47126 45.82933 54.50679 47.52181 48.65629 52.22224 50.10067 54.92558\n3rd Qu. 54.95931 51.70256 56.11501 49.31343 52.65050 59.25790 55.94640 55.56069\nMax.    55.42443 52.69959 58.88203 56.58380 54.85404 59.93019 59.49613 63.33272\n            [,9]    [,10]    [,11]    [,12]    [,13]    [,14]    [,15]    [,16]\nMin.    44.96852 39.00080 43.36682 48.42947 42.13211 42.73818 40.55680 41.37856\n1st Qu. 48.34900 48.83882 52.38428 50.17014 48.46619 46.50319 43.21988 42.18138\nMedian  52.21976 53.65437 52.38428 51.40809 48.88713 50.98943 45.46715 47.83169\nMean    50.61489 50.35382 51.18599 53.07152 50.44334 49.60777 46.24742 47.67032\n3rd Qu. 53.31388 54.20555 52.91266 54.83276 55.24910 51.36429 46.82348 50.54044\nMax.    54.22331 56.06955 54.88190 60.51715 57.48218 56.44375 55.16980 56.41952\n           [,17]    [,18]    [,19]    [,20]\nMin.    40.53528 40.55680 37.74364 46.71473\n1st Qu. 46.04637 44.03153 47.73063 49.31247\nMedian  47.98124 44.46635 49.30321 51.96828\nMean    48.55872 45.45876 47.52113 50.83282\n3rd Qu. 49.85073 46.40143 50.16318 52.82962\nMax.    58.37998 51.83770 52.66500 53.33901\n\n\n\n\nkisisel tanımlı fonksiyon ile kullanılması\n\nYazılan bagil_degiskenlik() fonksiyonunun “Matris1” nesnesinin her bir sütununa uygulanarak her bir değişkenin bağıl değişkenlik katsayısının hesaplanması\n\n\n\nCode\nbagil_degiskenlik &lt;- function(x){\n(sd(x)/mean(x))*100\n}\napply(Matris1, 2, bagil_degiskenlik)\n\n\n[1] 11.24914 10.05771 11.02709 10.59998 12.97312\n\n\nAdsız (anonymous) fonksiyonlar ile kullanılması\n\n\nCode\napply(Matris1, 2, function(x){(sd(x)/mean(x))*100})\n\n\n[1] 11.24914 10.05771 11.02709 10.59998 12.97312"
  },
  {
    "objectID": "09_dongfonk.html#mapply",
    "href": "09_dongfonk.html#mapply",
    "title": "Döngü Fonkisyonları",
    "section": "mapply()",
    "text": "mapply()\nmapply() fonksiyonu, bir dizi argüman üzerinde paralel olarak bir fonksiyon uygulayan bir tür çok değişkenli uygulamadır. lapply() ve arkadaşlarının yalnızca tek bir R nesnesi üzerinde yineleme yaptığını hatırlayın. Peki ya birden fazla R nesnesi üzerinde paralel olarak yineleme yapmak isterseniz? İşte mapply() bunun içindir.\n\n\nCode\nstr(mapply)\n\n\nfunction (FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE, USE.NAMES = TRUE)  \n\n\nmapply()` işlevinin argümanları şunlardır\n\nFUN` uygulanacak bir işlevdir\n…` üzerine uygulanacak R nesnelerini içerir\nMoreArgs FUN için diğer argümanların bir listesidir.\nSIMPLIFY` sonucun basitleştirilip basitleştirilmeyeceğini belirtir\n\nmapply() fonksiyonu, lapply() fonksiyonundan farklı bir argüman sırasına sahiptir, çünkü üzerinde yinelenecek nesne yerine uygulanacak fonksiyon önce gelir. Fonksiyonu uyguladığımız R nesneleri ... argümanında verilir, çünkü keyfi sayıda R nesnesi üzerinde uygulama yapabiliriz.\nÖrneğin, aşağıdakileri yazmak sıkıcıdır\nlist(rep(1, 4), rep(2, 3), rep(3, 2), rep(4, 1))\nBunun yerine mapply() ile şunları yapabiliriz\n\n\nCode\n mapply(rep, 1:4, 4:1)\n\n\n[[1]]\n[1] 1 1 1 1\n\n[[2]]\n[1] 2 2 2\n\n[[3]]\n[1] 3 3\n\n[[4]]\n[1] 4\n\n\nBu, rep()in ilk argümanına 1:4 dizisini ve ikinci argümanına 4:1 dizisini geçirir.\nİşte randon Normal değişkenleri simüle etmek için başka bir örnek.\n\n\nCode\nnoise &lt;- function(n, mean, sd) {\n      rnorm(n, mean, sd)\n}\n## 5 random sayı\nnoise(5, 1, 2)        \n\n\n[1] -4.327419  1.768021  1.886192  1.184867  3.169347\n\n\nCode\n##  sadece 1 sayı kümesini simüle ediyor, 5 değil\nnoise(1:5, 1:5, 2)    \n\n\n[1] -0.7104655  5.0691634  3.3646210  6.2241624  6.4295708\n\n\nBurada mapply() fonksiyonunu kullanarak 1:5 dizisini ayrı ayrı noise() fonksiyonuna aktarabiliriz, böylece her biri farklı uzunluk ve ortalamaya sahip 5 rastgele sayı kümesi elde edebiliriz.\n\n\nCode\nmapply(noise, 1:5, 1:5, 2)\n\n\n[[1]]\n[1] 3.242948\n\n[[2]]\n[1] 6.278157 4.074560\n\n[[3]]\n[1] 2.4963123 0.7828741 1.7470981\n\n[[4]]\n[1]  3.237684302  8.405556702 -0.004281222  4.864798044\n\n[[5]]\n[1] 2.960924 3.354030 5.848408 4.250261 4.707497\n\n\nYukarıdaki mapply() çağrısı aşağıdaki ile aynıdır\n\n\nCode\nlist(noise(1, 1, 2), noise(2, 2, 2),\n     noise(3, 3, 2), noise(4, 4, 2),\n     noise(5, 5, 2))\n\n\n[[1]]\n[1] 0.3604737\n\n[[2]]\n[1] 0.8376833 3.0033085\n\n[[3]]\n[1] 1.944540 1.339083 4.066594\n\n[[4]]\n[1] 3.941666 4.764200 4.716390 5.835816\n\n[[5]]\n[1] 4.662944 2.941786 4.114172 4.941673 8.722601"
  },
  {
    "objectID": "09_dongfonk.html#bir-fonksiyonu-vektörleştirme",
    "href": "09_dongfonk.html#bir-fonksiyonu-vektörleştirme",
    "title": "Döngü Fonkisyonları",
    "section": "Bir Fonksiyonu Vektörleştirme",
    "text": "Bir Fonksiyonu Vektörleştirme\nmapply() fonksiyonu bir fonksiyonu otomatik olarak “vektörleştirmek” için kullanılabilir. Bunun anlamı, tipik olarak yalnızca tek argüman alan bir fonksiyonu almak ve vektör argümanları alabilen yeni bir fonksiyon oluşturmak için kullanılabileceğidir.\nİşte bazı veriler, bir ortalama ve bir standart sapma verildiğinde kareler toplamını hesaplayan bir fonksiyon örneği. Formül \\(\\sum_{i=1}^n(x_i-\\mu)^2/\\sigma^2\\) şeklindedir.\n\n\nCode\nsumsq &lt;- function(mu, sigma, x) {\n        sum(((x - mu) / sigma)^2)\n}\n\n\nBu fonksiyon bir ortalama mu, bir standart sapma sigma ve bir vektör x içinde bazı veriler alır.\nBirçok istatistiksel uygulamada, en uygun mu ve sigma değerlerini bulmak için kareler toplamını minimize etmek isteriz. Bunu yapmadan önce, birçok farklı mu veya sigma değeri için fonksiyonu değerlendirmek veya çizmek isteyebiliriz. Ancak, bir mu veya sigma vektörü geçmek bu fonksiyonla çalışmayacaktır çünkü vektörleştirilmemiştir.\n\n\nCode\nx &lt;- rnorm(100)       ## veri üret\nsumsq(1:10, 1:10, x)  ## İstediğimiz bu değil\n\n\n[1] 135.6538\n\n\nsumsq() çağrısının 10 değer yerine yalnızca bir değer ürettiğine dikkat edin.\nAncak, yapmak istediğimizi mapply() kullanarak yapabiliriz.\n\n\nCode\nmapply(sumsq, 1:10, 1:10, MoreArgs = list(x = x))\n\n\n [1] 234.7801 142.9820 123.2306 115.3890 111.3348 108.9033 107.2993 106.1690\n [9] 105.3329 104.6911\n\n\nHatta R’de Vectorize() adında, fonksiyonunuzun vektörleştirilmiş bir versiyonunu otomatik olarak oluşturabilen bir fonksiyon bile vardır. Böylece aşağıdaki gibi tamamen vektörleştirilmiş bir vsumsq() fonksiyonu oluşturabiliriz.\n\n\nCode\nvsumsq &lt;- Vectorize(sumsq, c(\"mu\", \"sigma\"))\nvsumsq(1:10, 1:10, x)\n\n\n [1] 234.7801 142.9820 123.2306 115.3890 111.3348 108.9033 107.2993 106.1690\n [9] 105.3329 104.6911\n\n\nÇok havalı, değil mi?"
  },
  {
    "objectID": "09_dongfonk.html#özet",
    "href": "09_dongfonk.html#özet",
    "title": "Döngü Fonkisyonları",
    "section": "Özet",
    "text": "Özet\n\nR’deki döngü fonksiyonları çok güçlüdür çünkü kompakt bir form kullanarak veriler üzerinde bir dizi işlem yapmanıza olanak tanır\nBir döngü fonksiyonunun çalışması, bir R nesnesi (örneğin bir liste, vektör veya matris) üzerinde yinelemeyi, nesnenin her bir öğesine bir fonksiyon uygulamayı ve sonuçları harmanlayıp harmanlanmış sonuçları döndürmeyi içerir.\nDöngü fonksiyonları, döngü fonksiyonunun ömrü boyunca var olan ancak hiçbir yerde saklanmayan anonim fonksiyonları yoğun bir şekilde kullanır\nsplit() fonksiyonu, bir R nesnesini başka bir değişken tarafından belirlenen ve daha sonra döngü fonksiyonları kullanılarak üzerinde döngü yapılabilen alt kümelere bölmek için kullanılabilir."
  },
  {
    "objectID": "07_kontrol.html",
    "href": "07_kontrol.html",
    "title": "Kontrol Yapıları ve Dögüler",
    "section": "",
    "text": "R’deki kontrol yapıları, bir dizi R ifadesinin yürütme akışını kontrol etmenize olanak tanır. Temel olarak kontrol yapıları, her zaman aynı R kodunu çalıştırmak yerine kod satırlarında mantığımızı kullanmamızı sağlar.\nKontrol yapıları, girdilere veya verilerin özelliklerine yanıt vermenize ve buna göre farklı R ifadeleri yürütmenize olanak tanır.\nYaygın olarak kullanılan kontrol yapıları:\nÇoğu kontrol yapısı etkileşimli oturumlarda değil, daha ziyade fonksiyonlar veya daha uzun ifadeler yazarken kullanılır. Ancak, bu yapılar fonksiyonlarda kullanılmak zorunda değildir ve progralama öğrenmek için bu yapılara aşina olmak gereklidir."
  },
  {
    "objectID": "07_kontrol.html#if-else",
    "href": "07_kontrol.html#if-else",
    "title": "Kontrol Yapıları ve Dögüler",
    "section": "if-else",
    "text": "if-else\nif-else kombinasyonu muhtemelen R’de (veya belki de herhangi bir dilde) en sık kullanılan kontrol yapısıdır. Bu yapı, bir koşulu test etmenize ve doğru ya da yanlış olmasına bağlı olarak ona göre hareket etmenize olanak tanır.\nÖncelilke if koşullu ifadesinin kullanımını gösterelim:\nif(&lt;koşul&gt;) {\n        ## kodlar\n} \nYukarıdaki kod, koşul yanlışsa hiçbir şey yapmaz. Koşul yanlış olduğunda yürütmek istediğiniz bir eyleminiz varsa, o zaman bir else cümlesine ihtiyacınız vardır.\nif(&lt;koşul&gt;) {\n        ## kodlar\n}else {\n        ## kodlar\n}\nifi herhangi bir if ile takip ederek bir dizi test yapabilirsiniz. else if kullanabilirsiniz.\nif(&lt;kosul1&gt;) {\n        ## kodlar\n} else if(&lt;kosul2&gt;)  {\n        ## kodlar\n} else {\n        ## kodlar\n}\nİşte geçerli bir if/else yapısına bir örnek.\n\n##  bir rastgele sayı oluşturun\nset.seed(41)\nx &lt;- runif(1, 0, 10)\nif(x &gt; 3) {\n        y &lt;- 10\n} else {\n        y &lt;- 0\n}\nx;y\n\n[1] 2.134905\n\n\n[1] 0\n\n\ny değeri x &gt; 3 olup olmamasına bağlı olarak ayarlanır. Bu ifade eşdeğer bir şekilde de yazılabilir.\n\ny &lt;- if(x &gt; 3) {\n        10\n} else { \n        0\n}\n\nBu ifadeyi yazmanın hiçbir yolu diğerinden daha doğru değildir. Hangisini kullanacağınız sizin tercihlerinize bağlıdır.\nElbette else cümlesi gerekli değildir. Kendi koşulları doğruysa her zaman çalıştırılan bir dizi if cümlesi de oluşturabilirsiniz.\nif(&lt;kosul1&gt;) {\n\n}\n\nif(&lt;kosul2&gt;) {\n\n}\n\nÖrnekler\nÖlçme açısından bakılacak olursa koşul bir ölçütü, durum cümlesi ise değerlendirmeyi gösterilebilir. Örneğin, yapılan bir sınavda geçme notu 60 olarak belirlendiğinde, 75 alan bir öğrencinin durumu aşağıdaki if() durum cümlesiyle belirlenebilmektedir.\n\nx &lt;-75\nif(x&gt;=65){\nprint(\"Basarılı\")\n}\n\n[1] \"Basarılı\"\n\n\nAncak kontrol durumu çoğunlukla tek önermeye bağlı değildir.\n\nAşağıdaki kod çıktı vermeyecektir\n\nx &lt;-60\nif(x&gt;=65){\nprint(\"Basarılı\")\n}\n\nelse kullanımı ile çıktı alabiliriz\n\n\nx &lt;-60\n# Başarılı Durum\nif(x&gt;=65){\nprint(\"Basarılı\")\n}else{\nprint(\"Basarisiz\")\n}\n\n[1] \"Basarisiz\"\n\n\nKoşul her zaman iki kategori ile tanımlanamayabilir. Bu durumda kullanımı else if() ile destekleyebiliriz\n\nx &lt;- 75 # Başarılı Durum\nif(x&gt;=90){\nprint(\"AA\")\n}else if(x&gt;=80){\nprint(\"BA\")\n}else if(x&gt;=70){\nprint(\"BB\")\n}else if(x&gt;=65){\nprint(\"CB\")\n}else if(x&gt;=60){\nprint(\"CC\")\n}else if(x&gt;=50){\nprint(\"DD\")\n}else if(x&gt;=30){\nprint(\"FD\")\n}else{\nprint(\"FF\")\n}\n\n[1] \"BB\"\n\n\n\n\nSıra sizde\n\na sayısının çarpmaya göre tersi 1/a’dir. Ancak bu durum 0 için tanımsızdır. if() durum cümlesi kullanarak bu durumu kodlayınız. x &lt;- 5 ve x&lt;-0 için için test ediniz.\n\n\n\n[1] \"5'in carpmaya gore tersi 1/5\"\n\n\nx &lt;- 0 için test ediniz.\n\n\n[1] \"1/0 tanımsızdır.\"\n\n\n\n-2 ile 2 arasında sayılar üretip, bunu x değişkenine atayalım.\n\n\nx &lt;- rnorm(1)\nx\n\n[1] 1.899161\n\n\nRandom olarak üretilen sayının 1’den büyük olması durumunda çıktı “1’den büyük” -1 ile 1 arasında olması durumunda “-1 ile +1 arasında” -1’den küçük olması durumunda ise “-1’den küçük” çıktısı versin.\n\n\n[1] -1.071021\n\n\n[1] \"sayı -1'den küçük\""
  },
  {
    "objectID": "07_kontrol.html#if-all",
    "href": "07_kontrol.html#if-all",
    "title": "Kontrol Yapıları ve Dögüler",
    "section": "if() & all()",
    "text": "if() & all()\nHer ne kadar if() önermesi bir elemanlı vektörlerde çıktı verse de if() önermesi içinde kullanılabilen all fonkisyonu ile vektörün tüm elemanları için koşul testi yapabilir.\n\nx &lt;- c(1,2,-3,4)\nif(all(x&gt;0)){\n  \n  print(\"tum sayilar 0'dan buyuktur\")\n  \n} else{\n  \n  print(\"tum sayilar 0'dan buyuk degildir\")\n}\n\n[1] \"tum sayilar 0'dan buyuk degildir\""
  },
  {
    "objectID": "07_kontrol.html#if-any",
    "href": "07_kontrol.html#if-any",
    "title": "Kontrol Yapıları ve Dögüler",
    "section": "if() & any()",
    "text": "if() & any()\nBir vektörde içinde yer alan her hangi bir elemana dair test ise if() fonksiyonu içinde any() fonksiyonu ile sağlanabilir.\n\nx &lt;- c(1,2,-3,4)\nif(any(x&lt;0)){\n  \n  print(\"nesne en az bir negatif sayi icerir\")\n  \n} else{\n  \n  print(\"nesne negatif sayi icermez\")\n}\n\n[1] \"nesne en az bir negatif sayi icerir\""
  },
  {
    "objectID": "07_kontrol.html#if-çoklu-islem",
    "href": "07_kontrol.html#if-çoklu-islem",
    "title": "Kontrol Yapıları ve Dögüler",
    "section": "if() çoklu islem",
    "text": "if() çoklu islem\n\nx &lt;- 2\nif(x == 2) {\n  \n  goster3 &lt;- \"Dogru\"  \n  goster3b &lt;- c(1,2,3)\n  goster3c &lt;- sample(1:1000,4)\n} else  {\n  \n  goster3 &lt;- \"Yanlis\"  \n  goster3b &lt;- c(3,2,1)\n  goster3c &lt;- 10000 + sample(1:1000,4)\n  \n}\n\ngoster3\n\n[1] \"Dogru\"\n\ngoster3b\n\n[1] 1 2 3\n\ngoster3c\n\n[1] 584 698 413 326"
  },
  {
    "objectID": "07_kontrol.html#ifelse",
    "href": "07_kontrol.html#ifelse",
    "title": "Kontrol Yapıları ve Dögüler",
    "section": "ifelse()",
    "text": "ifelse()\nifelse() durum cümlesi, if() durum cümlelerinde vektörlerin kullanımından kaynaklı sıkıntılara çözüm sunar. Bu bakımdan ifelse(), if() durum cümlelerinin vektörler için kullanılabilir halidir.\nifelse() durum cümlesinin genel kullanımı aşağıdaki gibidir.\nifelse(koşul, Doğru İfade, Yanlış İfade)\n\nx &lt;- 20\nifelse(x&gt;= 65, \"Başarılı\" ,\"Başarısız\")\n\n[1] \"Başarısız\"\n\n\nifelse() eksik veri atamak için de kullanılabilir. Eksik verinin 99 ile gösterildiği bir vektörde eksik veri yerine NA atama örneği\n\n(x &lt;- c(1,2,3,4,99,5))\n\n[1]  1  2  3  4 99  5\n\nifelse(x==99, NA, x)\n\n[1]  1  2  3  4 NA  5\n\n\n\nSıra Sizde\n\nElimizdeki bir nesnede yer alan sayıların tek ya da çift olduğunu yazdırma\n\n\nset.seed(41)\nsayilar &lt;- sample(50:90,27)\nsayilar\n\n [1] 89 84 54 81 57 78 55 71 80 62 87 67 70 83 82 61 66 53 50 69 79 64 85 51 73\n[26] 74 88\n\n\n\n\n [1] \"Tek Sayi\"  \"Cift Sayi\" \"Cift Sayi\" \"Tek Sayi\"  \"Tek Sayi\"  \"Cift Sayi\"\n [7] \"Tek Sayi\"  \"Tek Sayi\"  \"Cift Sayi\" \"Cift Sayi\" \"Tek Sayi\"  \"Tek Sayi\" \n[13] \"Cift Sayi\" \"Tek Sayi\"  \"Cift Sayi\" \"Tek Sayi\"  \"Cift Sayi\" \"Tek Sayi\" \n[19] \"Cift Sayi\" \"Tek Sayi\"  \"Tek Sayi\"  \"Cift Sayi\" \"Tek Sayi\"  \"Tek Sayi\" \n[25] \"Tek Sayi\"  \"Cift Sayi\" \"Cift Sayi\"\n\n\n\nElimizdeki bir nesnede yer alan sayıların 0, pozitif veya negatif oldugu belirleme\n\n\nset.seed(987)\nsayilar &lt;- sample(-10:10,27,replace=TRUE)\nsayilar\n\n [1]   4   3   4   2   1   7 -10   5   6  -8   7  -3   9   7  -9  10   4  -1  -8\n[20]   8  -3   0   4   5   8   1   3\n\n\n\n\n [1] \"Pozitif\" \"Pozitif\" \"Pozitif\" \"Pozitif\" \"Pozitif\" \"Pozitif\" \"Negatif\"\n [8] \"Pozitif\" \"Pozitif\" \"Negatif\" \"Pozitif\" \"Negatif\" \"Pozitif\" \"Pozitif\"\n[15] \"Negatif\" \"Pozitif\" \"Pozitif\" \"Negatif\" \"Negatif\" \"Pozitif\" \"Negatif\"\n[22] \"Sıfır\"   \"Pozitif\" \"Pozitif\" \"Pozitif\" \"Pozitif\" \"Pozitif\"\n\n\n\nFinalden 50 ve üzeri alan ve en az 11 derse devam edem öğrencilerin geçme notları finalin %60 ve vizenin %40 alınarak hesaplansın, 11’den az derse devam eden öğrencilerin geçme notu final notunun %60’ olarak alınsın.\n\n\nvize &lt;- c(60,70,80,90,55)\nfinal &lt;- c(45,65,70,50,80)\ndevam &lt;- c(14,10,13,12,11)"
  },
  {
    "objectID": "07_kontrol.html#for-döngüsü-ve-kontrol",
    "href": "07_kontrol.html#for-döngüsü-ve-kontrol",
    "title": "Kontrol Yapıları ve Dögüler",
    "section": "for() Döngüsü ve Kontrol",
    "text": "for() Döngüsü ve Kontrol\nHer zaman işlemi tüm elemanlara uygulamak istemeyebiliriz. Bunu önlemek icin akış kontrolü yapmak gerekir.\nKontrol mantıksal operatörlerle ya da koşul cümleleri ile sağlanabilir.\n\nfor(i in 1:3){\n  if (i==2) cat(\"indeks cift sayidir:\",\"\\n\")\n  else cat(i,\"\\n\")\n}\n\n1 \nindeks cift sayidir: \n3 \n\n\n\nfor(i in 1:3){\n  if (i==2) {\ncat(\"indeks degeri ikidir:\",i,\"\\n\") \n  }else{cat(\"indeks degeri iki degildir\",\"\\n\")}\n}\n\nindeks degeri iki degildir \nindeks degeri ikidir: 2 \nindeks degeri iki degildir \n\n\n\nDöngünün indeksi her zaman bir tam sayı olmak zorunda değildir. Liste, veri seti, matris de olabilir.\nif sadece numerik değer ve vektörlerle çalışmaz. Aynı zamanda veri seti, matris ve listelerle de çalışabilir.\n\n\nd &lt;- data.frame(a = 1:5, b=2:6)\nd\n\n  a b\n1 1 2\n2 2 3\n3 3 4\n4 4 5\n5 5 6\n\nfor(x in d) {\n  cat(\"sutun toplamlari:\", sum(x), \"\\n\")\n}\n\nsutun toplamlari: 15 \nsutun toplamlari: 20 \n\n\n\nX &lt;- cbind(1:5, 21:25)\nX\n\n     [,1] [,2]\n[1,]    1   21\n[2,]    2   22\n[3,]    3   23\n[4,]    4   24\n[5,]    5   25\n\n\n\nSıra Sizde\nAşağıdaki çıktıyı elde etmek için gerekli kodu yazınız.\n\n\n1 satirdaki degerlerin carpimi 21 olarak hesaplanmistir. \n2 satirdaki degerlerin carpimi 44 olarak hesaplanmistir. \n3 satirdaki degerlerin carpimi 69 olarak hesaplanmistir. \n4 satirdaki degerlerin carpimi 96 olarak hesaplanmistir. \n5 satirdaki degerlerin carpimi 125 olarak hesaplanmistir."
  },
  {
    "objectID": "07_kontrol.html#next-ve-break",
    "href": "07_kontrol.html#next-ve-break",
    "title": "Kontrol Yapıları ve Dögüler",
    "section": "next() ve break()",
    "text": "next() ve break()\n\nnext() ve break() fonksiyonları döngülerde kontrol mekanizmasıdır. Döngüyü sadece belirli bir koşulda çalıştırmak istemezseniz next() fonksiyonunu kullanabilirsiniz.\n\n\nfor(i in 1:6){\n  if(i==3){\nnext\n  }\n  print (i)}\n\n[1] 1\n[1] 2\n[1] 4\n[1] 5\n[1] 6\n\n\n\nDöngüyü sadece belirli bir koşulda durdurmak isterseniz break() fonksiyonunu kullanabilirsiniz.\n\n\nfor(i in 1:12){\n  if(i==3){\nbreak\n  }\n  print (i)}\n\n[1] 1\n[1] 2\n\n\n\nDöngüler uzun zamanda çalışır. ilk olarak başlangıç noktasını belirleyelim\n\n\nset.seed(853)\ny&lt;-matrix(rnorm(1000000),nrow=1000)\nz&lt;-0*y\ntime1&lt;-as.numeric(Sys.time())\n\n\nişlemi döngü ile yapalım.\n\n\n#loop:\ntime2 &lt;- system.time(\n  for(i in 1:1000){\n  for(j in 1:1000){\nz[i,j]&lt;-y[i,j]^2\n  }\n})\n\ntime2\n\n   user  system elapsed \n   0.07    0.00    0.08 \n\n\n\nayni islemi dongusuz yapma\n\n\ntime3 &lt;- system.time(z&lt;-y^2)\ntime3\n\n   user  system elapsed \n      0       0       0"
  },
  {
    "objectID": "07_kontrol.html#içiçe-for-döngüleri",
    "href": "07_kontrol.html#içiçe-for-döngüleri",
    "title": "Kontrol Yapıları ve Dögüler",
    "section": "İçiçe for döngüleri",
    "text": "İçiçe for döngüleri\nfor döngüler birbirinin içinde yuvalanabilir.\nx &lt;- matrix(1:6, 2, 3)\n\nfor(i in seq_len(nrow(x))) {\n        for(j in seq_len(ncol(x))) {\n                print(x[i, j])\n        }   \n}\nİç içe döngüler genellikle çok boyutlu veya hiyerarşik veri yapıları (örn. matrisler, listeler) için gereklidir. Yine de iç içe geçme konusunda dikkatli olun. 2-3 seviyeden fazla iç içe geçme genellikle kodun okunmasını/anlaşılmasını zorlaştırır. Çok sayıda iç içe döngüye ihtiyaç duyuyorsanız, fonksiyonları kullanarak döngüleri parçalamak isteyebilirsiniz (daha sonra tartışılacaktır).\n\nsıra sizde\n\nBazen döngüler iç içe kullanılabilir 5X5 bir matrisin her bir elemanı satır ve sütun indeksleri çarpımı olsun orneğin 2. satır 5. sütun elemanı 2*5=10 olsun. Bu işlemi yapmak için öncelikle boş bir matris oluştumak lazım.\n\n\nm2 &lt;- matrix(0,nrow=5,ncol=5)\nm2\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    0    0    0    0    0\n[2,]    0    0    0    0    0\n[3,]    0    0    0    0    0\n[4,]    0    0    0    0    0\n[5,]    0    0    0    0    0\n\n\n\nAşağıdaki çıktıyı elde edecek kodu oluşturmaya çalışın\n\n\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    2    3    4    5\n[2,]    2    4    6    8   10\n[3,]    3    6    9   12   15\n[4,]    4    8   12   16   20\n[5,]    5   10   15   20   25"
  },
  {
    "objectID": "07_kontrol.html#özet",
    "href": "07_kontrol.html#özet",
    "title": "Kontrol Yapıları ve Dögüler",
    "section": "Özet",
    "text": "Özet\n\nif,whilevefor gibi kontrol yapıları bir R programının akışını kontrol etmenizi sağlar\nSonsuz döngülerden, teorik olarak doğru olduklarına inansanız bile, genellikle kaçınılmalıdır.\nBurada bahsedilen kontrol yapıları öncelikle program yazmak için kullanışlıdır; komut satırı etkileşimli çalışmalar için “apply” fonksiyonları daha kullanışlıdır."
  },
  {
    "objectID": "07_kontrol.html#ödevler",
    "href": "07_kontrol.html#ödevler",
    "title": "Kontrol Yapıları ve Dögüler",
    "section": "Ödevler",
    "text": "Ödevler\nS1. Kullanıcı tarafından belirlenen nxn boyutunda bir matris oluşturulsun. nxn bir matrisin her bir elemanı satır ve sütun indeksleri çarpımı olsun. orneğin 2. satır 5. sütun elemanı 2*5=10 olsun\n\nEger matrisin boyutları 10x10’dan büyükse sadece 10 satırını yazsın eğer matrisi boyutları 10x10’dan küçükse hepsini yazsın.\nKullancı üç girdiğinde oluşacak çıktı:\n\n\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    2    4    6\n[3,]    3    6    9\n\n\nS2. Fibonacci dizisinin elemanlari 1 1 2 3 5 8 13 21 34 55 89 … dizinin elemanlarını for() ve/ve ya while() döngüsü ile oluşturmaya çalışınız.\nS3. Aşağıda ornek veri setini oluşturma kodları yer almaktadır\n\nset.seed(1786)\nornek&lt;-exp(matrix(rnorm(2000),nrow=100))\nindex1.temp&lt;-sample(1:100,10)\nindex2.temp&lt;-sample(1:20,10)\nfor(i in 1:10){\n  ornek[index1.temp[i],index2.temp[i]]&lt;--1\n}\n head(ornek,6)\n\n          [,1]      [,2]      [,3]      [,4]      [,5]      [,6]     [,7]\n[1,] 0.5549525 0.3247338 0.5236032 0.3821027 0.4187483 0.1588847 5.226161\n[2,] 0.5671734 1.2431592 0.8812069 2.6695443 0.6984453 1.0838792 1.079946\n[3,] 4.8068457 0.3449856 0.6079096 0.9194116 1.5361330 1.9082522 0.671977\n[4,] 1.3509234 2.3569582 0.1931423 4.0707377 0.3527276 2.3498825 1.198514\n[5,] 0.9012032 0.2310683 0.2317487 1.3809955 0.9168741 0.6237213 1.609403\n[6,] 1.2331483 1.1066056 0.3546027 0.3705946 0.9002303 0.2528151 3.337512\n          [,8]      [,9]     [,10]     [,11]     [,12]     [,13]     [,14]\n[1,] 2.6280057 1.2251526 0.4760966 5.2379018 1.4782655 1.3761338 1.0202608\n[2,] 2.2087385 0.5195551 0.3757409 0.9004808 0.7409205 2.0543842 0.3668661\n[3,] 1.5310016 0.6735007 2.2069776 0.5060078 0.7171477 1.2378655 0.3651527\n[4,] 2.5592899 1.8205257 1.2624052 0.1524106 0.3828322 1.2406799 0.7954326\n[5,] 1.1005990 1.0619758 2.1047783 2.7816902 1.4010878 0.6140937 0.5136842\n[6,] 0.9799103 2.7520425 2.5407624 1.3889136 0.4346808 1.0637950 0.1859157\n         [,15]     [,16]      [,17]     [,18]    [,19]     [,20]\n[1,] 0.1437680 4.1807643  1.7389423 3.0760640 1.550557 4.4838291\n[2,] 3.8674407 1.9349214  0.6333922 0.4862532 5.275571 0.1161029\n[3,] 1.4724240 0.5971116 11.5869157 0.7580736 4.755297 1.0583051\n[4,] 0.1243085 0.8376231  1.3723291 2.0884571 2.506128 1.2094517\n[5,] 6.2971803 0.8422164  1.5335222 0.3079718 2.729447 1.7164885\n[6,] 3.8052219 2.1611055  0.3280288 2.7773368 1.726558 1.3193446\n\n\n\nornek veri setinde i. satırda negatif sayı yok ise çıktıda i. satırın ortalaması….dir yazsin.\nEğer veri setinde her hangi bir satırda negatif sayı var ise satır i negatif sayı bulunmaktadır.\nveri setindeki satırlardaki toplam negatif sayı toplamı üçü geçerse çktıda cok sayıda negatif sayı yazsın ve döngü çalışmayı durdursun.\n\n\n\n[1] \"Satir 1 ortalamasi 0.986111423178787\"\n[1] \"Satir 2 ortalamasi 1.66440473890558\"\n[1] \"Satir 3 ortalamasi 1.86445460243509\"\n[1] \"Satir 4 negatif sayi icermektedir.\"\n[1] \"Satir 5 negatif sayi icermektedir.\"\n[1] \"Satir 6 ortalamasi 2.18755744815693\"\n[1] \"Satir 7 ortalamasi 2.42896783600747\"\n[1] \"Satir 8 ortalamasi 1.11152186047931\"\n[1] \"Satir 9 ortalamasi 1.28348082027049\"\n[1] \"Satir 10 ortalamasi 1.49790135754768\"\n[1] \"Satir 11 ortalamasi 1.00823845594998\"\n[1] \"Satir 12 ortalamasi 1.84432161490249\"\n[1] \"Satir 13 ortalamasi 2.30730516248531\"\n[1] \"Satir 14 ortalamasi 1.32997520232501\"\n[1] \"Satir 15 ortalamasi 1.40736423997693\"\n[1] \"Satir 16 ortalamasi 0.930694377568197\"\n[1] \"Satir 17 ortalamasi 1.09683802891735\"\n[1] \"Satir 18 ortalamasi 1.34543057465283\"\n[1] \"Satir 19 ortalamasi 1.91931890408157\"\n[1] \"Satir 20 ortalamasi 1.46149447129439\"\n[1] \"Satir 21 ortalamasi 1.48698773010654\"\n[1] \"Satir 22 ortalamasi 2.50083591324982\"\n[1] \"Satir 23 ortalamasi 2.49403230671112\"\n[1] \"Satir 24 ortalamasi 2.03307899444367\"\n[1] \"Satir 25 ortalamasi 1.47358418101605\"\n[1] \"Satir 26 ortalamasi 1.77152589640626\"\n[1] \"Satir 27 ortalamasi 1.25135003349089\"\n[1] \"Satir 28 ortalamasi 1.33894076274636\"\n[1] \"Satir 29 ortalamasi 1.82874224246664\"\n[1] \"Satir 30 ortalamasi 1.23831471787453\"\n[1] \"Satir 31 ortalamasi 1.82082600141082\"\n[1] \"Satir 32 ortalamasi 1.12466160143214\"\n[1] \"Satir 33 ortalamasi 1.32597664522914\"\n[1] \"Satir 34 negatif sayi icermektedir.\"\n[1] \"Satir 35 ortalamasi 2.32162456679167\"\n[1] \"Satir 36 ortalamasi 2.23274928866424\"\n[1] \"Satir 37 negatif sayi icermektedir.\"\n[1] \"Satir 38 ortalamasi 2.275511227626\"\n[1] \"Satir 39 ortalamasi 1.7921160361432\"\n[1] \"Satir 40 ortalamasi 0.970509167208986\"\n[1] \"Satir 41 ortalamasi 1.24765799189581\"\n[1] \"Satir 42 ortalamasi 2.51234120817512\"\n[1] \"Satir 43 ortalamasi 2.31828043397862\"\n[1] \"Satir 44 negatif sayi icermektedir.\"\n[1] \"Satir 45 ortalamasi 1.95647545685842\"\n[1] \"Satir 46 negatif sayi icermektedir.\"\n[1] \"Satir 47 ortalamasi 2.36551615481398\"\n[1] \"Satir 48 ortalamasi 1.97786024664016\"\n[1] \"Satir 49 ortalamasi 1.6393028512105\"\n[1] \"Satir 50 ortalamasi 3.73629039983628\"\n[1] \"Satir 51 ortalamasi 1.82116726064836\"\n[1] \"Satir 52 ortalamasi 1.87732770333814\"\n[1] \"Satir 53 ortalamasi 2.7020031804201\"\n[1] \"Satir 54 ortalamasi 1.05164097984234\"\n[1] \"Satir 55 ortalamasi 1.88981004324099\"\n[1] \"Satir 56 ortalamasi 1.54248819505925\"\n[1] \"Satir 57 ortalamasi 1.65731581957976\"\n[1] \"Satir 58 ortalamasi 1.36890435340706\"\n[1] \"Satir 59 negatif sayi icermektedir.\"\n[1] \"Satir 60 ortalamasi 2.22046851034413\"\n[1] \"Satir 61 ortalamasi 1.0408644748318\"\n[1] \"Satir 62 ortalamasi 1.72072095294252\"\n[1] \"Satir 63 ortalamasi 1.53167534425738\"\n[1] \"Satir 64 ortalamasi 1.72856879470484\"\n[1] \"Satir 65 ortalamasi 1.37607074870477\"\n[1] \"Satir 66 ortalamasi 1.42295571491744\"\n[1] \"Satir 67 ortalamasi 0.88385039568476\"\n[1] \"Satir 68 ortalamasi 2.35701379888311\"\n[1] \"Satir 69 ortalamasi 1.35179926755423\"\n[1] \"Satir 70 ortalamasi 1.28012686374286\"\n[1] \"Satir 71 negatif sayi icermektedir.\"\n[1] \"Satir 72 ortalamasi 1.67406636870506\"\n[1] \"Satir 73 ortalamasi 1.37691945587952\"\n[1] \"Satir 74 ortalamasi 2.00099153014073\"\n[1] \"Satir 75 negatif sayi icermektedir.\"\n[1] \"Satir 76 ortalamasi 1.60454610453076\"\n[1] \"Satir 77 ortalamasi 2.0804975152321\"\n[1] \"Satir 78 ortalamasi 1.67436426400702\"\n[1] \"Satir 79 ortalamasi 2.04712004349156\"\n[1] \"Satir 80 ortalamasi 1.2963699279751\"\n[1] \"Satir 81 ortalamasi 2.06864424004881\"\n[1] \"Satir 82 ortalamasi 2.18401195176334\"\n[1] \"Satir 83 ortalamasi 2.38233635418165\"\n[1] \"Satir 84 ortalamasi 1.65733160944781\"\n[1] \"Satir 85 ortalamasi 1.53913327407787\"\n[1] \"Satir 86 ortalamasi 1.5977866331596\"\n[1] \"Satir 87 ortalamasi 1.53640423869466\"\n[1] \"Satir 88 ortalamasi 1.4151688443321\"\n[1] \"Satir 89 ortalamasi 1.65657353958559\"\n[1] \"Satir 90 ortalamasi 1.09930366562984\"\n[1] \"Satir 91 ortalamasi 2.04289262764082\"\n[1] \"Satir 92 ortalamasi 1.49359077505866\"\n[1] \"Satir 93 ortalamasi 1.59542242961016\"\n[1] \"Satir 94 negatif sayi icermektedir.\"\n[1] \"Satir 95 ortalamasi 1.63562964801907\"\n[1] \"Satir 96 ortalamasi 1.25826462716513\"\n[1] \"Satir 97 ortalamasi 3.88578289773781\"\n[1] \"Satir 98 ortalamasi 2.05151453891869\"\n[1] \"Satir 99 ortalamasi 1.96874159472044\"\n[1] \"Satir 100 ortalamasi 1.5918224514213\"\n\n\n\n\n\nCode\n# \n# n&lt;-as.numeric(readline(prompt = \"Kare matriste satir/sutun sayisi olarak kullanilmak uzere bir sayi yaziniz: \"))\n# matris&lt;-matrix(0,n,n)\n# for(satir in 1:n){\n#   for(sutun in 1:n){\n#     matris[satir,sutun]&lt;- satir*sutun\n#   }\n# }\n# \n# if(nrow(matris)&lt;=10){\n#   matris\n# }else{\n#   matris[1:10,1:10]\n# }\n\n\ns4 aşağıdaki geometrik şekilleri farklı kodlamalar ile oluşturunuz\n\nİçi dolu kare\n\n\n\n* * * * * \n* * * * * \n* * * * * \n* * * * * \n* * * * * \n\n\n\nİçi boş kare\n\n\n\n* * * * * \n*      *\n*      *\n*      *\n* * * * * \n\n\n\nDolu Üçgen\n\n\n\n* \n* * \n* * * \n* * * * \n* * * * * \n\n\n\nEşkenar üçgen\n\n\n\n    *\n   ***\n  *****\n *******\n*********\n\n\n\nİçi boş eşkenar üçgen\n\n\n\n    *\n   * *\n  *   *\n *     *\n*********\n\n\n\nDik Üçgen\n\n\n\n    *\n   **\n  ***\n ****\n*****\n\n\n\nDiyagonal Çizgi\n\n\n\n*\n *\n  *\n   *\n    *"
  },
  {
    "objectID": "05_Nesneler.html",
    "href": "05_Nesneler.html",
    "title": "Nesne Oluşturma",
    "section": "",
    "text": "Matris oluşturmak için, matrix() fonksiyonu kullanılmaktadır\n\n\nm1 &lt;- matrix(1:12, ncol = 3, nrow = 4); m1\n\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n\n\n\nbyrow argümanı kullanımı\n\n\nmatrix(1:12, ncol = 3, nrow = 4, byrow = TRUE)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n[4,]   10   11   12\n\n\n\nMatrisin transpozunu almak için t()\n\n\nt(m1)\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    2    3    4\n[2,]    5    6    7    8\n[3,]    9   10   11   12\n\n\n\nbir vektör ile matris çarpımı\n\n\n2 * m1\n\n     [,1] [,2] [,3]\n[1,]    2   10   18\n[2,]    4   12   20\n[3,]    6   14   22\n[4,]    8   16   24\n\n\n\nc(1,2,3) * m1\n\n     [,1] [,2] [,3]\n[1,]    1   10   27\n[2,]    4   18   10\n[3,]    9    7   22\n[4,]    4   16   36"
  },
  {
    "objectID": "05_Nesneler.html#hazır-veri-setleri",
    "href": "05_Nesneler.html#hazır-veri-setleri",
    "title": "Nesne Oluşturma",
    "section": "Hazır Veri Setleri",
    "text": "Hazır Veri Setleri\n\nTemel pakette yer alan veri setlerinin bir listesine aşağıdaki komutla ulaşabilirsiniz.\n\n\ndata() # yeni bir pencerede açılır.\n\n\nVeri setlerinin yer aldığı paketlerde bulunmaktadır.\n\n\n# install.packages(\"datasets\")\nlibrary (datasets)\n# install.packages(\"dslabs\")\nlibrary (dslabs)\n\n\nHazır veri setleri çalışma ortamına data() fonksiyonu ile aktarılabilir.\n\n\ndata(WorldPhones) # environmet(calisma alanini) kontrol ediniz. \n\n\nhazır veri setlerini incelememek için aşağıdaki komutlar kullanılabilir.\n\n\ndata(cars) # enviromente ekler\niris      # enviromente eklemez!"
  },
  {
    "objectID": "05_Nesneler.html#inceleme",
    "href": "05_Nesneler.html#inceleme",
    "title": "Nesne Oluşturma",
    "section": "İnceleme",
    "text": "İnceleme\n\nBoyut sorgulamamak için farklı fonksiyonlar kullanılabilir.\n\n\ndim(cars) # satir Sutun\n\n[1] 50  2\n\n\n\nnrow(cars)\n\n[1] 50\n\n\n\nncol(cars)\n\n[1] 2\n\n\n\nVeri setlerin ilk satırları head(), son satırları ise tail() fonksiyonu ile incelenebilir. head() fonksiyonu olağan olarak ilk 6 satırı yazdırır.\n\n\nhead(WorldPhones)\n\n     N.Amer Europe Asia S.Amer Oceania Africa Mid.Amer\n1951  45939  21574 2876   1815    1646     89      555\n1956  60423  29990 4708   2568    2366   1411      733\n1957  64721  32510 5230   2695    2526   1546      773\n1958  68484  35218 6662   2845    2691   1663      836\n1959  71799  37598 6856   3000    2868   1769      911\n1960  76036  40341 8220   3145    3054   1905     1008\n\n\n\nYazdırılacak satır sayısı n argümanı ile ayarlanır.\n\n\nhead(WorldPhones,n=2)\n\n     N.Amer Europe Asia S.Amer Oceania Africa Mid.Amer\n1951  45939  21574 2876   1815    1646     89      555\n1956  60423  29990 4708   2568    2366   1411      733\n\n\n\nWorldPhones veri setinin son 8 satırını yazdıracak kodu yazınız.\n\n\n\nBuraya bakmadan önce kendin denemelisin!\ntail(WorldPhones,n=8)\n\n\n     N.Amer Europe Asia S.Amer Oceania Africa Mid.Amer\n1951  45939  21574 2876   1815    1646     89      555\n1956  60423  29990 4708   2568    2366   1411      733\n1957  64721  32510 5230   2695    2526   1546      773\n1958  68484  35218 6662   2845    2691   1663      836\n1959  71799  37598 6856   3000    2868   1769      911\n1960  76036  40341 8220   3145    3054   1905     1008\n1961  79831  43173 9053   3338    3224   2005     1076\n\n\n\ndatasets paketinde yer alan veri setlerinde examples() bölümünde çeşitli örneklere yer verilmiştir. Örneğin example(WorldPhones)\n\n\nmatplot(rownames(WorldPhones), WorldPhones, type = \"b\", log = \"y\",\n        xlab = \"Year\", ylab = \"Number of telephones (1000's)\")\nlegend(\"bottomright\", colnames(WorldPhones), col = 1:6, lty = 1:5,\n       pch = rep(21, 7))\ntitle(main = \"World phones data: log scale for response\")\n\n\n\n\n\n\n\n\n\nTemel paket hariç diğer paketlerdeki veri setlerine data(veriseti, package=\"packagename\") şeklinde ulaşılabilir.\n\n\ndata(CTTdata, package=\"CTT\") \nhead(CTTdata)\n\n\n🔗sık kullanılan veri setleri ile ilgili bir yazı:\n🔗tüm veri setlerine ulaşabilmek için ise:\nKullanışlı olmasa da excel, spps gibi veri girişi sağlayan bir arayüz bulunmaktadır. Ancak kullanmanızı tavisye etmediğim için burada da vermedim.\nView() fonkisyonu ile veri seti incelenebilir."
  },
  {
    "objectID": "05_Nesneler.html#eleman-seçme",
    "href": "05_Nesneler.html#eleman-seçme",
    "title": "Nesne Oluşturma",
    "section": "Eleman Seçme",
    "text": "Eleman Seçme\nVeri setlerinde eleman seçme matrislerdeki gibidir.\ndf[satirindeks, sutunindeks]\n\ndf’nin birinci satir elemanlarının seçilmesi\n\n\n\nBuraya bakmadan önce kendin denemelisin!\ndf[1,]\n\n\n   ad boy kilo beden\n1 Ali 160   55     S\n\n\n\ndf’nin birinci sütun elemanlarının seçilmesi\n\n\n\nBuraya bakmadan önce kendin denemelisin!\ndf[,1]\n\n\n [1] \"Ali\"   \"Elif\"  \"Su\"    \"Deniz\" \"Aras\"  \"Berk\"  \"Can\"   \"Ece\"   \"Efe\"  \n[10] \"Arda\" \n\n\n\ndf’nin ikinci satır elemanlarının seçilmesi\n\n\n\nBuraya bakmadan önce kendin denemelisin!\ndf[2,]\n\n\n    ad boy kilo beden\n2 Elif 165   55     M\n\n\n\ndf’nin ikinci sütun elemanlarının seçilmesi\n\n\n\n [1] 160 165 170 155 167 162 169 158 160 164\n\n\n\ndf’nin birinci satır üçüncü sütun elemanlarının seçilmesi\n\n\n\n[1] 55\n\n\n\nVeri setlerinde satır elemanları yazdırıldığında veri seti (data.frame), sütun elemanları yazdırıldığında ise vektör (vector) oluşmaktadır.\n\n\n# satir secimi\nis.data.frame(df[1,])\n\n[1] TRUE\n\n\n\n# sutun secimi\nis.data.frame(df[,1])\n\n[1] FALSE\n\n\n\nSütun seçimi veri seti (data.frame) olarak yapılmak istenirse, drop argümanı FALSE değeri ile kullanılır.\n\n\ndf[,1,drop=FALSE]\n\n      ad\n1    Ali\n2   Elif\n3     Su\n4  Deniz\n5   Aras\n6   Berk\n7    Can\n8    Ece\n9    Efe\n10  Arda\n\n\n\nVeri seçim işlemi için subset() fonksiyonu kullanılabilir.\n?subset bir fonksiyonu ilk daha kullanıyorsanız, mutlaka yardım sayfasını inceleyin.\n\nsubset(veriseti, kosul/Kosullar)\n\nBoyu 165cm’den uzun öğrencilerin bilgilerinin seçilmesi\n\n\nsubset(df, boy &gt;165)\n\n    ad boy kilo beden\n3   Su 170   57     S\n5 Aras 167   48     S\n7  Can 169   58     M\n\n\n\nsubset() fonksiyonun yardım sayfasındaki örnekleri inceleyebilirsiniz.\n\n\nsubset(airquality, Temp &gt; 90,select = c(Ozone, Temp))\n\n    Ozone Temp\n42     NA   93\n43     NA   92\n69     97   92\n70     97   92\n75     NA   91\n102    NA   92\n120    76   97\n121   118   94\n122    84   96\n123    85   94\n124    96   91\n125    78   92\n126    73   93\n127    91   93\n\n\n\nsubset(airquality, Day == 1, select = -Temp)\n\n    Ozone Solar.R Wind Month Day\n1      41     190  7.4     5   1\n32     NA     286  8.6     6   1\n62    135     269  4.1     7   1\n93     39      83  6.9     8   1\n124    96     167  6.9     9   1\n\n\n\ndf verisinde beden değişkeni “S” olan satırların seçimi\n\n\n\n\nBuraya bakmadan önce kendin denemelisin!\nsubset(df,beden ==\"S\")\n\n\n     ad boy kilo beden\n1   Ali 160   55     S\n3    Su 170   57     S\n5  Aras 167   48     S\n9   Efe 160   45     S\n10 Arda 164   47     S\n\n\n\ndf verisinde kilosu 50’in altında olan kişilerden oluşan veri seti oluşturma kodunu oluşturunuz.\n\n\n\nBuraya bakmadan önce kendin denemelisin!\nsubset(df, kilo&lt;50)\n\n\n     ad boy kilo beden\n5  Aras 167   48     S\n9   Efe 160   45     S\n10 Arda 164   47     S"
  },
  {
    "objectID": "05_Nesneler.html#eleman-ekleme",
    "href": "05_Nesneler.html#eleman-ekleme",
    "title": "Nesne Oluşturma",
    "section": "Eleman ekleme",
    "text": "Eleman ekleme\n\nVeri setine yeni sütun ekleme isleme $ operatörü ile [[]] operatörü ile cbind() fonksiyonları ile yapılabilmektedir.\n\n\ndf2 &lt;- data.frame(\n      S1 = sample(0:100,20),\n      S2 = runif(n=20 ,min= 50 , max=70)\n)\nhead(df2)\n\n  S1       S2\n1 54 63.25208\n2 37 53.37898\n3 68 64.21049\n4 30 66.41772\n5 74 67.35835\n6 23 52.88177\n\n\n\n$ operatörü ile sütun ekleme\n\n\ndf2$S3 &lt;- sample(60:80,20,replace = TRUE)\nhead(df2)\n\n  S1       S2 S3\n1 54 63.25208 73\n2 37 53.37898 76\n3 68 64.21049 77\n4 30 66.41772 61\n5 74 67.35835 64\n6 23 52.88177 61\n\n\n\n[[]] operatörü ile sütun ekleme\ndf2 veri setinin ilk üç sütunun rowMeans() fonksiyonu ile ortalamasının alınarak ort isimi ile veri setine eklenmesi\n\n\ndf2[[\"ort\"]] &lt;- round(rowMeans(df2),2)\nhead(df2)\n\n  S1       S2 S3   ort\n1 54 63.25208 73 63.42\n2 37 53.37898 76 55.46\n3 68 64.21049 77 69.74\n4 30 66.41772 61 52.47\n5 74 67.35835 64 68.45\n6 23 52.88177 61 45.63\n\n\n\ncbind() fonksiyonu ile sütun ekleme\n\n\ncbind( df2, S4 = 10)\n\n   S1       S2 S3   ort S4\n1  54 63.25208 73 63.42 10\n2  37 53.37898 76 55.46 10\n3  68 64.21049 77 69.74 10\n4  30 66.41772 61 52.47 10\n5  74 67.35835 64 68.45 10\n6  23 52.88177 61 45.63 10\n7  21 68.64000 60 49.88 10\n8  29 61.00421 60 50.00 10\n9   1 68.77944 60 43.26 10\n10 24 56.25531 73 51.09 10\n11 52 53.49163 67 57.50 10\n12 73 50.36331 61 61.45 10\n13 40 68.61696 66 58.21 10\n14 50 66.23220 77 64.41 10\n15  0 58.32839 60 39.44 10\n16 26 67.12803 68 53.71 10\n17 28 56.59417 61 48.53 10\n18 88 54.49986 63 68.50 10\n19 71 64.22146 62 65.74 10\n20 33 65.90877 72 56.97 10"
  },
  {
    "objectID": "05_Nesneler.html#eleman-çıkarma",
    "href": "05_Nesneler.html#eleman-çıkarma",
    "title": "Nesne Oluşturma",
    "section": "Eleman çıkarma",
    "text": "Eleman çıkarma\n\nVeri setinden istenilen sütunun çıkarılabilir. Bu işlemi yapmak için iki farklı yol kullanılabilir.\n- operatörü\n\n\nhead(df2,3)\n\n  S1       S2 S3   ort\n1 54 63.25208 73 63.42\n2 37 53.37898 76 55.46\n3 68 64.21049 77 69.74\n\n\n\ndf2 &lt;- df2[,-4] \nhead(df2,3)\n\n  S1       S2 S3\n1 54 63.25208 73\n2 37 53.37898 76\n3 68 64.21049 77\n\n\n\nNULL operatörü\n\n\ndf2$S3 &lt;- NULL\nhead(df2,3)\n\n  S1       S2\n1 54 63.25208\n2 37 53.37898\n3 68 64.21049"
  },
  {
    "objectID": "05_Nesneler.html#satır-ekleme",
    "href": "05_Nesneler.html#satır-ekleme",
    "title": "Nesne Oluşturma",
    "section": "Satır ekleme",
    "text": "Satır ekleme\n\nVeri setlerine değişken ekleyip, çıkarabileceğiniz gibi gözlem de ekleyip, çıkarabilirsiniz. Veri setine iki satır ekleme\n\n\ndim(df2)\n\n[1] 20  2\n\n\n\n# eklenecek iki satırlık veri seti oluşturma\ndf3 &lt;- data.frame(S1=c(50,60),S2=c(55.3,65.5))\n# yeni veri seti\ndf4 &lt;- rbind (df2,df3)\ndim(df4)\n\n[1] 22  2"
  },
  {
    "objectID": "05_Nesneler.html#veri-yapısı-inceleme",
    "href": "05_Nesneler.html#veri-yapısı-inceleme",
    "title": "Nesne Oluşturma",
    "section": "Veri yapısı inceleme",
    "text": "Veri yapısı inceleme\n\nVeri setlerinin yapısını incelemek icin str() fonksiyonundan yararlanılmaktadır.\n\n\nstr(df)\n\n'data.frame':   10 obs. of  4 variables:\n $ ad   : chr  \"Ali\" \"Elif\" \"Su\" \"Deniz\" ...\n $ boy  : num  160 165 170 155 167 162 169 158 160 164\n $ kilo : num  55 55 57 50 48 65 58 62 45 47\n $ beden: Factor w/ 3 levels \"L\",\"M\",\"S\": 3 2 3 2 3 1 2 1 3 3\n\n\n\n“df” veri seti 10 gözlemden, 4 değişken. Her bir değişkenin önünde $ operatörü olduğuna dikkat ediniz.\nveri setinin incelenmek için kullanılabilecek diğer fonksiyon ise attributes()\n\n\nattributes(df)\n\n$names\n[1] \"ad\"    \"boy\"   \"kilo\"  \"beden\"\n\n$class\n[1] \"data.frame\"\n\n$row.names\n [1]  1  2  3  4  5  6  7  8  9 10"
  },
  {
    "objectID": "05_Nesneler.html#isimlendirme",
    "href": "05_Nesneler.html#isimlendirme",
    "title": "Nesne Oluşturma",
    "section": "Isimlendirme",
    "text": "Isimlendirme\n\nVeri setleri vektör birleştirme üzerinden yapılırsa, vektör adları sütun ismi olarak kullanılır. Ancak bu isimler değiştirilebilir. Bu işlem data.frame() fonksiyonu içinde yapılabilir.\n\n\ndf &lt;- data.frame(isim = ad,\n                 boyolcum = boy,\n                 kiloolcum= kilo, \n                 bedenolcum=beden)\ndf\n\n    isim boyolcum kiloolcum bedenolcum\n1    Ali      160        55          S\n2   Elif      165        55          M\n3     Su      170        57          S\n4  Deniz      155        50          M\n5   Aras      167        48          S\n6   Berk      162        65          L\n7    Can      169        58          M\n8    Ece      158        62          L\n9    Efe      160        45          S\n10  Arda      164        47          S\n\n\n\nVeri seti isimlendirme de diğer bir yol ise names() ya da colnames() fonksiyonlarıdır.\n\n\ndf &lt;- data.frame(ad,boy,kilo,beden)\nnames(df) &lt;- c(\"isim\",\"boyolcum \",\"kiloolcum\",\"bedenolcum\")\ndf\n\n    isim boyolcum  kiloolcum bedenolcum\n1    Ali       160        55          S\n2   Elif       165        55          M\n3     Su       170        57          S\n4  Deniz       155        50          M\n5   Aras       167        48          S\n6   Berk       162        65          L\n7    Can       169        58          M\n8    Ece       158        62          L\n9    Efe       160        45          S\n10  Arda       164        47          S"
  },
  {
    "objectID": "05_Nesneler.html#betimsel-istatistikler",
    "href": "05_Nesneler.html#betimsel-istatistikler",
    "title": "Nesne Oluşturma",
    "section": "Betimsel istatistikler",
    "text": "Betimsel istatistikler\n\nVeri setinin tümüne ilişkin betimsel istatistikler\n\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\n\nVeri setinin tek değişkenine ilişkin betimsel istatistikler\n\n\nsummary(cars$speed)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    4.0    12.0    15.0    15.4    19.0    25.0"
  },
  {
    "objectID": "05_Nesneler.html#listeler",
    "href": "05_Nesneler.html#listeler",
    "title": "Nesne Oluşturma",
    "section": "Listeler",
    "text": "Listeler\nListe cok esnek ve karmasik bir veri yapisidir. list() fonksiyonu ile olusturulur. Listelerde farkli turden yeri yapilari, farkli uzunlukta yer alabilir.\n\nad  &lt;-  c(\"Ali\",\"Elif\",\"Su\",\"Deniz\",\"Aras\",\"Berk\",\"Can\",\"Ece\",\"Efe\",\"Arda\")\nboy &lt;- c(160,165,170,155,167,162,169,158,160,164)\nkilo &lt;- c(55,55,57,50,48,65,58,62,45,47)\n# ad, boy ve kilo vektorleri ile liste olusturulmasi\nliste &lt;- list(ad,boy,kilo)\nliste\n\n[[1]]\n [1] \"Ali\"   \"Elif\"  \"Su\"    \"Deniz\" \"Aras\"  \"Berk\"  \"Can\"   \"Ece\"   \"Efe\"  \n[10] \"Arda\" \n\n[[2]]\n [1] 160 165 170 155 167 162 169 158 160 164\n\n[[3]]\n [1] 55 55 57 50 48 65 58 62 45 47\n\n\nBir listedeki tum bilesenleri ve turleri gormek icin str() fonksiyonu kullanilabilir.\n\nstr(liste) #uc bilesen  ve iki farkli nesne turu\n\nList of 3\n $ : chr [1:10] \"Ali\" \"Elif\" \"Su\" \"Deniz\" ...\n $ : num [1:10] 160 165 170 155 167 162 169 158 160 164\n $ : num [1:10] 55 55 57 50 48 65 58 62 45 47\n\n\nListeler kendi icinde de farklı listeler barindirabilir. 2 bilesenli liste\n\nliste2 &lt;- list(liste,c(1,2,3)) # liste ici liste\nstr(liste2)\n\nList of 2\n $ :List of 3\n  ..$ : chr [1:10] \"Ali\" \"Elif\" \"Su\" \"Deniz\" ...\n  ..$ : num [1:10] 160 165 170 155 167 162 169 158 160 164\n  ..$ : num [1:10] 55 55 57 50 48 65 58 62 45 47\n $ : num [1:3] 1 2 3\n\n\nListe bilesenleri isimlendirilebilir. Listelerde bilesenler numara [[1]] ya da $ ile eleman secilir.\n\nliste # isimsiz liste, isim degil numara [[1]]\n\n[[1]]\n [1] \"Ali\"   \"Elif\"  \"Su\"    \"Deniz\" \"Aras\"  \"Berk\"  \"Can\"   \"Ece\"   \"Efe\"  \n[10] \"Arda\" \n\n[[2]]\n [1] 160 165 170 155 167 162 169 158 160 164\n\n[[3]]\n [1] 55 55 57 50 48 65 58 62 45 47\n\nliste[[3]]\n\n [1] 55 55 57 50 48 65 58 62 45 47\n\n\nIsımlendirilmis listelerde ise bu islem $ operatoru ile yapilabilir.\n\nliste_isim &lt;- list(isim = ad,boyolcum = boy,kiloolcum =kilo)\nliste_isim # isimli liste $\n\n$isim\n [1] \"Ali\"   \"Elif\"  \"Su\"    \"Deniz\" \"Aras\"  \"Berk\"  \"Can\"   \"Ece\"   \"Efe\"  \n[10] \"Arda\" \n\n$boyolcum\n [1] 160 165 170 155 167 162 169 158 160 164\n\n$kiloolcum\n [1] 55 55 57 50 48 65 58 62 45 47\n\nliste_isim$kiloolcum\n\n [1] 55 55 57 50 48 65 58 62 45 47\n\n\n\n# liste nesnesinin ilk bileseninin secilmesi\nliste[[1]]\n\n [1] \"Ali\"   \"Elif\"  \"Su\"    \"Deniz\" \"Aras\"  \"Berk\"  \"Can\"   \"Ece\"   \"Efe\"  \n[10] \"Arda\" \n\nliste_isim[[1]]\n\n [1] \"Ali\"   \"Elif\"  \"Su\"    \"Deniz\" \"Aras\"  \"Berk\"  \"Can\"   \"Ece\"   \"Efe\"  \n[10] \"Arda\" \n\n\nListeler, verileri organize etmenin ve mumkun oldugunca az sayida degisken adina sahip olmanin kullanisli bir yoludur. Listeler genellikle R’da istatistiksel analizlerin ciktisinda kullanilmaktadir. Ornegin regresyon analizinin ciktisinda yer alan nesne parametre kestirimlerini, artiklari, yordanan degerleri liste seklinde tutmaktadir. lm() fonksiyonlari regresyon icin kullanilir, fonksiyon içindeki ~ isareti oncesine bagimli degiskenler, sonrasina ise bagimsiz degiskenler eklenerek model kurulur.\n\nrequire(stats); require(graphics)\nfm1 &lt;- lm(sr ~ pop15 + pop75 + dpi + ddpi, data = LifeCycleSavings)\nsummary(fm1)\n\n\nCall:\nlm(formula = sr ~ pop15 + pop75 + dpi + ddpi, data = LifeCycleSavings)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-8.2422 -2.6857 -0.2488  2.4280  9.7509 \n\nCoefficients:\n              Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 28.5660865  7.3545161   3.884 0.000334 ***\npop15       -0.4611931  0.1446422  -3.189 0.002603 ** \npop75       -1.6914977  1.0835989  -1.561 0.125530    \ndpi         -0.0003369  0.0009311  -0.362 0.719173    \nddpi         0.4096949  0.1961971   2.088 0.042471 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.803 on 45 degrees of freedom\nMultiple R-squared:  0.3385,    Adjusted R-squared:  0.2797 \nF-statistic: 5.756 on 4 and 45 DF,  p-value: 0.0007904\n\n\nRegresyon sonuclarinin yer aldigi fm nesnesi bilesenleri\n\nstr(fm1)\n\nList of 12\n $ coefficients : Named num [1:5] 28.566087 -0.461193 -1.691498 -0.000337 0.409695\n  ..- attr(*, \"names\")= chr [1:5] \"(Intercept)\" \"pop15\" \"pop75\" \"dpi\" ...\n $ residuals    : Named num [1:50] 0.864 0.616 2.219 -0.698 3.553 ...\n  ..- attr(*, \"names\")= chr [1:50] \"Australia\" \"Austria\" \"Belgium\" \"Bolivia\" ...\n $ effects      : Named num [1:50] -68.38 -14.29 7.3 -3.52 -7.94 ...\n  ..- attr(*, \"names\")= chr [1:50] \"(Intercept)\" \"pop15\" \"pop75\" \"dpi\" ...\n $ rank         : int 5\n $ fitted.values: Named num [1:50] 10.57 11.45 10.95 6.45 9.33 ...\n  ..- attr(*, \"names\")= chr [1:50] \"Australia\" \"Austria\" \"Belgium\" \"Bolivia\" ...\n $ assign       : int [1:5] 0 1 2 3 4\n $ qr           :List of 5\n  ..$ qr   : num [1:50, 1:5] -7.071 0.141 0.141 0.141 0.141 ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  .. .. ..$ : chr [1:50] \"Australia\" \"Austria\" \"Belgium\" \"Bolivia\" ...\n  .. .. ..$ : chr [1:5] \"(Intercept)\" \"pop15\" \"pop75\" \"dpi\" ...\n  .. ..- attr(*, \"assign\")= int [1:5] 0 1 2 3 4\n  ..$ qraux: num [1:5] 1.14 1.17 1.16 1.15 1.05\n  ..$ pivot: int [1:5] 1 2 3 4 5\n  ..$ tol  : num 1e-07\n  ..$ rank : int 5\n  ..- attr(*, \"class\")= chr \"qr\"\n $ df.residual  : int 45\n $ xlevels      : Named list()\n $ call         : language lm(formula = sr ~ pop15 + pop75 + dpi + ddpi, data = LifeCycleSavings)\n $ terms        :Classes 'terms', 'formula'  language sr ~ pop15 + pop75 + dpi + ddpi\n  .. ..- attr(*, \"variables\")= language list(sr, pop15, pop75, dpi, ddpi)\n  .. ..- attr(*, \"factors\")= int [1:5, 1:4] 0 1 0 0 0 0 0 1 0 0 ...\n  .. .. ..- attr(*, \"dimnames\")=List of 2\n  .. .. .. ..$ : chr [1:5] \"sr\" \"pop15\" \"pop75\" \"dpi\" ...\n  .. .. .. ..$ : chr [1:4] \"pop15\" \"pop75\" \"dpi\" \"ddpi\"\n  .. ..- attr(*, \"term.labels\")= chr [1:4] \"pop15\" \"pop75\" \"dpi\" \"ddpi\"\n  .. ..- attr(*, \"order\")= int [1:4] 1 1 1 1\n  .. ..- attr(*, \"intercept\")= int 1\n  .. ..- attr(*, \"response\")= int 1\n  .. ..- attr(*, \".Environment\")=&lt;environment: R_GlobalEnv&gt; \n  .. ..- attr(*, \"predvars\")= language list(sr, pop15, pop75, dpi, ddpi)\n  .. ..- attr(*, \"dataClasses\")= Named chr [1:5] \"numeric\" \"numeric\" \"numeric\" \"numeric\" ...\n  .. .. ..- attr(*, \"names\")= chr [1:5] \"sr\" \"pop15\" \"pop75\" \"dpi\" ...\n $ model        :'data.frame':  50 obs. of  5 variables:\n  ..$ sr   : num [1:50] 11.43 12.07 13.17 5.75 12.88 ...\n  ..$ pop15: num [1:50] 29.4 23.3 23.8 41.9 42.2 ...\n  ..$ pop75: num [1:50] 2.87 4.41 4.43 1.67 0.83 2.85 1.34 0.67 1.06 1.14 ...\n  ..$ dpi  : num [1:50] 2330 1508 2108 189 728 ...\n  ..$ ddpi : num [1:50] 2.87 3.93 3.82 0.22 4.56 2.43 2.67 6.51 3.08 2.8 ...\n  ..- attr(*, \"terms\")=Classes 'terms', 'formula'  language sr ~ pop15 + pop75 + dpi + ddpi\n  .. .. ..- attr(*, \"variables\")= language list(sr, pop15, pop75, dpi, ddpi)\n  .. .. ..- attr(*, \"factors\")= int [1:5, 1:4] 0 1 0 0 0 0 0 1 0 0 ...\n  .. .. .. ..- attr(*, \"dimnames\")=List of 2\n  .. .. .. .. ..$ : chr [1:5] \"sr\" \"pop15\" \"pop75\" \"dpi\" ...\n  .. .. .. .. ..$ : chr [1:4] \"pop15\" \"pop75\" \"dpi\" \"ddpi\"\n  .. .. ..- attr(*, \"term.labels\")= chr [1:4] \"pop15\" \"pop75\" \"dpi\" \"ddpi\"\n  .. .. ..- attr(*, \"order\")= int [1:4] 1 1 1 1\n  .. .. ..- attr(*, \"intercept\")= int 1\n  .. .. ..- attr(*, \"response\")= int 1\n  .. .. ..- attr(*, \".Environment\")=&lt;environment: R_GlobalEnv&gt; \n  .. .. ..- attr(*, \"predvars\")= language list(sr, pop15, pop75, dpi, ddpi)\n  .. .. ..- attr(*, \"dataClasses\")= Named chr [1:5] \"numeric\" \"numeric\" \"numeric\" \"numeric\" ...\n  .. .. .. ..- attr(*, \"names\")= chr [1:5] \"sr\" \"pop15\" \"pop75\" \"dpi\" ...\n - attr(*, \"class\")= chr \"lm\"\n\n\npsych paketinde fa() fonksiyonu ile gerceklestirilen analiz sonuclari\n\nlibrary(psych)\nwls &lt;- fa(Harman74.cor$cov,4,fm=\"wls\") \nstr(wls)\n\nList of 46\n $ residual     : num [1:24, 1:24] 0.4452 -0.0348 -0.0152 0.0401 0.0145 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:24] \"VisualPerception\" \"Cubes\" \"PaperFormBoard\" \"Flags\" ...\n  .. ..$ : chr [1:24] \"VisualPerception\" \"Cubes\" \"PaperFormBoard\" \"Flags\" ...\n $ dof          : num 186\n $ ENull        : num NA\n $ chi          : num NA\n $ rms          : num 0.0408\n $ nh           : logi NA\n $ EPVAL        : num NA\n $ crms         : num 0.0497\n $ EBIC         : num NA\n $ ESABIC       : num NA\n $ fit          : num 0.903\n $ fit.off      : num 0.984\n $ sd           : num 0.04\n $ factors      : num 4\n $ complexity   : Named num [1:24] 1.03 1.04 1.23 1.25 1.05 ...\n  ..- attr(*, \"names\")= chr [1:24] \"VisualPerception\" \"Cubes\" \"PaperFormBoard\" \"Flags\" ...\n $ n.obs        : logi NA\n $ PVAL         : logi NA\n $ objective    : num 1.72\n $ criteria     : Named num [1:3] 1.72 NA NA\n  ..- attr(*, \"names\")= chr [1:3] \"objective\" \"\" \"\"\n $ Call         : language fa(r = Harman74.cor$cov, nfactors = 4, fm = \"wls\")\n $ null.model   : num 11.4\n $ null.dof     : num 276\n $ r.scores     : num [1:4, 1:4] 1 0.484 0.339 0.491 0.484 ...\n $ R2           : num [1:4] 0.918 0.815 0.859 0.766\n $ valid        : num [1:4] 0.933 0.862 0.879 0.851\n $ score.cor    : num [1:4, 1:4] 1 0.627 0.485 0.493 0.627 ...\n $ weights      : num [1:24, 1:4] -0.02148 -0.00436 0.02699 0.00951 0.16055 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:24] \"VisualPerception\" \"Cubes\" \"PaperFormBoard\" \"Flags\" ...\n  .. ..$ : chr [1:4] \"WLS1\" \"WLS3\" \"WLS2\" \"WLS4\"\n $ rotation     : chr \"oblimin\"\n $ hyperplane   : Named num [1:4] 14 9 16 14\n  ..- attr(*, \"names\")= chr [1:4] \"WLS1\" \"WLS3\" \"WLS2\" \"WLS4\"\n $ communality  : Named num [1:24] 0.555 0.227 0.344 0.349 0.642 ...\n  ..- attr(*, \"names\")= chr [1:24] \"VisualPerception\" \"Cubes\" \"PaperFormBoard\" \"Flags\" ...\n $ communalities: Named num [1:24] 0.561 0.22 0.356 0.349 0.648 ...\n  ..- attr(*, \"names\")= chr [1:24] \"VisualPerception\" \"Cubes\" \"PaperFormBoard\" \"Flags\" ...\n $ uniquenesses : Named num [1:24] 0.445 0.773 0.656 0.651 0.358 ...\n  ..- attr(*, \"names\")= chr [1:24] \"VisualPerception\" \"Cubes\" \"PaperFormBoard\" \"Flags\" ...\n $ values       : num [1:24] 7.646 1.692 1.221 0.915 0.403 ...\n $ e.values     : num [1:24] 8.14 2.1 1.69 1.5 1.03 ...\n $ loadings     : 'loadings' num [1:24, 1:4] 0.0427 0.056 0.0874 0.1782 0.7639 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:24] \"VisualPerception\" \"Cubes\" \"PaperFormBoard\" \"Flags\" ...\n  .. ..$ : chr [1:4] \"WLS1\" \"WLS3\" \"WLS2\" \"WLS4\"\n $ model        : num [1:24, 1:24] 0.555 0.353 0.418 0.428 0.306 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:24] \"VisualPerception\" \"Cubes\" \"PaperFormBoard\" \"Flags\" ...\n  .. ..$ : chr [1:24] \"VisualPerception\" \"Cubes\" \"PaperFormBoard\" \"Flags\" ...\n $ fm           : chr \"wls\"\n $ rot.mat      : num [1:4, 1:4] 0.4887 -0.8531 -0.6178 -0.0472 0.2601 ...\n $ Phi          : num [1:4, 1:4] 1 0.41 0.295 0.408 0.41 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:4] \"WLS1\" \"WLS3\" \"WLS2\" \"WLS4\"\n  .. ..$ : chr [1:4] \"WLS1\" \"WLS3\" \"WLS2\" \"WLS4\"\n $ Structure    : 'loadings' num [1:24, 1:4] 0.361 0.241 0.29 0.369 0.794 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:24] \"VisualPerception\" \"Cubes\" \"PaperFormBoard\" \"Flags\" ...\n  .. ..$ : chr [1:4] \"WLS1\" \"WLS3\" \"WLS2\" \"WLS4\"\n $ method       : chr \"regression\"\n $ R2.scores    : Named num [1:4] 0.918 0.815 0.859 0.766\n  ..- attr(*, \"names\")= chr [1:4] \"WLS1\" \"WLS3\" \"WLS2\" \"WLS4\"\n $ r            : num [1:24, 1:24] 1 0.318 0.403 0.468 0.321 0.335 0.304 0.332 0.326 0.116 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:24] \"VisualPerception\" \"Cubes\" \"PaperFormBoard\" \"Flags\" ...\n  .. ..$ : chr [1:24] \"VisualPerception\" \"Cubes\" \"PaperFormBoard\" \"Flags\" ...\n $ fn           : chr \"fa\"\n $ Vaccounted   : num [1:5, 1:4] 3.996 0.166 0.166 0.348 0.348 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : chr [1:5] \"SS loadings\" \"Proportion Var\" \"Cumulative Var\" \"Proportion Explained\" ...\n  .. ..$ : chr [1:4] \"WLS1\" \"WLS3\" \"WLS2\" \"WLS4\"\n $ ECV          : Named num [1:4] 0.348 0.592 0.804 1\n  ..- attr(*, \"names\")= chr [1:4] \"WLS1\" \"WLS3\" \"WLS2\" \"WLS4\"\n - attr(*, \"class\")= chr [1:2] \"psych\" \"fa\""
  },
  {
    "objectID": "05_Nesneler.html#faktörler",
    "href": "05_Nesneler.html#faktörler",
    "title": "Nesne Oluşturma",
    "section": "Faktörler",
    "text": "Faktörler\nhttps://www.gormanalysis.com/blog/r-introduction-to-factors-tutorial/"
  },
  {
    "objectID": "03_Fonksiyonlar.html",
    "href": "03_Fonksiyonlar.html",
    "title": "Fonksiyonlar",
    "section": "",
    "text": "Fonksiyon belli bir görevi yerine getirmek için yazılan bir grup komuttur.\nFonksiyonların çalışması için girdilerinin olması gerekmektedir. Fonksiyonlar girdileri ile yaptıkları işlem sonucunda bir çıktı oluştururlar.\nFonksiyonlar girdileri o fonksiyonun çalışması için önceden belirlenen argümanlar ve o argümanların değerlerinden oluşur. (dilbilimle ilgileniyorsanız, bunları bir özne ve nesne gerektiren fiiller olarak düşünmek isteyebilirsiniz)\nFonksiyonların kullanımında üç noktaya dikkat edilmelidir.\n\nargümanların sırası\nargümanların olağan (default) değerleri\nbazı argümanların zorunlu, bazı argümanların opsiyonel olmasıdır\n\nBir fonksiyonun aldığı tüm argümanlara yardım dokümantasyonunu kullanarak ?function formatını kullanarak bakabilirsiniz. Bazı argümanlar zorunlu, bazıları ise isteğe bağlıdır. İsteğe bağlı bağımsız değişkenler, herhangi bir değer girmezseniz genellikle varsayılan/olağan (normalde yardım belgelerinde belirtilen) bir değer kullanır.\nÖrnek olarak, normal dağılıma sahip bir sayı kümesini rastgele üreten rnorm() fonksiyonunun yardım belgelerine bakalım.\nBir fonksiyonun aldığı tüm argümanlara yardım dokümantasyonunu kullanarak ?function formatını kullanarak bakabilirsiniz. Bazı argümanlar zorunlu, bazıları ise isteğe bağlıdır. İsteğe bağlı bağımsız değişkenler, herhangi bir değer girmezseniz genellikle varsayılan/olağan (normalde yardım belgelerinde belirtilen) bir değer kullanır.\nAlıştırma\n?rnorm\nrnorm(n, mean = 0, sd = 1)\nAlıştırma II\nset.seed(12042016)\nrnorm(n = 5)\n\n[1] -0.2896163 -0.6428964  0.5829221 -0.3286728 -0.5110101\nrnorm(n = 5, mean = 10, sd = 2)\n\n[1] 13.320853  9.377956 10.235461  9.811793 13.019102\nEğer internette kod örneklerine bakıyorsanız, sık sık set.seed() fonksiyonu ile başlayan kodlar görebilirsiniz. Bu fonksiyon rastgele sayı üretecini kontrol eder - rastgele sayı üreten herhangi bir fonksiyon kullanıyorsanız (rnorm() gibi), set.seed() fonksiyonunu çalıştırmak aynı sonucu almanızı sağlayacaktır (bazı durumlarda yapmak istediğiniz şey bu olmayabilir). Bu örnekte set.seed() diyoruz, bu aynı rastgele sayıları alacağınız anlamına geliyor."
  },
  {
    "objectID": "03_Fonksiyonlar.html#argüman-isimleri",
    "href": "03_Fonksiyonlar.html#argüman-isimleri",
    "title": "Fonksiyonlar",
    "section": "Argüman isimleri",
    "text": "Argüman isimleri\n\nYukarıdaki örneklerde, kodumuzdaki bağımsız değişken adlarını yazdık (örneğin, n, mean, sd), ancak bu kesinlikle gerekli değildir. Aşağıdaki iki kod satırının her ikisi de aynı sonucu üretecektir (rnorm() fonksiyonunu her çalıştırdığınızda rastgele olduğu için biraz farklı bir sayı kümesi üretecektir, ancak yine de aynı ortalama ve SD’ye sahip olacaklardır):\n\n\nrnorm(n = 6, mean = 3, sd = 1)\nrnorm(6, 3, 1)\n\n\nÖnemli olarak, eğer argüman isimlerini yazmazsanız, R argümanların varsayılan sırasını kullanacaktır, yani rnorm için girdiğiniz ilk sayının n olduğunu varsayacaktır. ikinci sayı mean ve üçüncü sayı sddir.\nEğer argüman isimlerini yazarsanız, argümanları istediğiniz sırada yazabilirsiniz:\n\n\nrnorm(sd = 1, n = 6, mean = 3)\n\n\nR’yi ilk öğrenirken, fonksiyonun her bir parçasının ne yaptığını hatırlamanıza ve anlamanıza yardımcı olabileceğinden, argüman adlarını yazmayı yararlı bulabilirsiniz. Ancak, becerileriniz ilerledikçe argüman adlarını atlamayı daha hızlı bulabilirsiniz ve ayrıca argüman adlarını kullanmayan çevrimiçi kod örnekleri göreceksiniz, bu nedenle her bir kod parçasının hangi argümana atıfta bulunduğunu anlayabilmek önemlidir (veya kontrol etmek için yardım belgelerine bakın).\nBu derste, her bir fonksiyonu ilk kez kullandığımızda argüman adlarını her zaman yazacağız, ancak sonraki kullanımlarda bunlar atlanabilir."
  },
  {
    "objectID": "03_Fonksiyonlar.html#tab-ile-otomatik-tamamlama",
    "href": "03_Fonksiyonlar.html#tab-ile-otomatik-tamamlama",
    "title": "Fonksiyonlar",
    "section": "TAB ile otomatik tamamlama",
    "text": "TAB ile otomatik tamamlama\n\nR Studio’nun çok kullanışlı bir özelliği, fonksiyonlar için TAB otomatik tamamlama özelliğidir (bkz. Şekil @ref(fig:img-autocomplete)). Fonksiyonun adını yazıp tab tuşuna basarsanız, R Studio size fonksiyonun aldığı argümanları kısa bir açıklama ile birlikte gösterecektir. Argüman adının üzerinde enter tuşuna basarsanız, tıpkı telefonunuzdaki otomatik tamamlama gibi adı sizin için dolduracaktır. Bu, R’yi ilk öğrenirken inanılmaz derecede kullanışlıdır ve bu özelliği sık sık kullanmayı unutmamalısınız.\n\n\n\n\n\n\nTab ile otomatik durdurma"
  },
  {
    "objectID": "03_Fonksiyonlar.html#kişisel-tanımlı-fonksiyon",
    "href": "03_Fonksiyonlar.html#kişisel-tanımlı-fonksiyon",
    "title": "Fonksiyonlar",
    "section": "Kişisel tanımlı fonksiyon",
    "text": "Kişisel tanımlı fonksiyon\n\nKişisel tanımlı fonksiyon yazılması şablonu aşağıdaki gibidir.\n\n\nfonksiyonadi&lt;-  function(argumanlar ve olagan degerleri){\n  kodlar\n  return()\n}\n\n\nOluşturulan fonksiyon çalıştırılırken ise aşağıdaki şeklinde çalıştırılır.\n\n\nfonksiyonadi(argumanlar ve degerleri)\n\n\nKare alma işlemi aşağıdaki şekilde yapılabilir.\n\n\nsayi &lt;-  4\nsayi * sayi\n\n[1] 16\n\nsayi ^2\n\n[1] 16\n\n\n\nBu işlem sürekli yapılacaksa fonksiyon olarak yazılabilir.\n\n\n# kare alma fonksiyonu\nkare_al &lt;-  function(sayi){\n  return(sayi*sayi)\n  }\nkare_al(4)\n\n[1] 16\n\n\n\nFarklı dereceden üsler alabilen bir fonksiyon yazalım.\n\n\n#üs alma\nüs_al&lt;-  function(x,us){\n  return(x^us)\n  }\nüs_al(3,4)\n\n[1] 81\n\n\n\nArgümanlardan birine olağan değer girilmesi\n\n\n#üs alma\nüs_al&lt;-  function(x,us=2){\n  return(x^us)\n  }\nüs_al(3) # us argumanin olagan degeri olan\n\n[1] 9\n\n# 2 olduğu için argumana \n# deger girilmediginde kare alir.\n\n\nAşağıdaki fonksiyona 3 ve 4 değerleri girilirse çıktı ne olur?\n\n\nmyfunc &lt;-  function(x,y)\n{\na &lt;-  x+y\nb &lt;-  x* y\nreturn(a*b)\n}\nmyfunc(3,4)\n\n\nmean() fonksiyonu en sık kullandığımız fonksiyonlardan biridir.\n\n\nx &lt;-  c(1,2,3)\nmean(x)\n\n[1] 2\n\n\n\nR base pakette yer alan bu fonksiyonu kendiniz de yazabilirsiniz.\nR’ da deneyim kazandıkça, yaptığınız işlemler karmaşıklaştıkça kendi fonksiyonlarınızı yazma ihtiyacı duyacaksınız.\navg() isminde vektör ortalaması hesaplayan fonksiyon yazınız.\n\n\nYazdığınız fonksiyon ile aşağıdaki işlemi yapınız.\n\n\nx &lt;-  1:1000\navg(x)\n\n[1] 500.5\n\n\n\nYazdığınız fonksiyon temel pakette yer alan mean() fonksiyonu ile aynı sonucu verdi mi?\n\n\nidentical(avg(x),mean(x))\n\n[1] TRUE\n\n\n\nFonksiyon içinde tanımlanan nesneler çalışma alanına kaydedilmezler.\nFonksiyonlar da R nesnesidir.\n\n\nls()\n\n[1] \"avg\"     \"kare_al\" \"sayi\"    \"üs_al\"   \"x\""
  },
  {
    "objectID": "03_Fonksiyonlar.html#yeniden-başlat",
    "href": "03_Fonksiyonlar.html#yeniden-başlat",
    "title": "Fonksiyonlar",
    "section": "Yeniden Başlat",
    "text": "Yeniden Başlat\n’Oturum - R’yi Yeniden Başlat’a tıklayın.\n\n\n\n\n\nyeniden baslatma"
  },
  {
    "objectID": "01_Kurulum.html",
    "href": "01_Kurulum.html",
    "title": "R ve Rstudio Temeller",
    "section": "",
    "text": "Bu bölümde, R ve RStudio’nun nasıl kullanılacağının yanı sıra bazı temel programlama kavramları ve terminolojisi, yaygın tuzaklar, faydalı ipuçları ve nereden yardım alınabileceği konularını ele alacağız.\nProgramlama deneyimi olmayanlar için bu bölüm oldukça yararlı olacaktır ancak daha önce R kullanmış olsanız bile bazı yararlı ipuçları ve püf noktaları bulabilirsiniz."
  },
  {
    "objectID": "01_Kurulum.html#r-nedir",
    "href": "01_Kurulum.html#r-nedir",
    "title": "R ve Rstudio Temeller",
    "section": "R Nedir?",
    "text": "R Nedir?\n\nR istatistiksel hesaplamalar yapabilen bir programlama dilidir.\n1996 yılında Auckland Universitesi’nde Ross Ihaka ve Robert Gentleman tarafından geliştirilmiştir.\n1960 yılında Bell Laboratories’de John Chambers ve arkadaşları tarafından geliştirilen S dilinin açık kaynak kodlu halidir.\nR yazılımı Genel Kamu Lisansi (GNU* General Public Licence) koşulları altında ücretsiz dağıtılmaktadır.\nR ve Temel Geliştirme Takımı (R core team) ile ilgili bilgilere R’in internet sitesinden (https://www.r-project.org/) ulaşılabilir.\nR dilinin ilk sürümü 29 Subat 2000 tarihinde yayınlanmıştır. Her iki-üç ayda bir sürümler güncellenmektedir.\n\nR version 4.4.1 (Beagle Scouts) has been released on 2024-06-14\n\nRStudio, R ile çalışmayı kolaylaştıran bir Entegre Geliştirme Ortamıdır (Integrated Development Environment[IDE]).\nBunu İngilizce bilmek ve kitap yazmak için NotePad gibi düz bir metin editörü kullanmak ile Microsoft Word gibi bir kelime işlemci kullanmak gibi düşünün. Bunu yapabilirsiniz, ancak bu kadar iyi görünmez ve yazım denetimi ve biçimlendirme gibi şeyler olmadan çok daha zor olur. Benzer bir şekilde, R Studio olmadan da R kullanabilirsiniz ancak bunu tavsiye etmiyorum.\nUnutmamanız gereken en önemli şey, bu ders için tüm çalışmalarınızı RStudio kullanarak yapacak olsanız da, aslında iki yazılım parçasını da kullanıyorsunuz, bu da zaman zaman her ikisinin de ayrı güncellemeleri olabileceği anlamına geliyor.\nR versiyonunu güncellerken installr paketini etkinleştirip installr(GUI=TRUE) komutunu çalıştırın. Bu komut size sıra ile yapılacakları söyleyecektir. Ancak bu komutu Rstudiodan değil doğrudan R üzerinden çalıştırınız.\nR’yi ölçme için kullanmanın iki yolu vardır. İlk olarak, web tarayıcınız aracılığıyla R ve R’nin çevrimiçi bir sürümünü kullanabilirsiniz (R server/sunucusu). İkincisi, R ve RStudio’yu dizüstü veya masaüstü bilgisayarınıza ücretsiz olarak indirip kurabilirsiniz."
  },
  {
    "objectID": "01_Kurulum.html#avantajları",
    "href": "01_Kurulum.html#avantajları",
    "title": "R ve Rstudio Temeller",
    "section": "Avantajları",
    "text": "Avantajları\n\nR özgür istatiksel bir programlama dilidir.\nR aynı zamanda bir yorumlayıcıdır (interpreter).\nR, bir veri tabanı değildir ama veri tabanlarına bağlanabilir.\nÖnceki sürümleri kullancı dostu olmasa da, son zamanlarda kod editörlerine çok sayıda işlev eklenmiştir.\nAyrıca java gibi diller aracılığı ile ara yüz desteğine sahip bir yazılım geliştirme ortamıdır.\nTablolardan oluşan yazılım paketlerine (Excel, Minitab gibi) benzememekle birlikte, yeni geliştiren bazı paketler farklı ara yüzler sağlamaktadır.\nÜcretsiz olması nedeniyle, ticari desteğe tabi bir yazılım değildir. Ancak destek alınabilecek çok sayıda kaynağa erisilebilir. (stackoverflow, mail listeleri, chatgbt)"
  },
  {
    "objectID": "01_Kurulum.html#neden-r",
    "href": "01_Kurulum.html#neden-r",
    "title": "R ve Rstudio Temeller",
    "section": "Neden R?",
    "text": "Neden R?\n\nR istatistiksel programlama, veri analizi ve grafiksel gösterim için kullanılan ve ticari bir amaç gütmeyen ücretsiz bir yazılımdır.\nR, UNIX, Windows ve MacOS gibi çeşitli platformlarda kodları derlemekte ve çalıştırmaktadır.\nSPSS, SAS gibi veri analizi programları ücretlidir, ayrıca bazı özel psikometri analizleri için yeterli değildir.\nR, açık kaynak kodlu olduğu için program kodlarına istenildiği zaman erişilebilir.\nDiğer istatistiksel yazılımlar ile karşılaştırıldığında R komut satırı ara yüzünü kullanmaktadır.\nBasit koşullar, döngüler ve kişi tanımlı fonksiyonlar yazmaya uyumlu basit ve etkili bir yazım diline sahiptir.\nR’in ayrıca grafiksel imkânları oldukça fazladır; bu nedenle yayınlanabilir/basıma uygun grafikler oluşturmak kolaydır.\nR ekibi birçok alanda ayrıntılı dokümantasyonu yapılmış R paketleri geliştirmektedir.\nKlasik istatistik yazılımlarında analiz sonuçları bir kez elde edilir. R yazılımında ise sonuçlar çalışma alanına kaydedilerek, ileriki analiz aşamalarında tekrar kullanabilir.\nR, psikometri alanında sıklıkla kullanılan simülasyon çalışmaları için (tekrarlı işlemler için) de avantaj sağlamaktadır.\nR, diğer programlama dilleri ve istatistik paket programları ile uyumludur."
  },
  {
    "objectID": "01_Kurulum.html#r-farklı-amaçlarla-kullanılanılabilir",
    "href": "01_Kurulum.html#r-farklı-amaçlarla-kullanılanılabilir",
    "title": "R ve Rstudio Temeller",
    "section": "R farklı amaçlarla kullanılanılabilir",
    "text": "R farklı amaçlarla kullanılanılabilir\n\nGrafiksek kullanıcı ara yüzleri ile (GUI) ile R’ın SPSS gibi görünmesini sağlayabilirsiniz. Bu şekilde bir şeyler yapmak ilk deneyim olarak yararlıdır. (R Commander (Rcmdr), Deducer)\nR’ı arka planda kullana java destekli çeşitli programlarda bulunmaktadır. (JASP, jamovi, RKWard)\nBelirli paketlerin sözdizimini öğrenip ve kullabilirsiniz. (programcı olmayanların R’yi kullanmasının yaygın bir yolu)\n\nPaketler, fonksiyon ve yardım dosyalarından oluşan gruplardır. Başka biri çözümü zaten “programlamıştır” ve siz de ihtiyaçlarınıza yeterince uyduğu için onu kullanıyorsunuzdur.\n\nR-programlamayı öğrenin -&gt; Kendi fonksiyonlarınızı yazın -&gt; Öğrenmesi en zoru, ancak maksimum esneklik sağlar"
  },
  {
    "objectID": "01_Kurulum.html#dezavantajları",
    "href": "01_Kurulum.html#dezavantajları",
    "title": "R ve Rstudio Temeller",
    "section": "Dezavantajları",
    "text": "Dezavantajları\n\nBaşta öğrenilmesi kolay görünse de, R’da uzmanlaşmak oldukça zordur.\nMenu ile kullanılan programlara alışkın olan kişiler için başlangıçta korkutucu olabilir.\nR ile bir analizi yapabilmek için planlama yapılması gerekmektedir.\nR kullanıcıları çoğunlukla programlamacı değildir. Programlamaya hâkim olmayan kişiler tarafından hazırlanan, okunması ve sürdürülebilirliği zor kodlar oluşturulabilir.\nBaşlangıçta kodları yazmak yıldırıcı olabilir; ancak çalışmaların tekrarlanabilirliği açısından avantaj sağlamaktadır.\nBu duruma bir örnek vermek gerekirse, 20 adet regresyon denklemi kurulup regresyon katsayıları karşılaştırılmak istenirse, R yazılımı sadece regresyon kat sayılarını gösterebilir ve tek bir satırda tüm regresyon sonuçlarını karşılaştırmaya olanak verir. Aynı işlem için diğer istatistiksel yazılımlarda 20 ayrı pencereden elde edilen sonuçların elle yazılarak karşılaştırılması gerekecektir.\nR’da hata yapma olasılığı diğer programlara göre daha fazladır. Hata kaynağı için varsayımların iyi bilinmesi gerekmektedir.\nHız konusunda SPSS ve SAS’a göre avantajlı olsa da diğer dillere göre (Python, Matlab gibi) daha yavaştır.\nGeliştirilen çok fazla paket olduğu için, ihtiyaca uygun en iyi paketin seçimi zor olabilmektedir.\nBu bir dezavantaj gibi görünse de istatistiksel işlemlerin arka planını anlamaya yardımcı olur.\nZayıf hazırlanmış kodlar farklı koşullarda yavaş çalışabilmektedir.\nÇoğu kullanıcı bu eksiklikleri gidermek için kodları değiştiremez. Özellikle çok iyi yapılandırılmamış olan kodlar R’da yavaş çalışabilmektedir."
  },
  {
    "objectID": "01_Kurulum.html#r-ve-rstudio-yüklenmesi",
    "href": "01_Kurulum.html#r-ve-rstudio-yüklenmesi",
    "title": "R ve Rstudio Temeller",
    "section": "R ve Rstudio Yüklenmesi",
    "text": "R ve Rstudio Yüklenmesi\n\nInternet tarayıcısına R yazılımın internet sitesinin ana sayfasının adresi yazılır. https://www.r-project.org/\nSol menüde yer alan “download CRAN” bölümüne tıkladıktan sonra ülke seçilir. Seçilen ülkenin yakınlığı sadece yükleme hızını değiştirecektir.\nÇıkan sayfada “Download and Install R” baslığı altından işletim sistemine uygun olan bağlantı seçilir.\nR konsolda çalışmaya doğrudan başlanabilir; ancak konsol kullanımı bir kod editörü olmadığı için çok kullanışlı değildir.\nRstudio hata ayıklama, görselleştirme araçları ile birlikte yüklenen modern bir kod editörüdür.\nhttps://www.rstudio.com/ internet sitesinden kullanılan bilgisayar ve işletim sistemine uygun olarak seçilip indirilebilmektedir.\nRstudio R ile daha üretken olmanıza yardımcı olacak bir dizi araç içerir, örneğin:\n\nR kodlarınızı vurgulamak için bir sözdizimi vurgulama düzenleyicisi\nR kodlarını yazmanıza yardımcı olacak işlevler (otomatik tamamlama)\nÇeşitli grafikler oluşturmak ve kaydetmek için çeşitli araçlar (ör. histogramlar, dağılım grafiği)\nVerileri içe veya dışa aktarmak için bir çalışma alanı yönetim aracı"
  },
  {
    "objectID": "01_Kurulum.html#diğer-gerekli-yüklemeler",
    "href": "01_Kurulum.html#diğer-gerekli-yüklemeler",
    "title": "R ve Rstudio Temeller",
    "section": "Diğer Gerekli Yüklemeler",
    "text": "Diğer Gerekli Yüklemeler\n\nBenim açıklamalarım yetmediyse R’yi bilgisayarınızda kullanmak için, lütfen daha ayrıntılı talimatlar ve indirmeniz gereken dosyaların bağlantılarının yanı sıra R’yi farklı bilgisayar türlerine yüklemek için bir dizi kılavuza bağlantılar içeren Installing R adresine bakın!!\nYüklemeler konusunda daha da fazlasına ihtiyacımız var ise R studio R !\nVerilen linkte yer alsa da ayrıca eklemeye ihtiyaç duyduğum bağlantılar:\n\n\n\n\n\n\n\n!!!\n\n\n\nJava ve Rtools sadece Windows kullanıcıları için gereklidir.\n\n\n\nJava\nRtools Rtools, kaynak koddan derleme yapmaya yarayan araçları içeren bir R yardımcısıdır. Önemli: Eğer Windows kullanıyorsanız, ayrıca Rtools yüklemeniz gerekir.\ndevtools\n\n\ninstall.packages(\"devtools\")\n\n\n\n\n\n\n\n!!!\n\n\n\nÖnümüzdeki haftalarda alabileceğimiz sıkıntılardan biri bilgisayaryol adlarından bulunan özel karakter olacak. Bu nedenle ilk olarak bilgisayarınız adını Türkçe karakter içermeyecek şekilde yeniden isimlendirmenizi rica ediyorum. İkinci konu ise linkteki ayarları yapmanız daha az hata almamıza neden olacaktır"
  },
  {
    "objectID": "01_Kurulum.html#hangi-r-sürümünü-kullanmalısınız",
    "href": "01_Kurulum.html#hangi-r-sürümünü-kullanmalısınız",
    "title": "R ve Rstudio Temeller",
    "section": "Hangi R sürümünü kullanmalısınız?",
    "text": "Hangi R sürümünü kullanmalısınız?\n\nR’yi bilgisayarınıza kurmanın avantajı, kullanmak için internete bağlı olmanız gerekmemesi, dosyalarınızı kaydetmenin ve yönetmenin daha kolay olması ve sunucunun çökmesi durumunda sorun yaşanmamasıdır (bu nadirdir, ancak olmuştur).\nR sunucusunu kullanmanın avantajı, bilgisayarına herhangi bir şey yüklemenize gerek olmaması, sadece web tarayıcınız üzerinden erişebilmenizdir.\nR’yi yükleyemeyeceğiniz bir bilgisayarınız varsa (örneğin Chromebook) veya R’yi bilgisayarınıza yüklemeyle ilgili ciddi sorunlarınız varsa sunucuyu kullanmanızı öneririz."
  },
  {
    "objectID": "01_Kurulum.html#r-studio-hakkında",
    "href": "01_Kurulum.html#r-studio-hakkında",
    "title": "R ve Rstudio Temeller",
    "section": "R Studio Hakkında",
    "text": "R Studio Hakkında\n\nR Studio, kodu deneyebileceğiniz bir konsola sahiptir (Şekil’de sol alt pencerede yer alır.\nAyrıca kod editörü (sol üst), “Ortam” sekmesinde oluşturduğunuz fonksiyonları ve nesneleri gösteren bir pencere ( sağ üst pencere) ve grafikleri, dosya paketlerini ve yardım belgelerini gösteren bir pencere ise (sağ alt) bulunur.\n\n\n\n\n\n\nRStudio arayüzü\n\n\n\n\n\nBu ders boyunca R Studio’da bulunan özelliklerin nasıl kullanılacağı hakkında daha fazla bilgi edineceksiniz, ancak R Studio ekibinden RStudio Essentials 1 izlemenizi şiddetle tavsiye ederim. Video yaklaşık 30 dakika sürmekte ve R Studio’nun ana bölümlerini tanıtmaktadır."
  },
  {
    "objectID": "01_Kurulum.html#basit-islemler",
    "href": "01_Kurulum.html#basit-islemler",
    "title": "R ve Rstudio Temeller",
    "section": "Basit İslemler",
    "text": "Basit İslemler\n\ntoplama işlemi için +,\nçıkarma işlemi için -,\nçarpma işlemi için *,\nbölme işlemi için /,\nüs alma işlemi için ^\nmod alma icin ise %% operatorleri kullanılmaktadır.\nKodlamanızın büyük bir kısmı nesne oluşturmayı ve nesneleri manipüle etmeyi içerecektir. Nesneler bir şeyler içerir. Bu şeyler sayılar, kelimeler veya işlemlerin ve analizlerin sonucu olabilir\n\nAlıştırma Nesneler oluşturma\n\nAşağıdaki kodu kopyalayıp konsola yapıştırın, kodu kendi adınızı ve yaşınızı kullanacak şekilde değiştirin ve çalıştırın. Enviroment bölmesinde ad, yas, gun, yeniyil ve veri nesnelerinin göründüğünü göreceksiniz.\n\n\nad &lt;- \"ada\"\nyas &lt;- 16 + 20 \ngun &lt;-Sys.Date()\nyeniyil &lt;- as.Date(\"2024-01-01\")\nveri &lt;- rnorm(n = 10, mean = 15, sd = 3)\n\n\n\n\n\n\nCalisma alanındaki nesneler\n\n\n\n\n\nBu örneklerde, ad, yas ve yeniyil her zaman ada, 36 değerlerini ve 2024 Yeni Yıl Günü tarihini içerecektir, ancak gun tarihi işletim sisteminden alacaktır ve veri rastgele oluşturulmuş bir veri kümesi olacaktır, bu nedenle bu nesnelerin değerleri statik olmayacaktır.\nDaha da önemlisi, nesneler hesaplamalara dahil olabilir ve birbirleriyle etkileşime girebilir. Örneğin:\n\n\nyas + 10\n\n[1] 46\n\nyeniyil - gun\n\nTime difference of -266 days\n\nmean(veri)\n\n[1] 15.27065\n\n\n\nSon olarak, bu işlemlerin sonucunu yeni bir nesnede saklayabilirsiniz:\n\n\nn1 &lt;- yas + 10\n\n\n\n\n\n\n\n!!!\n\n\n\n&lt;- ifadesini içerir şeklinde okumak faydalı olabilir, örneğin ad ifadesi ada metnini içerir.\n\n\n\nBu ders boyunca sürekli olarak nesneler yaratacaksınız ve ilerledikçe onlar ve nasıl davrandıkları hakkında daha fazla bilgi edineceksiniz, ancak şimdilik bunların değerleri kaydetmenin bir yolu olduğunu, bu değerlerin sayı, metin veya işlemlerin sonucu olabileceğini ve yeni değişkenler oluşturmak için başka işlemlerde kullanılabileceğini anlamak yeterlidir.\n\n\n\n\nNesnelerin ‘değişkenler’ olarak adlandırıldığını da görebilirsiniz. Programlama terimlerinde ikisi arasında fark vardır, ancak çok sık eşanlamlı olarak kullanılırlar.\n\n\n\nAlıştırma Nesneler oluşturma\n\nAşağıdaki kodu kopyalayıp konsola yapıştırın.\nEni 4 cm, boyu 10 cm bir dikdörtgenin alanı hesaplayınız.\n\n\n# en nesnesi tanimlama\n\n# boy nesnesi tanimlama\n\n# alan nesnesi tanimlama\n\n# alan nesnesini yazdirma\n\n\n\n[1] 40\n\n\n\nEni 4 cm, boyu 10 cm bir dikdörtgenin köşegen uzunluğunu hesaplayınız.\n\n\n# en nesnesi tanimlama\n\n# boy nesnesi tanimlama\n\n# kosegen nesnesi tanimlama\n\n# kosegen nesnesini yazdirma\n\n\n\n[1] 10.77033"
  },
  {
    "objectID": "01_Kurulum.html#yararlı-rstudio-ipuçları",
    "href": "01_Kurulum.html#yararlı-rstudio-ipuçları",
    "title": "R ve Rstudio Temeller",
    "section": "Yararlı RStudio ipuçları",
    "text": "Yararlı RStudio ipuçları\n\n\n\n\n\n\n\nKeystroke\nAçıklama\n\n\n\n\n&lt;tab&gt;\nkomutları ve dosya adlarını otomatik olarak tamamlar ve fonkisyonlar için argümanları listeler. Son derece kullanışlı!\n\n\n&lt;up&gt;\nkonsol isteminde önceki komutlar arasında geçiş yapma\n\n\n&lt;ctrl-up&gt;\ntamamlanmamış bir komutla eşleşen önceki komutların geçmişini listeler\n\n\n&lt;ctrl-enter&gt;\nGeçerli satırı kaynak penceresinden konsola yapıştırır. Bir kaynak dosyadan fikirleri denemek için iyidir.\n\n\n&lt;ESC&gt;\nbelirtildiği gibi, tamamlanmamış bir komutu iptal edin ve + isteminden çıkın"
  },
  {
    "objectID": "02_Paket.html",
    "href": "02_Paket.html",
    "title": "R Paketler",
    "section": "",
    "text": "R’yi yüklediğinizde, veri işleme ve istatistiksel analiz seçenekleri de dahil olmak üzere bir dizi fonksiyona erişebilirsiniz. Varsayılan kurulumda yer alan fonksiyonlar genellikle Temel R/Base R olarak adlandırılır ve birçok Temel R fonksiyonunu gösteren faydalı bir cheatsheet sayfası vardır 🔗cheatsheet\nTemel R telefonunuzda gelen varsayılan uygulamalar, paketleri ise ayrıca indirmeniz gereken ek uygulamalar olarak düşünmek faydalı olabilir.\nR fonksiyonları ayrı paketler halinde düzenlenmişlerdir. Böylece gerekli paketlerle çalışarak daha az bellek kullanımı ve hızlı işlem gücü sağlanır.\nBu paketlerin bir başka avantajı da yazılan fonksiyonlardan oluşan paketlerin CRAN’den temin edilerek yüklenebilmesidir.\nHer paketin bir yaratıcısı ve kendisine ait bir yardım dosyası bulunur.\n\n\n# paket yukleme\ninstall.packages(\"CTT\")\n# paket aktive etme\nlibrary(CTT)\n\n\nPaket yükleme işlemi Rstudio’da yer alan menüler aracılığı ile de yapılabilmektedir.\nR paketleri R fonksiyonlarının, verilerinin ve iyi derlenmiş bir formatta kodların kombinasyonlarından oluşmaktadır. library() komutu ile kişisel kütüphanenizdeki yüklü paketleri görebilirsiniz.\nSadece temel pakette 1000’den fazla fonksiyon bulunmaktadır.\n\n\n# temel paket fonksiyonlarina ulasimak icin  \nfonksiyonlar &lt;-  builtins()\nlength(fonksiyonlar)\n\n[1] 1407\n\n\n\nfonksiyonlar[910:920]\n\n [1] \"default.stringsAsFactors\" \"declare\"                 \n [3] \"debugonce\"                \"debuggingState\"          \n [5] \"debug\"                    \"date\"                    \n [7] \"data.matrix\"              \"data.frame\"              \n [9] \"data.class\"               \"cut.POSIXt\"              \n[11] \"cut.default\"             \n\n\n\n\n\nyükle-etkinleştir\n\n\n\n\n\nBir paketi kullanabilmek için önce onu yüklemeniz gerekir. Aşağıdaki kod, bu derste çok sık kullanacağımız bir paket olan tidyverse paketini yükler.\n\n\ninstall.packages(\"tidyverse\")\n\n\nBir paketi yalnızca bir kez yüklemeniz gerekir, ancak R’yi her başlattığınızda kullanmak istediğiniz paketleri etkinleştirmeniz gerekir, benzer şekilde telefonunuza bir uygulamayı bir kez yüklemeniz gerekir, ancak her kullanmak istediğinizde açmanız gerekir.\n\n\n\n\n\n\n\n!!!\n\n\n\nUYARI: WARNING: Rtools is required to build R packages” gibi bir hata mesajı alırsanız, [Rtools] (https://cran.r-project.org/bin/windows/Rtools/) adlı ekstra bir yazılım indirmeniz ve yüklemeniz gerekebilir.\n\n\n\n\n\nTidyverse’i etkinleştirmek için aşağıdaki kodu çalıştırın.\n\n\nlibrary(tidyverse)\n\n\nShow in New Window\n── Attaching core tidyverse packages ────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.5.1     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.1\n── Conflicts ──────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n✖ MASS::select()  masks dplyr::select()\nℹ Use the conflicted package to force all conflicts to become errors\n\n\nBir hata mesajı gibi görünen bir şey alacaksınız - öyle değil. Bu sadece R’nin size ne yaptığını anlatmasıdır.\nŞimdi tidyverse paketini etkinleştirdiğimize göre, içerdiği fonksiyonlardan herhangi birini kullanabiliriz, ancak unutmayın, R’yi her başlattığınızda library() fonksiyonunu çalıştırmanız gerekir.\n\n\n\n\n\n\nBazı paketler daha yeni bir R sürümü gerektirir bu nedenler R’yi düzenli olarak en son sürüme güncelleyin. Ayrıca güncelledikten sonra eski R versiyonlarını bilgisayarınızdan kaldırınız.\nBirden fazla R sürümünüz olduğunda ya da bilgisyarınızda birden fazla kullanıcı olduğunda “Permission Denied” hatası alabilirsiniz. Bu sorundan kurtalmak için eski R versiyonlarını bilgisayarınızdan kaldırınız ve/ve ya R’i yönetici olarak çalıştırınız.\nBirçok R paketi diğer paketlere bağlıdır ve bu bağımlı olduğu paketler yüklenmez veya güncellenmezse kurulum başarısız olur. R paketlerinizi de güncel tutun.\nRcpp veya rJava gibi bazı R paketleri harici sistem kütüphanelerine bağlıdır. Eğer bunlar sisteminizde yüklü değilse, paket kurulumu başarısız olur. Hata mesajlarını dikkatli okuyunuz.\nBazen paket depoları (CRAN) geçici olarak kapalı olabilir veya ağ sorunları bunlara erişimi engelleyebilir. Bu durumda internet bağlantınızı kontrol edin. Eğer stabilse, farklı bir yolla yüklemeyi deneyin.\nEski paketler arşivlenmiş veya kullanımdan kaldırılmış olabilir ve CRAN üzerinden kurulum için mevcut olmayabilir. Eski sürümler için CRAN arşivini kontrol edip, cranden indirip zip ya da tar.zg uzantılı paketi yükleyebilirsiniz.\nBazen indirilen paketlerin önbelleği bozularak kurulum hatalarına yol açabilir. İndirilen paketler için geçici dizini silerek veya çalıştırarak önbelleği temizleyerek yükleyebilirsiniz.\n\n\ninstall.packages(\"your_package\", clean = TRUE)\n\n\nBüyük paketlerin veya çok sayıda bağımlı olduğu paket olan paketlerde yükleme uzun sürebilir veya bellek kısıtlamaları nedeniyle başarısız olabilir. İşlemi paralelleştirerek kurulumu hızlandırmak için Ncpus argümanı kullanılabilir.\n\n\ninstall.packages(\"your_package\", Ncpus = parallel::detectCores() - 1)\n\n\n\n\n\nBazı R paketleri github üzerinden yayınlanmaktadır. Bu paketleri standart yollarla yükleyemiyiz. Bu paketleri yüklemek için ilk olarak devtools paketinin yüklü olmasına ihtiyaç vardır.\nBu paketlere bir örnek yapısal eşitlik modelleri ile ilgili APA formatında tablolar üreten semtools verilebilir. Paketin github sayfası 🔗linkte yer almaktadır. Paketin yüklenmesi için örnek kod aşağıda verilmiştir.\n\n\ndevtools::install_github(\"dr-JT/semoutput\")\n\n\n\n\n\nR’da temel ve diğer paketlerde yer alan fonksiyonların işlevleri görmek için yardım sayfalarını inceleyebilirsiniz. ? ve help() fonksiyonları aynı işleve sahiptir.\n\n\n?is.na\n\nhelp(sqrt)\n\n\nÖrneğin CTT paketini hem yüklediniz hem de etkinleştirdiniz. Paket fonksiyon ve veri içeriğini aşağıdaki komutlarla görebilirsiniz.\n\n\n# install.packages(CTT)\nlibrary(CTT)\nls(\"package:CTT\") \ndata(package = \"CTT\") # yeni bir sekmede acilir.\n?reliability\n\n\nEtkinleştirdiğiniz paketlerde yer alan fonksiyonların yardım sayfalarına ulaşabilirsiniz.\n\n\n\n\n\nDaha da fazla fonksiyona sahip binlerce farklı R paketi vardır. Ne yazık ki, bazen farklı paketler aynı fonksiyon isimlerine sahiptir. Örneğin, dplyr ve MASS paketlerinin her ikisi de select() adında bir fonksiyona sahiptir. Bu paketlerin her ikisini de etkinleştirirseniz, R size bir çakışma olduğunu söyleyen bir uyarı üretecektir.\n\n\nlibrary(dplyr)\nlibrary(MASS)\n\n\nAttaching package: ‘dplyr’\n\nThe following objects are masked from ‘package:stats’:\n\n    filter, lag\n\nThe following objects are masked from ‘package:base’:\n\n    intersect, setdiff, setequal, union\n\n\nAttaching package: ‘MASS’\n\nThe following object is masked from ‘package:dplyr’:\n\n    select\n\n\nBu durumda, R size dplyr paketindeki select() fonksiyonunun aynı isimli başka bir fonksiyon tarafından gizlendiğini (veya ‘maskelendiğini’) söylüyor. Eğer select() fonksiyonunu kullanmayı deneseydiniz, R en son yüklenen paketteki fonksiyonu kullanacaktı - bu durumda MASS fonksiyonunu kullanacaktı.\nBelirli bir fonksiyon için hangi paketi kullanmak istediğinizi belirtmek istiyorsanız, örneğin package::function biçiminde kod kullanabilirsiniz:\n\n\ndplyr::select()\nMASS::select()\n\n\n\n\n\nR ve R Studio güncellemelerine ek olarak, paketlerin yazarları da bazen kodlarını günceller. Bu, bir pakete fonksiyon eklemek için olabileceği gibi hataları düzeltmek için de olabilir. Kaçınılması gereken bir şey, yüklü bir paketi istemeden güncellemektir.\ninstall.packages() fonksiyonunu çalıştırdığınızda, her zaman paketin en son sürümü yüklenir ve yüklemiş olabileceğiniz eski sürümlerin üzerine yazılır. Bazen bu bir sorun teşkil etmez, ancak bazen paket önemli ölçüde değiştiği için güncellemenin kodunuzun artık çalışmadığı anlamına geldiğini görürsünüz. Bir paketin eski bir sürümüne geri dönmek mümkündür ancak yine de bundan kaçınmaya çalışın.\n\n\n\n\nBir paketin üzerine yanlışlıkla daha sonraki bir sürümün yazılmasını önlemek için, sizin veya bir başkasının kodu yanlışlıkla çalıştırması ihtimaline karşı analiz komut dosyalarınıza install.packages() i asla dahil etmemelisiniz.\n\n\n\n\n\n\n\nR’a atıfta bulunmanız ve referans vermeniz gereken bilimsel bir rapor yazmaktan biraz uzak olabilirsiniz, ancak zamanı geldiğinde bunu onu geliştiren insanlara (çoğu ücretsiz!) kredi vermek için yapmak önemlidir. R, RStudio ve kullandığınız paketler için ayrı alıntılar sağlamalısınız.\nKullandığınız R sürümü için atıf almak için, size her zaman en son atıfı sağlayacak olan citation() fonksiyonunu çalıştırmanız yeterlidir.\n\n\ncitation()\n\nTo cite R in publications use:\n\n  R Core Team (2024). _R: A Language and Environment for Statistical\n  Computing_. R Foundation for Statistical Computing, Vienna, Austria.\n  &lt;https://www.R-project.org/&gt;.\n\nA BibTeX entry for LaTeX users is\n\n  @Manual{,\n    title = {R: A Language and Environment for Statistical Computing},\n    author = {{R Core Team}},\n    organization = {R Foundation for Statistical Computing},\n    address = {Vienna, Austria},\n    year = {2024},\n    url = {https://www.R-project.org/},\n  }\n\nWe have invested a lot of time and effort in creating R, please cite it\nwhen using it for data analysis. See also 'citation(\"pkgname\")' for\nciting R packages.\n\n\n\nKullandığınız herhangi bir paket için atıf oluşturmak için, atıf yapmak istediğiniz paketin adıyla birlikte citation() işlevini de kullanabilirsiniz.\n\n\ncitation(\"tidyverse\")\n\nTo cite package 'tidyverse' in publications use:\n\n  Wickham H, Averick M, Bryan J, Chang W, McGowan LD, François R,\n  Grolemund G, Hayes A, Henry L, Hester J, Kuhn M, Pedersen TL, Miller\n  E, Bache SM, Müller K, Ooms J, Robinson D, Seidel DP, Spinu V,\n  Takahashi K, Vaughan D, Wilke C, Woo K, Yutani H (2019). \"Welcome to\n  the tidyverse.\" _Journal of Open Source Software_, *4*(43), 1686.\n  doi:10.21105/joss.01686 &lt;https://doi.org/10.21105/joss.01686&gt;.\n\nA BibTeX entry for LaTeX users is\n\n  @Article{,\n    title = {Welcome to the {tidyverse}},\n    author = {Hadley Wickham and Mara Averick and Jennifer Bryan and Winston Chang and Lucy D'Agostino McGowan and Romain François and Garrett Grolemund and Alex Hayes and Lionel Henry and Jim Hester and Max Kuhn and Thomas Lin Pedersen and Evan Miller and Stephan Milton Bache and Kirill Müller and Jeroen Ooms and David Robinson and Dana Paige Seidel and Vitalie Spinu and Kohske Takahashi and Davis Vaughan and Claus Wilke and Kara Woo and Hiroaki Yutani},\n    year = {2019},\n    journal = {Journal of Open Source Software},\n    volume = {4},\n    number = {43},\n    pages = {1686},\n    doi = {10.21105/joss.01686},\n  }\n\n\n\nKullandığınız RStudio sürümüne ait alıntıyı oluşturmak için RStudio.Vesion() fonksiyonunu kullanabilirsiniz:\n\n\nRStudio.Version()\n\n\nSon olarak, yöntem bölümünüzün yazımında bunun nasıl görünebileceğine dair bir örnek:\n\n\nAnaliz R (R Core Team, 2020), RStudio (Rstudio Team, 2020) ve tidyverse paketi (Wickham, 2017) kullanılarak gerçekleştirilmiştir.\n\n\nBelirtildiği gibi, bunu hemen yapmak zorunda kalmayabilirsiniz; ancak, yapmanız gerektiğinde bunu göz önünde bulundurmanız önemli. Açık kaynak topluluğuna katkılarından dolayı kredi vermek, emeğe saygı açısından büyük bir öneme sahiptir.\nAyrıca Rmarkdownun citation aracı ile bunu yapmak oldukça kolay !"
  },
  {
    "objectID": "02_Paket.html#tidyverse-paketini-yükleme",
    "href": "02_Paket.html#tidyverse-paketini-yükleme",
    "title": "R Paketler",
    "section": "",
    "text": "Bir paketi kullanabilmek için önce onu yüklemeniz gerekir. Aşağıdaki kod, bu derste çok sık kullanacağımız bir paket olan tidyverse paketini yükler.\n\n\ninstall.packages(\"tidyverse\")\n\n\nBir paketi yalnızca bir kez yüklemeniz gerekir, ancak R’yi her başlattığınızda kullanmak istediğiniz paketleri etkinleştirmeniz gerekir, benzer şekilde telefonunuza bir uygulamayı bir kez yüklemeniz gerekir, ancak her kullanmak istediğinizde açmanız gerekir.\n\n\n\n\n\n\n\n!!!\n\n\n\nUYARI: WARNING: Rtools is required to build R packages” gibi bir hata mesajı alırsanız, [Rtools] (https://cran.r-project.org/bin/windows/Rtools/) adlı ekstra bir yazılım indirmeniz ve yüklemeniz gerekebilir.\n\n\n\n\n\nTidyverse’i etkinleştirmek için aşağıdaki kodu çalıştırın.\n\n\nlibrary(tidyverse)\n\n\nShow in New Window\n── Attaching core tidyverse packages ────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.5.1     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.1\n── Conflicts ──────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n✖ MASS::select()  masks dplyr::select()\nℹ Use the conflicted package to force all conflicts to become errors\n\n\nBir hata mesajı gibi görünen bir şey alacaksınız - öyle değil. Bu sadece R’nin size ne yaptığını anlatmasıdır.\nŞimdi tidyverse paketini etkinleştirdiğimize göre, içerdiği fonksiyonlardan herhangi birini kullanabiliriz, ancak unutmayın, R’yi her başlattığınızda library() fonksiyonunu çalıştırmanız gerekir."
  },
  {
    "objectID": "02_Paket.html#paket-yükleme-yaygın-hatalar",
    "href": "02_Paket.html#paket-yükleme-yaygın-hatalar",
    "title": "R Paketler",
    "section": "",
    "text": "Bazı paketler daha yeni bir R sürümü gerektirir bu nedenler R’yi düzenli olarak en son sürüme güncelleyin. Ayrıca güncelledikten sonra eski R versiyonlarını bilgisayarınızdan kaldırınız.\nBirden fazla R sürümünüz olduğunda ya da bilgisyarınızda birden fazla kullanıcı olduğunda “Permission Denied” hatası alabilirsiniz. Bu sorundan kurtalmak için eski R versiyonlarını bilgisayarınızdan kaldırınız ve/ve ya R’i yönetici olarak çalıştırınız.\nBirçok R paketi diğer paketlere bağlıdır ve bu bağımlı olduğu paketler yüklenmez veya güncellenmezse kurulum başarısız olur. R paketlerinizi de güncel tutun.\nRcpp veya rJava gibi bazı R paketleri harici sistem kütüphanelerine bağlıdır. Eğer bunlar sisteminizde yüklü değilse, paket kurulumu başarısız olur. Hata mesajlarını dikkatli okuyunuz.\nBazen paket depoları (CRAN) geçici olarak kapalı olabilir veya ağ sorunları bunlara erişimi engelleyebilir. Bu durumda internet bağlantınızı kontrol edin. Eğer stabilse, farklı bir yolla yüklemeyi deneyin.\nEski paketler arşivlenmiş veya kullanımdan kaldırılmış olabilir ve CRAN üzerinden kurulum için mevcut olmayabilir. Eski sürümler için CRAN arşivini kontrol edip, cranden indirip zip ya da tar.zg uzantılı paketi yükleyebilirsiniz.\nBazen indirilen paketlerin önbelleği bozularak kurulum hatalarına yol açabilir. İndirilen paketler için geçici dizini silerek veya çalıştırarak önbelleği temizleyerek yükleyebilirsiniz.\n\n\ninstall.packages(\"your_package\", clean = TRUE)\n\n\nBüyük paketlerin veya çok sayıda bağımlı olduğu paket olan paketlerde yükleme uzun sürebilir veya bellek kısıtlamaları nedeniyle başarısız olabilir. İşlemi paralelleştirerek kurulumu hızlandırmak için Ncpus argümanı kullanılabilir.\n\n\ninstall.packages(\"your_package\", Ncpus = parallel::detectCores() - 1)"
  },
  {
    "objectID": "02_Paket.html#github-paketleri-yükleme",
    "href": "02_Paket.html#github-paketleri-yükleme",
    "title": "R Paketler",
    "section": "",
    "text": "Bazı R paketleri github üzerinden yayınlanmaktadır. Bu paketleri standart yollarla yükleyemiyiz. Bu paketleri yüklemek için ilk olarak devtools paketinin yüklü olmasına ihtiyaç vardır.\nBu paketlere bir örnek yapısal eşitlik modelleri ile ilgili APA formatında tablolar üreten semtools verilebilir. Paketin github sayfası 🔗linkte yer almaktadır. Paketin yüklenmesi için örnek kod aşağıda verilmiştir.\n\n\ndevtools::install_github(\"dr-JT/semoutput\")"
  },
  {
    "objectID": "02_Paket.html#yardım-sayfaları",
    "href": "02_Paket.html#yardım-sayfaları",
    "title": "R Paketler",
    "section": "",
    "text": "R’da temel ve diğer paketlerde yer alan fonksiyonların işlevleri görmek için yardım sayfalarını inceleyebilirsiniz. ? ve help() fonksiyonları aynı işleve sahiptir.\n\n\n?is.na\n\nhelp(sqrt)\n\n\nÖrneğin CTT paketini hem yüklediniz hem de etkinleştirdiniz. Paket fonksiyon ve veri içeriğini aşağıdaki komutlarla görebilirsiniz.\n\n\n# install.packages(CTT)\nlibrary(CTT)\nls(\"package:CTT\") \ndata(package = \"CTT\") # yeni bir sekmede acilir.\n?reliability\n\n\nEtkinleştirdiğiniz paketlerde yer alan fonksiyonların yardım sayfalarına ulaşabilirsiniz."
  },
  {
    "objectID": "02_Paket.html#conflicts",
    "href": "02_Paket.html#conflicts",
    "title": "R Paketler",
    "section": "",
    "text": "Daha da fazla fonksiyona sahip binlerce farklı R paketi vardır. Ne yazık ki, bazen farklı paketler aynı fonksiyon isimlerine sahiptir. Örneğin, dplyr ve MASS paketlerinin her ikisi de select() adında bir fonksiyona sahiptir. Bu paketlerin her ikisini de etkinleştirirseniz, R size bir çakışma olduğunu söyleyen bir uyarı üretecektir.\n\n\nlibrary(dplyr)\nlibrary(MASS)\n\n\nAttaching package: ‘dplyr’\n\nThe following objects are masked from ‘package:stats’:\n\n    filter, lag\n\nThe following objects are masked from ‘package:base’:\n\n    intersect, setdiff, setequal, union\n\n\nAttaching package: ‘MASS’\n\nThe following object is masked from ‘package:dplyr’:\n\n    select\n\n\nBu durumda, R size dplyr paketindeki select() fonksiyonunun aynı isimli başka bir fonksiyon tarafından gizlendiğini (veya ‘maskelendiğini’) söylüyor. Eğer select() fonksiyonunu kullanmayı deneseydiniz, R en son yüklenen paketteki fonksiyonu kullanacaktı - bu durumda MASS fonksiyonunu kullanacaktı.\nBelirli bir fonksiyon için hangi paketi kullanmak istediğinizi belirtmek istiyorsanız, örneğin package::function biçiminde kod kullanabilirsiniz:\n\n\ndplyr::select()\nMASS::select()"
  },
  {
    "objectID": "02_Paket.html#paket-güncelleme",
    "href": "02_Paket.html#paket-güncelleme",
    "title": "R Paketler",
    "section": "",
    "text": "R ve R Studio güncellemelerine ek olarak, paketlerin yazarları da bazen kodlarını günceller. Bu, bir pakete fonksiyon eklemek için olabileceği gibi hataları düzeltmek için de olabilir. Kaçınılması gereken bir şey, yüklü bir paketi istemeden güncellemektir.\ninstall.packages() fonksiyonunu çalıştırdığınızda, her zaman paketin en son sürümü yüklenir ve yüklemiş olabileceğiniz eski sürümlerin üzerine yazılır. Bazen bu bir sorun teşkil etmez, ancak bazen paket önemli ölçüde değiştiği için güncellemenin kodunuzun artık çalışmadığı anlamına geldiğini görürsünüz. Bir paketin eski bir sürümüne geri dönmek mümkündür ancak yine de bundan kaçınmaya çalışın.\n\n\n\n\nBir paketin üzerine yanlışlıkla daha sonraki bir sürümün yazılmasını önlemek için, sizin veya bir başkasının kodu yanlışlıkla çalıştırması ihtimaline karşı analiz komut dosyalarınıza install.packages() i asla dahil etmemelisiniz."
  },
  {
    "objectID": "02_Paket.html#r-ve-rstudioya-nasıl-alıntı-yapılır",
    "href": "02_Paket.html#r-ve-rstudioya-nasıl-alıntı-yapılır",
    "title": "R Paketler",
    "section": "",
    "text": "R’a atıfta bulunmanız ve referans vermeniz gereken bilimsel bir rapor yazmaktan biraz uzak olabilirsiniz, ancak zamanı geldiğinde bunu onu geliştiren insanlara (çoğu ücretsiz!) kredi vermek için yapmak önemlidir. R, RStudio ve kullandığınız paketler için ayrı alıntılar sağlamalısınız.\nKullandığınız R sürümü için atıf almak için, size her zaman en son atıfı sağlayacak olan citation() fonksiyonunu çalıştırmanız yeterlidir.\n\n\ncitation()\n\nTo cite R in publications use:\n\n  R Core Team (2024). _R: A Language and Environment for Statistical\n  Computing_. R Foundation for Statistical Computing, Vienna, Austria.\n  &lt;https://www.R-project.org/&gt;.\n\nA BibTeX entry for LaTeX users is\n\n  @Manual{,\n    title = {R: A Language and Environment for Statistical Computing},\n    author = {{R Core Team}},\n    organization = {R Foundation for Statistical Computing},\n    address = {Vienna, Austria},\n    year = {2024},\n    url = {https://www.R-project.org/},\n  }\n\nWe have invested a lot of time and effort in creating R, please cite it\nwhen using it for data analysis. See also 'citation(\"pkgname\")' for\nciting R packages.\n\n\n\nKullandığınız herhangi bir paket için atıf oluşturmak için, atıf yapmak istediğiniz paketin adıyla birlikte citation() işlevini de kullanabilirsiniz.\n\n\ncitation(\"tidyverse\")\n\nTo cite package 'tidyverse' in publications use:\n\n  Wickham H, Averick M, Bryan J, Chang W, McGowan LD, François R,\n  Grolemund G, Hayes A, Henry L, Hester J, Kuhn M, Pedersen TL, Miller\n  E, Bache SM, Müller K, Ooms J, Robinson D, Seidel DP, Spinu V,\n  Takahashi K, Vaughan D, Wilke C, Woo K, Yutani H (2019). \"Welcome to\n  the tidyverse.\" _Journal of Open Source Software_, *4*(43), 1686.\n  doi:10.21105/joss.01686 &lt;https://doi.org/10.21105/joss.01686&gt;.\n\nA BibTeX entry for LaTeX users is\n\n  @Article{,\n    title = {Welcome to the {tidyverse}},\n    author = {Hadley Wickham and Mara Averick and Jennifer Bryan and Winston Chang and Lucy D'Agostino McGowan and Romain François and Garrett Grolemund and Alex Hayes and Lionel Henry and Jim Hester and Max Kuhn and Thomas Lin Pedersen and Evan Miller and Stephan Milton Bache and Kirill Müller and Jeroen Ooms and David Robinson and Dana Paige Seidel and Vitalie Spinu and Kohske Takahashi and Davis Vaughan and Claus Wilke and Kara Woo and Hiroaki Yutani},\n    year = {2019},\n    journal = {Journal of Open Source Software},\n    volume = {4},\n    number = {43},\n    pages = {1686},\n    doi = {10.21105/joss.01686},\n  }\n\n\n\nKullandığınız RStudio sürümüne ait alıntıyı oluşturmak için RStudio.Vesion() fonksiyonunu kullanabilirsiniz:\n\n\nRStudio.Version()\n\n\nSon olarak, yöntem bölümünüzün yazımında bunun nasıl görünebileceğine dair bir örnek:\n\n\nAnaliz R (R Core Team, 2020), RStudio (Rstudio Team, 2020) ve tidyverse paketi (Wickham, 2017) kullanılarak gerçekleştirilmiştir.\n\n\nBelirtildiği gibi, bunu hemen yapmak zorunda kalmayabilirsiniz; ancak, yapmanız gerektiğinde bunu göz önünde bulundurmanız önemli. Açık kaynak topluluğuna katkılarından dolayı kredi vermek, emeğe saygı açısından büyük bir öneme sahiptir.\nAyrıca Rmarkdownun citation aracı ile bunu yapmak oldukça kolay !"
  },
  {
    "objectID": "04_Nesneler.html",
    "href": "04_Nesneler.html",
    "title": "Nesne Oluşturma",
    "section": "",
    "text": "R lineer cebir temelli bir programlama dilidir.\nVektörler tek boyutludur.\nR’da vektörler birleştirmek (combine/concatenate) anlamına gelen c() fonksiyonu ile oluşturulmaktadır.\nR da veriler bir araya gelerek veri yapılarını oluşturur.\n\nvektör (vector)\n\nKarakter (character)\nSayısal (numeric)\n\ntam sayı (integer)\nondalıklı sayı (double)\nkarmaşık sayı (complex)\n\nMantıksal (logical)\nFaktör (factor)\n\nliste (list)\nmatris (matrix)\nveri seti (data.frame)\ndizi (array)\nFonksiyon (function)"
  },
  {
    "objectID": "04_Nesneler.html#vektör-işlemleri",
    "href": "04_Nesneler.html#vektör-işlemleri",
    "title": "Nesne Oluşturma",
    "section": "Vektör İşlemleri",
    "text": "Vektör İşlemleri\n\nVektör uzunluğu length() fonksiyonu ile vektör türleri ise class(), mode() ya da typeof() fonksiyonları ise tür belirlemek için kullanılmaktadır.\nVektörler bir veya daha fazla elemandan oluşabilmektedir.\n\n\na &lt;- 1  # tek elemandan oluşur.\n# Vektör uzunluğunu öğrenmek icin length() fonksiyonu\nlength(a)\n\n[1] 1\n\n\n\ntek elemanlı vektörler\n\n\nx &lt;- 1\ny &lt;- 1\nx+y\n\n[1] 2\n\n\n\nçok elemanlı vektörler\n\n\nx &lt;- c(3,4,5)\ny &lt;- c(1,2,3)\n# vektör eleman sayıları aynı mı?\nlength(x)==length(y)\n\n[1] TRUE\n\n\n\nx+y\n\n[1] 4 6 8\n\n\n\nx-y\n\n[1] 2 2 2\n\n\n\nx &lt;- 1:9\ny &lt;- c(1,2,3)\n# vektör eleman sayıları farklı mı?\nlength(x)/length(y)\n\n[1] 3\n\n\n\nx+y\n\n[1]  2  4  6  5  7  9  8 10 12\n\n\n\nx/y\n\n[1] 1.0 1.0 1.0 4.0 2.5 2.0 7.0 4.0 3.0\n\n\n\nçok elemanlı vektörler\n\n\nx &lt;- 1:5\ny &lt;- c(1,2)\n# vektör eleman sayıları farklı olduğunda\nlength(x)/length(y)\n\n[1] 2.5\n\n\n\nx + y\n\n[1] 2 4 4 6 6\n\n\n\nx &lt;- 1:10\n\n\nbir vektöründeki verilerin toplanması\n\n\nsum(x)\n\n[1] 55\n\n\n\nbir vektöründeki verilerin çarpılması\n\n\nprod(x)\n\n[1] 3628800\n\n\n\nbir vektöründeki verilerin küçükten büyüğe sıralanması\n\n\nsort(x)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\n\nbir vektörünün elemanların sıralarının tersine çevrilmesi\n\n\nrev(x)\n\n [1] 10  9  8  7  6  5  4  3  2  1\n\n\n\nbir vektöründeki verilerin standart sapmasının hesaplanması\n\n\nsd(x)\n\n[1] 3.02765\n\n\n\nbir vektöründeki en büyük verinin gösterilmesi\n\n\nmax(x)\n\n[1] 10\n\n\n\nbir vektöründeki en küçük verinin gösterilmesi\n\n\nmin(x)\n\n[1] 1\n\n\n\nEn büyük verinin vektörün kaçıncı elemanı olduğunun gösterilmesi\n\n\nwhich.max(x)\n\n[1] 10\n\n\n\nEn küçük verinin vektörün kaçıncı elemanı olduğunun gösterilmesi\n\n\nwhich.min(x)\n\n[1] 1"
  },
  {
    "objectID": "04_Nesneler.html#indeksler",
    "href": "04_Nesneler.html#indeksler",
    "title": "Nesne Oluşturma",
    "section": "Indeksler",
    "text": "Indeksler\n\nVektörlerden eleman sırası, isim ve mantıksal operatörler olmak üzere üç farklı yolla eleman seçilebilir.\n\n\nad  &lt;-  c(\"Ali\",\"Elif\",\"Su\",\"Deniz\",\"Aras\",\n          \"Berk\",\"Can\",\"Ece\",\"Efe\",\"Arda\")\n\n\nad vektörünün 1. elemanı\n\n\nad[1]\n\n[1] \"Ali\"\n\n\n\nad vektörünün 5. elemanını yazdıracak kodu oluşturunuz.\n\n\n\nBuraya bakmadan önce kendin denemelisin!\nad[5]\n\n\n[1] \"Aras\"\n\n\n\nad vektörünün son elemanını yazdıracak kodu oluşturunuz.\n\n\n\nBuraya bakmadan önce kendin denemelisin!\nad[10]\n\n\n[1] \"Arda\"\n\n\n\nad vektörünün son elemanını yazdıracak kodu vektörün 10 elemanlı olduğunu bilmediğiniz de ne yaparsınız?\n\n\n\nBuraya bakmadan önce kendin denemelisin!\nad[length(ad)]\n\n\n[1] \"Arda\"\n\n\n\nVektörün sadece 1., 5. 8. elemanının yazdıracak kodu oluşturunuz.\n\n\n\nBuraya bakmadan önce kendin denemelisin!\nad[c(1,5,8)]\n\n\n[1] \"Ali\"  \"Aras\" \"Ece\" \n\n\n\nVektörün sadece 1. elemanının hariç tutacak kodu oluşturunuz.\n\n\n\nBuraya bakmadan önce kendin denemelisin!\nad[-1]\n\n\n[1] \"Elif\"  \"Su\"    \"Deniz\" \"Aras\"  \"Berk\"  \"Can\"   \"Ece\"   \"Efe\"   \"Arda\" \n\n\n\nVektörün 1. ve 5. elemanının hariç tutacak kodu oluşturunuz\n\n\n\nBuraya bakmadan önce kendin denemelisin!\nad[-c(1,5)]\n\n\n[1] \"Elif\"  \"Su\"    \"Deniz\" \"Berk\"  \"Can\"   \"Ece\"   \"Efe\"   \"Arda\" \n\n\n\nVektörün son üç elemanını yazdıracak kodu oluşturunuz\n\n\n\nBuraya bakmadan önce kendin denemelisin!\nad[(length(ad)-2):length(ad)]\n\n\n[1] \"Ece\"  \"Efe\"  \"Arda\""
  },
  {
    "objectID": "04_Nesneler.html#vektöre-eleman-eklenmesi",
    "href": "04_Nesneler.html#vektöre-eleman-eklenmesi",
    "title": "Nesne Oluşturma",
    "section": "Vektöre eleman eklenmesi",
    "text": "Vektöre eleman eklenmesi\n\n\nBuraya bakmadan önce kendin denemelisin!\nad[11] &lt;- \"Asu\"; ad\n\n\n [1] \"Ali\"   \"Elif\"  \"Su\"    \"Deniz\" \"Aras\"  \"Berk\"  \"Can\"   \"Ece\"   \"Efe\"  \n[10] \"Arda\"  \"Asu\"  \n\n\n\nvektöre birden fazla eleman eklenmesi\n\n\n\nBuraya bakmadan önce kendin denemelisin!\nad[12:13] &lt;- c(\"Ahu\",\"Han\"); ad\n\n\n [1] \"Ali\"   \"Elif\"  \"Su\"    \"Deniz\" \"Aras\"  \"Berk\"  \"Can\"   \"Ece\"   \"Efe\"  \n[10] \"Arda\"  \"Asu\"   \"Ahu\"   \"Han\"  \n\n\n\nVektörün ortasına eleman eklenmesi append() fonksiyonu ile yapılabilir. Fonksiyon yardım sayfasını inceleyiniz.\n\n\n\nBuraya bakmadan önce kendin denemelisin!\n(ad &lt;- append(ad, \"Taha\", after = 3))\n\n\n [1] \"Ali\"   \"Elif\"  \"Su\"    \"Taha\"  \"Deniz\" \"Aras\"  \"Berk\"  \"Can\"   \"Ece\"  \n[10] \"Efe\"   \"Arda\"  \"Asu\"   \"Ahu\"   \"Han\"  \n\n\n\nya da c() fonksiyonu ile yapılabilir.\n\n\n\nBuraya bakmadan önce kendin denemelisin!\nad &lt;- c(ad[1:5],\"Selim\",ad[7:length(ad)]); ad\n\n\n [1] \"Ali\"   \"Elif\"  \"Su\"    \"Taha\"  \"Deniz\" \"Selim\" \"Berk\"  \"Can\"   \"Ece\"  \n[10] \"Efe\"   \"Arda\"  \"Asu\"   \"Ahu\"   \"Han\""
  },
  {
    "objectID": "04_Nesneler.html#alıştırma",
    "href": "04_Nesneler.html#alıştırma",
    "title": "Nesne Oluşturma",
    "section": "Alıştırma",
    "text": "Alıştırma\n\n10 kişiden oluşan bir gruptaki kişilerinin boy ve kilo ölçümleri için ise aşağıdaki vektör oluşturulmuştur.\n\n\nad  &lt;-  c(\"Ali\",\"Elif\",\"Su\",\"Deniz\",\"Aras\",\n          \"Berk\",\"Can\",\"Ece\",\"Efe\",\"Arda\")\nboy &lt;- c(160,165,170,155,167,162,169,158,160,164)\nkilo &lt;-c(50,55,57,50,48,65,58,62,45,47)\n\n\nEğer elimizdeki vektör isimlendirilmiş bir vektör ise eleman seçimini isimle de yapabiliriz.\n\n\n#isimsiz boy vektoru\nnames(boy) # names() fonksiyonu ile isimlendirme yapılabilir.\n\nNULL\n\n\n\nad vektörünü boy vektörü ile isimlendirirken nasıl kullanabiliriz?\n\n\nnames(boy) &lt;- ad\nboy\n\n  Ali  Elif    Su Deniz  Aras  Berk   Can   Ece   Efe  Arda \n  160   165   170   155   167   162   169   158   160   164 \n\n\n\nArda’nın boyunu isimlendirilmiş vektörü kullanarak boy[\"Arda\"] ile yazdırırsınız\n\n\nboy[\"Arda\"]\n\nArda \n 164"
  },
  {
    "objectID": "04_Nesneler.html#örüntülerle-vektör-oluşturma",
    "href": "04_Nesneler.html#örüntülerle-vektör-oluşturma",
    "title": "Nesne Oluşturma",
    "section": "Örüntülerle Vektör Oluşturma",
    "text": "Örüntülerle Vektör Oluşturma\n\nVektör oluşturmanın farklı yolları bulunmaktadır. En basit yolu iki nokta \":\" operatörünü kullanmaktır.\n\n\nrakamlar &lt;- 0:9\nrakamlar\n\n [1] 0 1 2 3 4 5 6 7 8 9\n\n\n\nbüyükten küçüğe rakamlardan vektör oluşturulması\n\n\nrakamlar &lt;- 9:0\nrakamlar\n\n [1] 9 8 7 6 5 4 3 2 1 0\n\n\n\nseq()\n\nBelirli bir kurala göre sayı dizileri oluşturmak için ise seq(), rep() ve paste() fonksiyonlarından yararlanılabilir. İlk olarak bu fonksiyonların yardım sayfalarını inceleyelim.\n1’den 10’a kadar birer birer artan sayılardan dizi oluşturulacak kodu oluşturunuz.\nBir önceki işlemi argümansız olarak oluşturunuz.\nAynı çıktıyı tek bir argümanla elde edebilir misiniz?\nlength argümanını kullanarak aşağıdaki çıktıyı oluşturacak kodu oluşturunuz.\n\n\n\nBuraya bakmadan önce kendin denemelisin!\nseq(from = 1, to=3, length = 6)\n\n\n[1] 1.0 1.4 1.8 2.2 2.6 3.0\n\n\n\nby argümanını ile artış miktarını kullanarak aşağıdaki çıktıyı oluşturacak kodu oluşturunuz.\n\n\n\nBuraya bakmadan önce kendin denemelisin!\nseq(from=1,to=3,by=0.5)\n\n\n[1] 1.0 1.5 2.0 2.5 3.0\n\n\n\nBelirli bir aralıkta kaç elemanın yer alacağını length.out argümanı kullanarak aşağıdaki çıktıyı oluşturacak kodu oluşturunuz.\n\n\n\n[1] 1.0 1.5 2.0 2.5 3.0\n\n\n\n\nrep()\nrep() fonksiyonu için örnekler\n\n# üç elemanlı bir vektörün üç kere tekrar ettirilmesi\nrep(c(3,4,5), 3)\n\n[1] 3 4 5 3 4 5 3 4 5\n\n\n\n# rakamların üç kere tekrar ettirilmesi\nrep(0:9, times = 3) \n\n [1] 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\n\n\n\na &lt;- c(3,5,7) vektörünü kullanarak aşağıdaki çıktıyı elde edecek kodu hazırlayınız.\n\n\n\nBuraya bakmadan önce kendin denemelisin!\na &lt;- c(3,5,7)\nrep(a, each = 3) \n\n\n[1] 3 3 3 5 5 5 7 7 7\n\n\n\na &lt;- c(3,5,7) vektörünü kullanarak aşağıdaki çıktıyı elde edecek kodu hazırlayınız.\n\n\n\nBuraya bakmadan önce kendin denemelisin!\na &lt;- c(3,5,7)\nrep(a,each=3,times=3) \n\n\n [1] 3 3 3 5 5 5 7 7 7 3 3 3 5 5 5 7 7 7 3 3 3 5 5 5 7 7 7\n\n\n\nÇıktıyı elde edecek kodu hazırlayınız.\n\n\n\nBuraya bakmadan önce kendin denemelisin!\nrep(1:4,c(2,2,2,2))\n\n\n[1] 1 1 2 2 3 3 4 4\n\n\n\nÇıktıyı elde edecek kodu hazırlayınız.\n\n\n\nBuraya bakmadan önce kendin denemelisin!\nrep(1:3,1:3)\n\n\n[1] 1 2 2 3 3 3\n\n\n\n\npaste()\n\npaste()fonksiyonu çıktısı her zaman için karakterdir.\n\n\npaste(1:4) # çıktısı karakterdir\n\n[1] \"1\" \"2\" \"3\" \"4\"\n\n\n\nclass(paste(1:4))\n\n[1] \"character\"\n\n\n\nÇıktıyı elde edecek kodu tamamlayınız paste(\"test\",...)\n\n\n\nBuraya bakmadan önce kendin denemelisin!\npaste(\"test\",1:10) \n\n\n [1] \"test 1\"  \"test 2\"  \"test 3\"  \"test 4\"  \"test 5\"  \"test 6\"  \"test 7\" \n [8] \"test 8\"  \"test 9\"  \"test 10\"\n\n\n\nÇıktıyı elde edecek kodu tamamlayınızpaste(\"test\",1:10,\"...\",sep=\"_\")\n\n\n\nBuraya bakmadan önce kendin denemelisin!\npaste(\"test\",1:10,\"puan\",sep=\"_\")\n\n\n [1] \"test_1_puan\"  \"test_2_puan\"  \"test_3_puan\"  \"test_4_puan\"  \"test_5_puan\" \n [6] \"test_6_puan\"  \"test_7_puan\"  \"test_8_puan\"  \"test_9_puan\"  \"test_10_puan\"\n\n\n\nÇıktıyı elde edecek kodu tamamlayınız paste(\"test\",c(\"A\",\"B\",\"C\",\"D\",...))\n\n\n\nBuraya bakmadan önce kendin denemelisin!\npaste(\"test\",c(\"A\",\"B\",\"C\",\"D\",1:4)) \n\n\n[1] \"test A\" \"test B\" \"test C\" \"test D\" \"test 1\" \"test 2\" \"test 3\" \"test 4\""
  },
  {
    "objectID": "04_Nesneler.html#rasgele-veri-oluşturma",
    "href": "04_Nesneler.html#rasgele-veri-oluşturma",
    "title": "Nesne Oluşturma",
    "section": "Rasgele Veri Oluşturma",
    "text": "Rasgele Veri Oluşturma\n\nFarklı fonksiyonlarla rastgele veri üretilebilir. Örneğin 0-100 arasında 20 farklı değer elde edilmek istenilsin. Bunu yapmak için sample(),runif() ya da rnorm() fonksiyonlarından yararlanılabilir.\n\n\nsample(0:100,5)\n\n[1]  2 11 87 98 36\n\n\n\nrunif(10,  0, 5)\n\n [1] 4.2830482 2.1952705 3.5143706 2.2143867 2.6302775 1.9796669 4.0590182\n [8] 0.7066806 3.4480888 4.5175810\n\n\n\nrnorm(10,50,5)\n\n [1] 49.73868 51.08875 49.90501 50.56473 40.79010 52.87806 44.89653 50.20001\n [9] 48.00337 45.49998\n\n\n\nKullanılan üç fonksiyonun da yardım sayfalarını ve kullanım amaçlarını inceleyiniz."
  },
  {
    "objectID": "04_Nesneler.html#alıştırma-1",
    "href": "04_Nesneler.html#alıştırma-1",
    "title": "Nesne Oluşturma",
    "section": "Alıştırma",
    "text": "Alıştırma\nBKI vücut ağırlığınızın metre cinsinden boy uzunluğunun karesine bölünmesi ile elde edilmektedir. Her bir bireye ait BKI değerini hesaplayınız. BKI değerlerinin ortalaması kaçtır (iki ondalığa yuvarlayınız)?\n\nad  &lt;-  c(\"Ali\",\"Elif\",\"Su\",\"Deniz\",\"Aras\",\n          \"Berk\",\"Can\",\"Ece\",\"Efe\",\"Arda\")\nboy &lt;- c(160,165,170,155,167,162,169,158,160,164)\nkilo &lt;- c(55,55,57,50,48,65,58,62,45,47)\n\n\n\nBuraya bakmadan önce kendin denemelisin!\n# BKI  hesaplanması\nboy_m  &lt;- boy/100\nBKI &lt;- kilo/( boy_m * boy_m)\nround(mean(BKI),2)\n\n\n[1] 20.44"
  },
  {
    "objectID": "06_Rmarkdown.html",
    "href": "06_Rmarkdown.html",
    "title": "Rapor Hazırlama",
    "section": "",
    "text": "Bu bölümde kullanacağımız paketler şunlardır.\n\n# bu bölüm için gerekli paketler\nlibrary(tidyverse) # çeşitli veri manipülasyon fonksiyonları\nlibrary(knitr) # tablo ve görüntü gösterimi için\nlibrary(kableExtra) # tabloları şekillendirmek için\nlibrary(papaja) # APA tarzı tablolar için\nlibrary(gt) # süslü tablolar için\nlibrary(DT) # etkileşimli tablolar için\n\n🔗İndir R Markdown Cheat Sheet.\n🔗İndir R Markdown Cheat Sheet TURKCE\n\n🔗R markdown sunusu\n\n\n🔗markdown hatırlatıcı notlar\n\n\n\nBir rapor hazırladığınızı düşünün\n\niçinde analiz sonuçları olan tablolar\ngrafikler ve görsel olsun\nbu raporu güncellemeniz gerektiğinde veri seti, grafikler, analizler başka dizinlerde olabilir.\nTekrarlanabilir raporlar, tüm analizleri gerçekleştirmek ve tabloları oluşturmak için gereken kodla birlikte rapor metnini tek bir belgede bir araya getirmektir.\nBu, başlangıçta biraz fazladan çaba gerektirse de, herhangi bir değişiklik olduğunda tek bir düğmeye basarak tüm raporunuzu güncellemenizi sağlayarak size fazlasıyla geri ödeme yapacaktır.\nAraştırmalar ayrıca, bilimsel literatürdeki makalelerin çoğunda olmasa bile birçoğunda raporlama hataları olduğunu göstermektedir. Tekrarlanabilir raporlar, transkripsiyon ve yuvarlama hatalarını önlemeye yardımcı olur.\nRapor daha sonra orijinal formattan HTML, word ve ya PDF gibi daha taşınabilir başka bir formata “derlenir”. Bu, örneğin Microsoft Excel’de veya SPSS gibi bir istatistik programında bir grafik oluşturup ardından bunu Microsoft Word’e yapıştırdığınız geleneksel kesme ve yapıştırma yaklaşımlarından farklıdır.\n\n\n\n\n\nİlk olarak, organize olmamız gerekiyor. RStudio’daki projeler, bir proje için ihtiyaç duyduğunuz tüm dosyaları gruplandırmanın bir yoludur. Çoğu proje komut dosyalarını, veri dosyalarını ve komut dosyası veya görüntüler tarafından oluşturulan PDF raporu gibi çıktı dosyalarını içerir.\n\n\n\n\nBilgisayarınızın dosya sistemi, hem dosyaları hem de “alt dizinleri” içeren büyük dizin gibidir. Bir dosyanın konumunu adıyla ve içinde bulunduğu tüm dizinlerin adlarıyla belirtebilirsiniz.\nÖrneğin, Kubra Masaüstünde report.Rmd adında bir dosya arıyorsa, tam dosya yolunu şu şekilde belirtebilir: /Users/Kubra/Desktop/report.Rmd , çünkü Masaüstü dizini, tüm dosya sisteminin tabanında bulunan Kullanıcılar/Users dizininin içindeki Kubra dizininin içindedir. Bu dosya masaüstünüzde olsaydı, kullanıcı dizininizin adı da Kubra değilse muhtemelen farklı bir yola sahip olurdunuz. Şu anda oturum açmış olan kişinin kullanıcı dizinini temsil etmek için ~ kısayolunu da kullanabilirsiniz: ~/Desktop/report.Rmd.\n\n\n\n\n\nTüm dosyalarınızı nereye koymalısınız? Genellikle tek bir proje için tüm komut dosyalarınızın ve veri dosyalarınızın bilgisayarınızdaki tek bir klasörde, o projenin çalışma dizininde olmasını istersiniz. Dosyaları bu ana proje dizini içindeki alt dizinlerde düzenleyebilirsiniz, örneğin tüm ham veri dosyalarını data/import adlı bir dizine koyabilir ve tüm görüntü dosyalarını images adlı bir dizine kaydedebilirsiniz.\nKodunuz, uygun biçimi kullanarak yalnızca üç tür konumdaki dosyalar kullanılmalıdır.\n\n\n\n\nYer\nÖrnek\n\n\n\n\nweb\n“https://atalay-k.github.io/OLC731/import/veri1.txt”\n\n\ndizin içinde\n“veri1.txt”\n\n\nalt dizin içinde\n“import/veri1.txt”\n\n\n\n\n\n\n\n\n\n!!!\n\n\n\nBir komut dosyasında asla çalışma dizininizi ayarlamayın veya değiştirmeyin.\n\n\n\nR Markdown dosyaları otomatik olarak .Rmd dosyasının bulunduğu dizini çalışma dizini olarak kullanacaktır.\nKodunuz çalışma dizininizin bir alt dizinindeki bir dosyaya ihtiyaç duyuyorsa (örneğin, import/veri1.txt), çalışma dizinini başka bir konuma veya bilgisayara taşıdığınızda erişilebilir olması için dosyayı göreli bir yol kullanarak yükleyin:\n\n\ndat &lt;- read.table(\"import/veri1.txt\")  # dogru\n\nBu dosyayı aşağıdaki gibi mutlak yol/adres ile yüklemeyin🙅:\n\ndat &lt;- read.table(\"c:/Users/Kubra/Desktop/OLC731/import/veri1.txt\")  # yanlıs\n\n\nÖrnek veriyi düzgün aktarmak aşağıdaki kodla sağlanır.\n\n\n(veri1 &lt;- read.table(\"import/veri1.txt\",\n                    header= TRUE,\n                    sep= \";\",\n                    dec= \",\"))\n\n   no m_1  m_2 m_3  m_4 m_5\n1 522  12 14.0  16 20.0  10\n2 222   5   NA  20 10.0  10\n3 454   5 10.2   6  4.0  10\n4 567  10 20.0  NA 12.2  20\n\n\n\n\n\n\n\n\n!!!\n\n\n\nAyrıca, Windows’a özgü geriye doğru eğik çizgi kullanma kuralının aksine, ileriye doğru eğik çizgi kullanma kuralına dikkat edin. Bu, dosyalara yapılan referansların işletim sistemlerinden bağımsız olarak herkes için çalışmasını sağlamak içindir.\n\n\n\n\n\nDosyaları, hem insanların hem de bilgisayarların kolayca bulabileceği şekilde adlandırın. İşte bazı önemli ilkeler:\n\ndosya ve dizin adları yalnızca harf, rakam, tire ve alt çizgi içermeli, dosya adı ve uzantısı arasında nokta (.) olmalıdır (bu boşluk olmadığı anlamına gelir!)\nBüyük harf kullanımı konusunda tutarlı olun (hatırlamayı kolaylaştırmak için bir kural belirleyin, örneğin her zaman küçük harf kullanın)\ndosya adının bölümlerini ayırmak için alt çizgi (_) ve bir bölümdeki sözcükleri ayırmak için tire (-) kullanın\ndosyaları mantıklı bir sırayla alfabetik hale getiren ve aradığınız dosyayı bulmanızı kolaylaştıran bir kalıpla adlandırın\nbir dosya adını listenin en üstüne taşımak için önüne alt çizgi ekleyin veya sıralarını kontrol etmek için tüm dosyaların önüne sayı ekleyin\ntarihler için YYYY-MM-DD biçimini kullanın, böylece kronolojik sıraya göre sıralanırlar\n\nÖrneğin, bu dosya adları tam bir karmaşa:\n\nVeri (Katilimci) 04-15.xls\nfinal raporu2.doc\nKatilimci Veri Nisan 12.xls\n(\"proje notlari\nAnket Veri Kasim 15.xls\nrapor.doc\nrapor son.doc\n\nBenzer dosyaların aynı yapıya sahip olması ve dosyaları taramanın veya ilgili dosyaları bulmak için kod kullanmasının kolay olması için dosyaları yapılandırabilirsiniz.\n\nproje-notlari\nveri_katilimci_2021-04-12.xls\nveri_katilimci_2021-04-15.xls\nveri_anket_2021-04-15.xls\nrapor_v1.doc\nrapor_v2.doc\nrapor_v3.doc\n\n\n\n\n\n\n\n!!!\n\n\n\nYukarıdaki dosyaları adlandırmak için başka yollar düşünün. Kendi proje dosyalarınızdan bazılarına bakın ve neleri geliştirebileceğinizi görün.\n\n\n\nBir kodlama stilinizin olması iyi olabilir.\n\n\n\n\n\nArtık dosya sisteminin nasıl çalıştığını ve komut dosyalarının bunlara erişmesini kolaylaştırmak için nesneleri nasıl adlandıracağımızı anladığımıza göre, projemizi yapmaya hazırız.\nÖncelikle, bu sınıf için tüm materyallerinizi tutacağınız yeni bir dizin oluşturun (benimki OLC731 adınında). Bu dizini Global Options’ın general bölümü altında varsayılan çalışma dizini olarak ayarlayabilirsiniz. Bu, bir projede çalışmıyorsanız dosyaların varsayılan olarak buraya kaydedileceği anlamına gelir.\n\n\n\n\n\n\n\n!!!\n\n\n\nBu dizin OneDrive’daysa veya tam dosya yolu özel karakterler içeriyorsa ya da bazı Windows makinelerinde 260 karakterden fazlaysa bazen sorunlara neden olabilir\n\n\n\nArdından, OLC731 adında yeni bir proje oluşturmak için File menüsü altında New Project... öğesini seçin. Yeni oluşturduğunuz dizinin içine kaydettiğinizden emin olun. RStudio kendini yeniden başlatacak ve çalışma dizini olarak bu yeni proje dizini ile açılacaktır.\n\nProje dizininin içeriğini görmek için sağ alt bölmedeki Files sekmesine tıklayın. Tüm proje bilgilerini içeren OLC731.Rproj adlı bir dosya göreceksiniz, projeyi açmak için üzerine çift tıklayabilirsiniz.\n\n\n\n\n\n\n!!!\n\n\n\nAyarlarınıza bağlı olarak, özel kullanıcı ayarlarınızı içeren .Rproj.user adlı bir dizin de görebilirsiniz. Bu ve nokta ile başlayan diğer “görünmez” dosyaları yok sayabilirsiniz.\n\n\n\n\n\n\n\nBu derste, bir içindekiler tablosu, uygun başlıklar, kod parçaları, tablolar, resimler, satır içi R ve bir kaynakça içeren bir R Markdown belgesi oluşturmayı öğreneceğiz.\n\n\n\n\n\n\n\n!!!\n\n\n\nR Markdown’a çok benzeyen quarto adında yeni bir tür tekrarlanabilir rapor formatı var. Bu derste quarto kullanmayacağız çünkü aynı anda hem quarto hem de R Markdown öğreniyorsanız kafa karıştırıcı olabilecek birkaç küçük farkı var, ancak R Markdown’ı öğrendikten sonra quarto’yu çok kolay bir şekilde öğrenebilirsiniz.\n\n\n\nTekrar üretilebilir raporlar oluşturmak için metin ve kodun karıştırılmasını sağlayan R Markdown kullanacağız. Yeniden üretilebilir bir komut dosyası, kod bloklarında kod bölümleri içerecektir. Bir kod bloğu arka arkaya üç backtick sembolü ile başlar ve biter, küme parantezleri arasında kod hakkında bazı bilgiler bulunur, örneğin {r chunk-name, echo=FALSE} (bu kodu çalıştırır, ancak derlenen belgede kod bloğunun metnini göstermez). Kod bloklarının dışındaki metin, başlıklar, paragraflar, listeler, kalınlaştırma ve bağlantılar gibi biçimlendirmeyi belirtmenin bir yolu olan markdown ile yazılır. Örnek Dosyayı beraber inceleyelim.\nBir şablondan yeni bir R Markdown dosyası açarsanız, içinde birkaç kod bloğu bulunan örnek bir belge görürsünüz. Bir R Markdown (Rmd) belgesinden HTML veya PDF raporu oluşturmak için belgeyi derlersiniz. Bir belgeyi derlemeye RStudio’da örme denir. Dosyanızı bir rapora derlemek için üzerine tıkladığınız, içinden iğneler geçen bir iplik yumağına benzeyen bir düğme vardır.\n\n\n\n\n\n\n\n!!!\n\n\n\nFile &gt; New File &gt; R Markdown... menüsünden yeni bir R Markdown dosyası oluşturun. Başlığı ve yazarı değiştirin, dosyayı Ornek1.Rmd olarak kaydedin, ardından bir html dosyası oluşturmak için ör düğmesine tıklayın.\n\n\n\n\n\n🔗 YAML başlığı çeşitli seçenekleri ayarlayabileceğiniz bölümdür.\n\n---\ntitle: \"Demo\"\nauthor: \"Kubra\"\noutput:\n  html_document:\n    toc: true\n    toc_float:\n      collapsed: false\n      smooth_scroll: false\n      number_sections: false\n---\n\n\n\n\n\n\n!!!\n\n\n\nSeçeneklerin ne işe yaradığını görmek için değerleri false tan true ya değiştirmeyi deneyin.\n\n\n\nVarsayılan temalar şunlardır: default, cerulean, cosmo, darkly, flatly, journal, lumen, paper, readable, sandstone, simplex, spacelab, united ve yeti. Linkten 🔗daha fazla temayı inceleyebilirsiniz..\n\n\n\n\n\nVarsayılan şablonu kullanarak RStudio’da yeni bir R Markdown dosyası oluşturduğunuzda, otomatik olarak bir kurulum blogu oluşturulur.\n\n\nknitr::opts_chunk$set(echo = TRUE)\n\n\nKod parçaları için daha fazla varsayılan seçeneği buradan ayarlayabilirsiniz. Olası seçeneklerin açıklamaları için knitr seçenekleri belgelerine bakın. knitr dokumanı\n\n\nknitr::opts_chunk$set(\n  fig.width  = 8,\n  fig.height = 5,\n  fig.path   = 'images/',\n  echo       = FALSE,\n  warning    = TRUE,\n  message    = FALSE,\n  cache      = FALSE\n)\n\nYukarıdaki kod aşağıdaki seçenekleri ayarlar:\n\nfig.width = 8 : varsayılan şekil genişliği 8 inçtir (bunu tek tek şekiller için değiştirebilirsiniz)\nfig.height = 5 : varsayılan şekil yüksekliği 5 inçtir\nfig.path = ‘images/’ : şekiller “images” dizinine kaydedilir\necho = FALSE : işlenen belgede kod parçalarını gösterme\nwarning = FALSE : herhangi bir işlev uyarısı gösterme\nmessage = FALSE : herhangi bir işlev mesajı gösterme\ncache = FALSE : her örgü ördüğünüzde tüm görüntüleri ve nesneleri oluşturmak için tüm kodu çalıştırın (zaman alıcı kodunuz varsa TRUE olarak ayarlayın) Konsola str(knitr::opts_chunk$get()) yazarak geçerli kod bloğu seçeneklerinin bir listesini bulun.\n\nİhtiyacınız olan paketleri library()kullanarak da bu bloğunuza ekleyebilirsiniz. Genellikle bir komut dosyası üzerinde çalışırken, başka bir eklenti paketi yüklemeniz gerektiğini fark edersiniz. library(...) çağrısını kodun en altına gömmeyin. En üste koyun, böylece kullanıcı hangi paketlerin gerekli olduğuna dair genel bir fikir elde edilir.\n\n\n\n\n\n\n!!!\n\n\n\ntidyverse paketinden fonksiyon kullanacağız, bu yüzden kurulum bloğunuza yükleyin.\n\n\n\n\n\n\nBir içindekiler tablosu (toc) eklerseniz, bu tablo belge başlıklarınızdan oluşturulur. Markdown’daki başlıklar, başlık başlığının önüne bir veya daha fazla hash (#) eklenerek oluşturulur.\nKendi analiz komut dosyalarınızı geliştirirken aşağıdaki yapıyı kullanın:\nKullanmanız gereken tüm eklenti paketlerini yükleyin\nherhangi bir özel fonksiyon tanımlayın\nbirlikte çalışacağınız verileri yükleyin veya simüle edin\nkaydetmeniz gereken her şeyi kaydedin\n\n\n\n\n\n\n\n!!!\n\n\n\nVarsayılan metni silin ve başlıklar ve alt başlıklar oluşturarak belgenize biraz yapı ekleyin. Bazı verileri yükleyeceğiz, bir özet tablo oluşturacağız, grafik çizeceğiz ve analiz edeceğiz.\n\n\n\n\n\n\nMetninize eklemek için görüntüler, tablolar veya hesaplamalar oluşturan ve görüntüleyen kod parçaları ekleyebilirsiniz. Bazı verileri yükleyerek başlayalım.\nİlk olarak, belgenizde bir kod bloğu oluşturun. Bu kod iris veri setini yükler.\n\n\nlibrary(datasets)\ndata(iris)\n\n\n\n\n\nKod blokları içine hash sembolü (#) ile yorum ekleyebilirsiniz. R yorumlayıcısı, hash’ten satır sonuna kadar olan karakterleri yoksayacaktır.\n\n\nn &lt;- nrow(iris) # toplam satır sayısı\nmu &lt;- mean(iris$Petal.Length)  # taç yaprak uzunluğu ortalaması\nsd &lt;- sd(iris$Petal.Length) # taç yaprak uzunluğu standart sapması\n\n\nsimule_deger &lt;- rnorm(n, mu, sd)\n\n\nBir kod parçasını, özellikle kod rapor metninde açıklanmamışsa, orada ne yaptığınızı açıklayan bir yorumla başlatmak genellikle iyi bir uygulamadır.\nNesnelerinizi açık bir şekilde adlandırırsanız, genellikle açıklayıcı yorumlar eklemeniz gerekmez. Örneğin, yukarıdaki üç nesneyi n_iris, ort_petal ve sd_petal olarak adlandırmış olsaydım, yorumları atlardım.\nYorumların bir başka kullanımı da çalıştırmak istemediğiniz ancak silmek de istemediğiniz bir kod bölümünü “yorumlamaktır”. Örneğin, bir paketi yüklemek için kullanılan kodu kodunuza dahil edebilirsiniz, ancak kodun her çalıştırıldığında uzun bir yüklemeye zorlamaması için her zaman yorumlamanız gerekir.\n\n\n# install.packages(\"dplyr\")\n# install.packages(\"tidyr\")\n# install.packages(\"ggplot2\")\n\n\n\n\n\n\n\n!!!\n\n\n\nSatırları seçip Cmd-shift-C (Mac) veya Ctrl-shift-C (Windows) yazarak aynı anda birden fazla satıra yorum yazabilir veya yorumu kaldırabilirsiniz.\n\n\n\nKodunuzu iyi bir şekilde yorumlamak biraz sanattır. Bu beceriyi geliştirmenin en iyi yolu, başkalarının kodlarını okumak ve başkalarının kodunuzu incelemesini sağlamaktır.\n\n\n\n\n\nŞimdi setosa ve virginica çiçek türlerinde yaprak uzunluklarını analiz edelim. Önce analiz kodunu çalıştıracağız. Daha sonra makalemizde kullanmak isteyebileceğimiz sayıları değişkenlere kaydedeceğiz ve uygun şekilde yuvarlayacağız. Son olarak, bir sonuçları biçimlendirmek için glue::glue() kullanacağız.\n\n\n# analiz\nlibrary(dplyr)\nsetosa_petal &lt;-filter(iris, Species == \"setosa\") %&gt;%  pull(Petal.Length)\nvirginica_petal &lt;-filter(iris, Species == \"virginica\") %&gt;%  pull(Petal.Length)\npetal_test &lt;-t.test(setosa_petal, virginica_petal)\n\n# rapor edilecek degerleri yorumlama\nt &lt;- petal_test$statistic %&gt;% round(2)\ndf &lt;- petal_test$parameter %&gt;% round(1)\np &lt;- petal_test$p.value %&gt;% round(3)\n# p-değerleri &lt; .001 ata\np_symbol &lt;- ifelse(p &lt; .001, \"&lt;\", \"=\") ## kodun bu kısmı elde edilen p değeri .001'den küçük ise p_symbol değerine &lt;, değil ise = atar.\nif (p &lt; .001) p &lt;- .001 \n\n# sonucları birleştirme\npetal_result &lt;- glue::glue(\"t = {t}, df = {df}, p {p_symbol} {p}\")\n\n\nSonuçları, aşağıdaki gibi görünen satır içi R kodu ile bir paragrafa ekleyebilirsiniz:\n\n virginica çiçeklerinin yaprakları setosa çiçeklerinin yapraklarından uzundur(`r petal_result`).\nvirginica çiçeklerinin yaprakları setosa çiçeklerinin yapraklarından uzundur (t = -49.99, df = 58.6, p &lt; 0.001).\n\n\n\n\n\n\n!!!\n\n\n\nYukarıdaki kod blogunda dplyr paketinin filter() ve pull() fonksiyonları ile yapılan işlemleri subset() fonksiyonu ile yapabilirsiniz. Bunu yapıp öğrenme günlüğünüze ekleyiniz.\n\n\n\n\n\n\nÇalışmaların yöntem bölümüne betimsel bilgiler eklemek istediğimizde\n\n\n\nCode\nozet_tablo &lt;- iris %&gt;%\n  group_by(Species) %&gt;%\n  summarise(\n    n = n(),\n    ortalama = mean(Petal.Length),\n    sd = sd(Petal.Length)\n  )\nozet_tablo\n\n\n# A tibble: 3 × 4\n  Species        n ortalama    sd\n  &lt;fct&gt;      &lt;int&gt;    &lt;dbl&gt; &lt;dbl&gt;\n1 setosa        50     1.46 0.174\n2 versicolor    50     4.26 0.470\n3 virginica     50     5.55 0.552\n\n\n\n\n\n\n\n\n!!!\n\n\n\nYukarıdaki tablo etkileşimli görünümde tibble biçiminde yazdırılacak, ancak ördüğünüzde YAML başlığındaki df_print ayarındaki biçimi kullanacaktır.\n\n\n\nYukarıdaki tabloda, sütun etiketlerini değiştirerek, ortalamaları yuvarlayarak ve bir başlık ekleyerek daha okuyucu dostu hale getirlebilir. Bunun için knitr::kable() işlevini veya tablolarınızı biçimlendirmek için diğer paketlerdeki daha özel fonksiyonlarını kullanabilirsiniz.\n\n\nknitrkableExtrapapajagt\n\n\n\n\nCode\nyeni_ad &lt;- c(\"Çiçek Türü\", \"Frekans\", \"Ortalama\", \"Sd\")\n\nknitr::kable(ozet_tablo,\n             digits = 2,\n             col.names = yeni_ad,\n             caption = \"Petal Uzulukları için Özet Tablo\")\n\n\n\nPetal Uzulukları için Özet Tablo\n\n\nÇiçek Türü\nFrekans\nOrtalama\nSd\n\n\n\n\nsetosa\n50\n1.46\n0.17\n\n\nversicolor\n50\n4.26\n0.47\n\n\nvirginica\n50\n5.55\n0.55\n\n\n\n\n\n\n\nkableExtra paketi çok sayıda seçenek sunar.\n\n\nCode\nlibrary(kableExtra)\n\nkable(ozet_tablo,\n      digits = 2,\n      col.names = c(\"Çiçek Türü\", \"Frekans\", \"Ortalama\", \"Sd\"),\n      caption = \"Petal Uzulukları için Özet Tablo\") |&gt;\n  kable_classic() |&gt;\n  kable_styling(full_width = FALSE, font_size = 20) |&gt;\n  add_header_above(c(\" \" = 2, \"Degerler\" = 2)) |&gt;\n  kableExtra::row_spec(2, bold = TRUE, background = \"lightgrey\")\n\n\n\n\nPetal Uzulukları için Özet Tablo\n\n\n\n\n\n\n\n\n\n\nDegerler\n\n\n\nÇiçek Türü\nFrekans\nOrtalama\nSd\n\n\n\n\nsetosa\n50\n1.46\n0.17\n\n\nversicolor\n50\n4.26\n0.47\n\n\nvirginica\n50\n5.55\n0.55\n\n\n\n\n\n\n\n\n\n\npapaja paketi ile APA formatında tablolar elde edebilirsiniz.\n\n\nCode\npapaja::apa_table(ozet_tablo,\n                  col.names = c(\"Çiçek Türü\", \"Frekans\", \"Ortalama\", \"Sd\"),\n                  caption = \"Petal Uzulukları için Özet Tablo\",\n                  col_spanners = list(\"Means\" = c(3, 4)))\n\n\n\n(#tab:papaja-demo) Petal Uzulukları için Özet Tablo\n\n\nÇiçek Türü\nFrekans\nOrtalama\nSd\n\n\n\n\nsetosa\n50\n1.46\n0.17\n\n\nversicolor\n50\n4.26\n0.47\n\n\nvirginica\n50\n5.55\n0.55\n\n\n\n\n\n\n\ngt paketinde de çok sayıda seçenek bulunmaktadır.\n\n\nCode\nlibrary(gt)\n\ngt(ozet_tablo, caption = \"Petal Uzulukları için Özet Tablo\") |&gt;\n  fmt_number(columns = c(ortalama, sd),\n             decimals = 2) |&gt;\n  cols_label(Species = \"Çiçek Türü\",\n             n = \"Frekans\",\n             ortalama = \"ortalama\",\n             sd = \"sd\") |&gt;\n  tab_spanner(label = \"Degerler\",\n              columns = c(ortalama, sd)) |&gt;\n  opt_stylize(style = 6, color = \"blue\")\n\n\n\n\n\n\n\nPetal Uzulukları için Özet Tablo\n\n\nÇiçek Türü\nFrekans\nDegerler\n\n\nortalama\nsd\n\n\n\n\nsetosa\n50\n1.46\n0.17\n\n\nversicolor\n50\n4.26\n0.47\n\n\nvirginica\n50\n5.55\n0.55\n\n\n\n\n\n\n\n\n\n\n\n\n\nTablo eklemek için diğer bir yol ise elle tablo oluşturmaktadır. Tablo oluşturulmak istendiğinde aşağıdaki şekilde eklenebilir.\n\n| col1   |col2    |  \n|:------:|:------:|\n|içerik1 |içerik2 |\n\nYukarıdaki içerik örüldüğünde aşağıdaki tablo oluşmaktadır.\n\n\n\ncol1\ncol2\n\n\n\n\niçerik1\niçerik2\n\n\n\nTablo eklemek için Rstudio yer alan Visual özelliğini kullanmakta pratiktir. Hazırladığınız markdown dosyasını Visual modunda açtığınızda Table menüsünde tablo oluşturma, satır sütun ekleme, hizalama gibi işlemler menü aracılığı ile yapılabilimektedir.\n\n\n\n\n\nŞekil başlığının kod bloğında nasıl biçimlendirildiğine dikkat edin.\n\n\n\nCode\ndat &lt;- subset(iris, Species != \"versicolor\")\ndat$Species &lt;- factor(dat$Species)\n\nggplot(dat, aes(Species, Petal.Length)) +\n  geom_boxplot(width = 0.25,\n               show.legend = FALSE)  +\n  labs(x = \"\", y = \"Petal Uzunluğu\") +\n  theme(text = element_text(size = 20, family = \"Times\"))\n\n\n\n\n\nPetal Uzunlukları ve Türler\n\n\n\n\n\n\n\n\n\n\n!!!\n\n\n\nSon satır varsayılan metin boyutunu ve yazı tipini değiştirir, bu da bir derginin gereksinimlerini karşılayan şekiller oluşturmak için yararlı olabilir.\n\n\n\nKodlarla oluşturamadığınız şekilleri de resim dosyaları ile dökümana ekleyebilirsiniz:\n\n![neden R](https://miro.medium.com/v2/resize:fit:720/format:webp/1*TX77o_zJ4zbpJ3vN4BkLsg.jpeg){style=\"width: 50%\"}\n\n\n\nneden R\n\n\n\n\n\n\nMarkdown bölümler arasında bağlantılar içeren daha uzun raporlar oluşturmanıza yardımcı olur.\nBaşlığı olan tüm şekillere veya tablolara otomatik olarak şekil ve tablo numaraları ekler ve bunlara referansla bağlantı vermenize olanak sağlar.\nTablolara ve şekillere bağlantılar oluşturmak için, şekillerinizi veya tablolarınızı oluşturan kod bloklarınız adlandırmanız ve ardından satır içi kodlamanızda bu adları çağırmanız gerekir:\n\nBakınız Tablo \\@ref(tab:tablo1) or Sekil \\@ref(fig:sekil1).\n\n\n\n\n\n\n!!!\n\n\n\nKod blok adları yalnızca harf, rakam ve tire içerebilir. Boşluk veya alt çizgi gibi başka karakterler içeriyorlarsa, referanslama çalışmayacaktır.\n\n\nBaşlıklarınızı {#} ile adlandırarak da raporunuzun farklı bölümlerine bağlantı verebilirsiniz:\n# Baslık 1 {#baslık-1}\n\n## Baslık 2 {#baslık-2}\n\nBakınız Bolum \\@ref(baslık-1) and Bolum \\@ref(baslık-2)\n\nAşağıdaki kod, ggplot2 paketindeki diamonds veri seti kullanarak tam bir raporda metnin şekillere veya tablolara nasıl bağlanacağını göstermektedir - bu belgeyi şimdi oluşturmak için aşağıdaki kodları kullanın. Tablo ve şekillere referans verme özelliği bookdown formatına aittir. output seçeneğinin sadece html olarak kalması ile bu özellikten yararlanılamamaktadır.\n\n---\ntitle: \"referans verme\"\nauthor: \"Kubra\"\ndate: \"`r Sys.Date()`\"\noutput: bookdown::html_document2\n---\n\n# ORNEK DOSYA\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = FALSE,\n                      message = FALSE,\n                      warning = FALSE)\nlibrary(tidyverse)\nlibrary(kableExtra)\ntheme_set(theme_minimal())\n```\n\nPırlanta ücretleri çeşitli faktörlere bağlıdır\n\n-   cut (Bakınız Tablo \\@ref(tab:kesim))\n-   colour (Bakınız Tablo \\@ref(tab:renk))\n-   clarity (Bakınız Şekil \\@ref(fig:parlaklik))\n-   carats (Bakınız Şekil \\@ref(fig:karat))\n-   Bakınız Bolum \\@ref(sonuclar) sonuclar icin\n\n## Tablolar\n\n### Kesim\n\n```{r kesim}\ndiamonds %&gt;%\n  group_by(cut) %&gt;%\n  summarise(avg = mean(price),\n            .groups = \"drop\") %&gt;%\n  kable(digits = 0, \n        col.names = c(\"Cut\", \"Average Price\"),\n        caption = \"Kesime göre ortalama pırlanta fiyatı.\") %&gt;%\n  kable_material()\n```\n\n### Renk\n\n```{r renk}\ndiamonds %&gt;%\n  group_by(color) %&gt;%\n  summarise(avg = mean(price),\n            .groups = \"drop\") %&gt;%\n  kable(digits = 0, \n        col.names = c(\"Cut\", \"Average Price\"),\n        caption = \"Renge göre ortalama pırlanta fiyatı.\") %&gt;%\n  kable_material()\n```\n\n## Grafikler\n\n### Parlaklık\n\n```{r parlaklik, fig.cap = \"Parlaklığa göre pırlanta fiyatı\"}\nggplot(diamonds, aes(x = clarity, y = price)) +\n  geom_boxplot() \n```\n\n### Karat\n\n```{r karat, fig.cap = \"Karata göre pırlanta fiyatı\"}\nggplot(diamonds, aes(x = carat, y = price)) +\n  stat_smooth()\n```\n\n### Sonuclar {#sonuclar}\n\n\"Kodlar haricinde pırlantalarla ilgilenmiyorum :) \"\nBu format varsayılan olarak numaralandırılmış bölümler bulunuyor, numaralandırma bunu istemiyorsanız YAML bölümünde number_sections: false ayarını yapın. Numaralandırılmış bölümleri kaldırırsanız, \\@ref(sonuclar) gibi bağlantılar “??” gösterecektir, bu nedenle bunun yerine aşağıdaki gibi URL bağlantı adresi kullanmanız gerekir:\nSon açıklamalar için Kaynakça bakınız.\n\n\n\n\nR Markdown’da metin içi referanslar yapmanın ve otomatik olarak bir kaynakça oluşturmanın birkaç yolu vardır. Markdown dosyalarının, atıfta bulunmanız gereken referansları içeren bir BibTex veya JSON dosyasına (referansları belirli bir formatta içeren düz bir metin dosyası) bağlanması gerekir. Bu dosyanın adını bibliography: refs.bib gibi YAML başlığında belirtirsiniz ve [@tidyverse] gibi bir @ sembolü ve kısa ad kullanarak metin içinde referanslara atıfta bulunursunuz. Referanslarınızı örneğin APA stilinde biçimlendirmek için bir Citation Style Language (.csl) dosyası da ekleyebilirsiniz. apa-tr.csl ise türkçe referans göstermek için kullanılabilir.\na bibliography\n---\ntitle: \"My Paper\"\nauthor: \"Me\"\noutput:\n  html_document:\n    toc: true\nbibliography: refs.bib\ncsl: apa.csl\n---\n\n\nEndNote veya Zotero gibi çoğu referans yazılımı BibTeX formatına aktarabilen dışa aktarma seçeneklerine sahiptir. Ortaya çıkan dosyadaki kısa adları kontrol etmeniz yeterlidir.\n\n\n\n\n\n\n!!!\n\n\n\nBir referans programı kullanmak hayatınızı çok daha kolaylaştıracaktır. Zotero muhtemelen en iyisidir.\n\n\nDışa aktarılan dosya şu şekilde görünmelidir:\n\n@article{kathawalla_easing_2021,\n    title = {Easing {Into} {Open} {Science}: {A} {Guide} for {Graduate} {Students} and {Their} {Advisors}},\n    volume = {7},\n    issn = {2474-7394},\n    shorttitle = {Easing {Into} {Open} {Science}},\n    url = {https://doi.org/10.1525/collabra.18684},\n    doi = {10.1525/collabra.18684},\n    abstract = {This article provides a roadmap to assist graduate students and their advisors to engage in open science practices. We suggest eight open science practices that novice graduate students could begin adopting today. The topics we cover include journal clubs, project workflow, preprints, reproducible code, data sharing, transparent writing, preregistration, and registered reports. To address concerns about not knowing how to engage in open science practices, we provide a difficulty rating of each behavior (easy, medium, difficult), present them in order of suggested adoption, and follow the format of what, why, how, and worries. We give graduate students ideas on how to approach conversations with their advisors/collaborators, ideas on how to integrate open science practices within the graduate school framework, and specific resources on how to engage with each behavior. We emphasize that engaging in open science behaviors need not be an all or nothing approach, but rather graduate students can engage with any number of the behaviors outlined.},\n    number = {1},\n    urldate = {2022-09-07},\n    journal = {Collabra: Psychology},\n    author = {Kathawalla, Ummul-Kiram and Silverstein, Priya and Syed, Moin},\n    month = jan,\n    year = {2021},\n    pages = {18684},\n}\n\n\n\nReferansları manuel olarak da ekleyebilirsiniz. RStudio’da File &gt; New File... &gt; Text File seçeneğine gidin. &gt; Metin Dosyası’na gidin ve dosyayı “refs.bib” olarak kaydedin.\nArdından, YAML başlığınıza bibliography: refs.bib satırını ekleyin.\n\n\n\nBir dergi makalesine aşağıdaki formatta referanslar ekleyebilirsiniz:\n@article{shortname,\n  author = {Author One and Author Two and Author Three},\n  title = {Paper Title},\n  journal = {Journal Title},\n  volume = {vol},\n  number = {issue},\n  pages = {startpage--endpage},\n  year = {year},\n  doi = {doi}\n}\nKitaplara, teknik raporlara ve daha fazlasına atıfta bulunma talimatları için BibTeX formatına ilişkin eksiksiz bir kılavuza bakın.\ncitation() ve toBibtex() fonksiyonlarını kullanarak bir R paketi için referans alabilirsiniz. Bibtex girişini bibliography.bib dosyanıza yapıştırabilirsiniz. Referansa atıfta bulunmak için ilk virgülden önce kısa bir ad (örneğin, “ggplot2”) eklediğinizden emin olun.\nSee A complete guide to the BibTeX format kitaplara, teknik raporlara ve daha fazlasına atıfta bulunma talimatları için.\nBir R paketinin referansını citation() ve toBibtex() fonksiyonlarını kullanarak alabilirsiniz. Bibtex girişini bibliography.bib dosyanıza yapıştırabilirsiniz. Referansa atıfta bulunmak için ilk virgülden önce kısa bir ad (örneğin, “ggplot2”) eklediğinizden emin olun.\n\n\nCode\ncitation(package=\"ggplot2\") %&gt;% toBibtex()\n\n\n@Book{,\n  author = {Hadley Wickham},\n  title = {ggplot2: Elegant Graphics for Data Analysis},\n  publisher = {Springer-Verlag New York},\n  year = {2016},\n  isbn = {978-3-319-24277-4},\n  url = {https://ggplot2.tidyverse.org},\n}\n\n\nGoogle Scholar girişlerinde BibTeX atıf seçeneği vardır. DOI’yi kendiniz eklemeniz gerekse de, Zotero tarayıcı bağlayıcısı aracılığıyla bir atıf ekleyemiyorsanız, ilgili değerleri almanın en kolay yolu genellikle budur. Önerilen kısa adı koruyabilir veya sizin için daha anlamlı olan bir adla değiştirebilirsiniz.\n\n\n\n\n\nGet BibTex citations from Google Scholar.\n\n\n\n\n\n\n\nMetin içinde referansları bu şekilde gösterebilirsiniz:\nThis tutorial uses several R packages [@tidyverse;@rmarkdown].\nBu eğitimde çeşitli R paketleri kullanılmaktadır (Allaire vd., 2018; Wickham, 2017).\n\n\n\nBir öğeyi kaynak göstermeden referans bölümüne eklemek istiyorsanız, bunu YAML başlığına şu şekilde ekleyin:\nnocite: |\n  @kathawalla_easing_2021, @broman2018data, @nordmann2022data\nYa da .bib dosyasındaki tüm öğeleri şu şekilde ekleyin:\nnocite: '@*'\n\n\n\nÇeşitli dergiler için stil dosyalarının bir listesini arayabilir ve kaynakçanızı belirli bir derginin stiline göre biçimlendirecek bir dosya indirebilirsiniz. YAML başlığınıza csl: filename.csl satırını eklemeniz gerekir.\n\nrefs.bib dosyanıza bazı alıntılar ekleyin, metninizde bunlara atıfta bulunun ve otomatik olarak oluşturulan referans bölümünü görmek için makalenizi işleyin. Birkaç farklı atıf stili dosyası deneyin.\n\n\n\n\nVarsayılan olarak, referans bölümü belgenin sonuna eklenir. Konumu değiştirmek istiyorsanız (örneğin, referanslardan sonra şekil ve tablo eklemek için), referansları istediğiniz yere &lt;div id=\"refs\"&gt;&lt;/div&gt; ekleyin.\n\nRaporunuza metin içi alıntılar ve bir referans listesi ekleyin.\n\n\n\n\n\nBazı paketler özel R Markdown şablonları sağlar. reprores, YAML başlığındaki tüm olası seçenekleri gösteren, kaynakça ve stil dosyalarına sahip olan ve bağlantılı şekil ve tabloların nasıl ayarlanacağını açıklayan bir Rapor şablonuna sahiptir. Birden fazla dosya içerdiğinden, RStudio sizden tüm dosyaları tutmak için yeni bir klasör oluşturmanızı isteyecektir.\nÖdevinizi yapmak için aşağdaki kodla reproses pakeini yükleyebilirsiniz.\n\n\nCode\n# devtools::install_github(\"psyteachr/reprores-v3\")\n\n\nDaha sonra aşağıdaki gibi taslağı (template) açabilirsiniz. Örnek dosyayı inceledikten sonra kendi içerieğinizi oluşturabilirsiniz.\n\n\n\n\n\nŞablonlar\n\n\n\n\n\nRapor şablonu ile bir rapor başlatın ve örün. Seçenekleri değiştirmeyi veya silmeyi deneyin.\n\n\n\n\n\nrpubs sayfalarını oluşturup, bu bilgiyi bana ulaştırınız.\nrpubs sayfasında ilk dört haftada öğrendiklerinizin kısa bir özetini paylaşınız.\nAyrıca linkte yer alan çoklu regresyon ile ilgili dökümanı repores paketinin Report şablonu ile oluşturmanızı bekliyorum. Bu dökümana eklenmiş ayrıca bir adet görsel bulunmaktadır. Görsele buradan ulaşabilirsiniz. Bu ödeviniz gönderdiğim dosyaya benzerliğine göre puanlanacaktır.\nnot: Şablonda (templatede) alan YMAL header css: extras/style.css # path to css file kısmını siliniz.\n\n\n\n\n\nChapter 27: R Markdown in R for Data Science\nR Markdown Cheat Sheet\nR Markdown reference Guide\nR Markdown Tutorial\nR Markdown: The Definitive Guide by Yihui Xie, J. J. Allaire, & Garrett Grolemund\nProject Structure by Danielle Navarro\nHow to name files by Jenny Bryan\nPapaja Reproducible APA Manuscripts\nThe Turing Way"
  },
  {
    "objectID": "06_Rmarkdown.html#neden-tekrarlanabilir-raporlar-kullanılmalı",
    "href": "06_Rmarkdown.html#neden-tekrarlanabilir-raporlar-kullanılmalı",
    "title": "Rapor Hazırlama",
    "section": "",
    "text": "Bir rapor hazırladığınızı düşünün\n\niçinde analiz sonuçları olan tablolar\ngrafikler ve görsel olsun\nbu raporu güncellemeniz gerektiğinde veri seti, grafikler, analizler başka dizinlerde olabilir.\nTekrarlanabilir raporlar, tüm analizleri gerçekleştirmek ve tabloları oluşturmak için gereken kodla birlikte rapor metnini tek bir belgede bir araya getirmektir.\nBu, başlangıçta biraz fazladan çaba gerektirse de, herhangi bir değişiklik olduğunda tek bir düğmeye basarak tüm raporunuzu güncellemenizi sağlayarak size fazlasıyla geri ödeme yapacaktır.\nAraştırmalar ayrıca, bilimsel literatürdeki makalelerin çoğunda olmasa bile birçoğunda raporlama hataları olduğunu göstermektedir. Tekrarlanabilir raporlar, transkripsiyon ve yuvarlama hatalarını önlemeye yardımcı olur.\nRapor daha sonra orijinal formattan HTML, word ve ya PDF gibi daha taşınabilir başka bir formata “derlenir”. Bu, örneğin Microsoft Excel’de veya SPSS gibi bir istatistik programında bir grafik oluşturup ardından bunu Microsoft Word’e yapıştırdığınız geleneksel kesme ve yapıştırma yaklaşımlarından farklıdır."
  },
  {
    "objectID": "06_Rmarkdown.html#bir-proje-düzenlemek",
    "href": "06_Rmarkdown.html#bir-proje-düzenlemek",
    "title": "Rapor Hazırlama",
    "section": "",
    "text": "İlk olarak, organize olmamız gerekiyor. RStudio’daki projeler, bir proje için ihtiyaç duyduğunuz tüm dosyaları gruplandırmanın bir yoludur. Çoğu proje komut dosyalarını, veri dosyalarını ve komut dosyası veya görüntüler tarafından oluşturulan PDF raporu gibi çıktı dosyalarını içerir.\n\n\n\n\nBilgisayarınızın dosya sistemi, hem dosyaları hem de “alt dizinleri” içeren büyük dizin gibidir. Bir dosyanın konumunu adıyla ve içinde bulunduğu tüm dizinlerin adlarıyla belirtebilirsiniz.\nÖrneğin, Kubra Masaüstünde report.Rmd adında bir dosya arıyorsa, tam dosya yolunu şu şekilde belirtebilir: /Users/Kubra/Desktop/report.Rmd , çünkü Masaüstü dizini, tüm dosya sisteminin tabanında bulunan Kullanıcılar/Users dizininin içindeki Kubra dizininin içindedir. Bu dosya masaüstünüzde olsaydı, kullanıcı dizininizin adı da Kubra değilse muhtemelen farklı bir yola sahip olurdunuz. Şu anda oturum açmış olan kişinin kullanıcı dizinini temsil etmek için ~ kısayolunu da kullanabilirsiniz: ~/Desktop/report.Rmd.\n\n\n\n\n\nTüm dosyalarınızı nereye koymalısınız? Genellikle tek bir proje için tüm komut dosyalarınızın ve veri dosyalarınızın bilgisayarınızdaki tek bir klasörde, o projenin çalışma dizininde olmasını istersiniz. Dosyaları bu ana proje dizini içindeki alt dizinlerde düzenleyebilirsiniz, örneğin tüm ham veri dosyalarını data/import adlı bir dizine koyabilir ve tüm görüntü dosyalarını images adlı bir dizine kaydedebilirsiniz.\nKodunuz, uygun biçimi kullanarak yalnızca üç tür konumdaki dosyalar kullanılmalıdır.\n\n\n\n\nYer\nÖrnek\n\n\n\n\nweb\n“https://atalay-k.github.io/OLC731/import/veri1.txt”\n\n\ndizin içinde\n“veri1.txt”\n\n\nalt dizin içinde\n“import/veri1.txt”\n\n\n\n\n\n\n\n\n\n!!!\n\n\n\nBir komut dosyasında asla çalışma dizininizi ayarlamayın veya değiştirmeyin.\n\n\n\nR Markdown dosyaları otomatik olarak .Rmd dosyasının bulunduğu dizini çalışma dizini olarak kullanacaktır.\nKodunuz çalışma dizininizin bir alt dizinindeki bir dosyaya ihtiyaç duyuyorsa (örneğin, import/veri1.txt), çalışma dizinini başka bir konuma veya bilgisayara taşıdığınızda erişilebilir olması için dosyayı göreli bir yol kullanarak yükleyin:\n\n\ndat &lt;- read.table(\"import/veri1.txt\")  # dogru\n\nBu dosyayı aşağıdaki gibi mutlak yol/adres ile yüklemeyin🙅:\n\ndat &lt;- read.table(\"c:/Users/Kubra/Desktop/OLC731/import/veri1.txt\")  # yanlıs\n\n\nÖrnek veriyi düzgün aktarmak aşağıdaki kodla sağlanır.\n\n\n(veri1 &lt;- read.table(\"import/veri1.txt\",\n                    header= TRUE,\n                    sep= \";\",\n                    dec= \",\"))\n\n   no m_1  m_2 m_3  m_4 m_5\n1 522  12 14.0  16 20.0  10\n2 222   5   NA  20 10.0  10\n3 454   5 10.2   6  4.0  10\n4 567  10 20.0  NA 12.2  20\n\n\n\n\n\n\n\n\n!!!\n\n\n\nAyrıca, Windows’a özgü geriye doğru eğik çizgi kullanma kuralının aksine, ileriye doğru eğik çizgi kullanma kuralına dikkat edin. Bu, dosyalara yapılan referansların işletim sistemlerinden bağımsız olarak herkes için çalışmasını sağlamak içindir.\n\n\n\n\n\nDosyaları, hem insanların hem de bilgisayarların kolayca bulabileceği şekilde adlandırın. İşte bazı önemli ilkeler:\n\ndosya ve dizin adları yalnızca harf, rakam, tire ve alt çizgi içermeli, dosya adı ve uzantısı arasında nokta (.) olmalıdır (bu boşluk olmadığı anlamına gelir!)\nBüyük harf kullanımı konusunda tutarlı olun (hatırlamayı kolaylaştırmak için bir kural belirleyin, örneğin her zaman küçük harf kullanın)\ndosya adının bölümlerini ayırmak için alt çizgi (_) ve bir bölümdeki sözcükleri ayırmak için tire (-) kullanın\ndosyaları mantıklı bir sırayla alfabetik hale getiren ve aradığınız dosyayı bulmanızı kolaylaştıran bir kalıpla adlandırın\nbir dosya adını listenin en üstüne taşımak için önüne alt çizgi ekleyin veya sıralarını kontrol etmek için tüm dosyaların önüne sayı ekleyin\ntarihler için YYYY-MM-DD biçimini kullanın, böylece kronolojik sıraya göre sıralanırlar\n\nÖrneğin, bu dosya adları tam bir karmaşa:\n\nVeri (Katilimci) 04-15.xls\nfinal raporu2.doc\nKatilimci Veri Nisan 12.xls\n(\"proje notlari\nAnket Veri Kasim 15.xls\nrapor.doc\nrapor son.doc\n\nBenzer dosyaların aynı yapıya sahip olması ve dosyaları taramanın veya ilgili dosyaları bulmak için kod kullanmasının kolay olması için dosyaları yapılandırabilirsiniz.\n\nproje-notlari\nveri_katilimci_2021-04-12.xls\nveri_katilimci_2021-04-15.xls\nveri_anket_2021-04-15.xls\nrapor_v1.doc\nrapor_v2.doc\nrapor_v3.doc\n\n\n\n\n\n\n\n!!!\n\n\n\nYukarıdaki dosyaları adlandırmak için başka yollar düşünün. Kendi proje dosyalarınızdan bazılarına bakın ve neleri geliştirebileceğinizi görün.\n\n\n\nBir kodlama stilinizin olması iyi olabilir.\n\n\n\n\n\nArtık dosya sisteminin nasıl çalıştığını ve komut dosyalarının bunlara erişmesini kolaylaştırmak için nesneleri nasıl adlandıracağımızı anladığımıza göre, projemizi yapmaya hazırız.\nÖncelikle, bu sınıf için tüm materyallerinizi tutacağınız yeni bir dizin oluşturun (benimki OLC731 adınında). Bu dizini Global Options’ın general bölümü altında varsayılan çalışma dizini olarak ayarlayabilirsiniz. Bu, bir projede çalışmıyorsanız dosyaların varsayılan olarak buraya kaydedileceği anlamına gelir.\n\n\n\n\n\n\n\n!!!\n\n\n\nBu dizin OneDrive’daysa veya tam dosya yolu özel karakterler içeriyorsa ya da bazı Windows makinelerinde 260 karakterden fazlaysa bazen sorunlara neden olabilir\n\n\n\nArdından, OLC731 adında yeni bir proje oluşturmak için File menüsü altında New Project... öğesini seçin. Yeni oluşturduğunuz dizinin içine kaydettiğinizden emin olun. RStudio kendini yeniden başlatacak ve çalışma dizini olarak bu yeni proje dizini ile açılacaktır.\n\nProje dizininin içeriğini görmek için sağ alt bölmedeki Files sekmesine tıklayın. Tüm proje bilgilerini içeren OLC731.Rproj adlı bir dosya göreceksiniz, projeyi açmak için üzerine çift tıklayabilirsiniz.\n\n\n\n\n\n\n!!!\n\n\n\nAyarlarınıza bağlı olarak, özel kullanıcı ayarlarınızı içeren .Rproj.user adlı bir dizin de görebilirsiniz. Bu ve nokta ile başlayan diğer “görünmez” dosyaları yok sayabilirsiniz."
  },
  {
    "objectID": "06_Rmarkdown.html#r-markdown",
    "href": "06_Rmarkdown.html#r-markdown",
    "title": "Rapor Hazırlama",
    "section": "",
    "text": "Bu derste, bir içindekiler tablosu, uygun başlıklar, kod parçaları, tablolar, resimler, satır içi R ve bir kaynakça içeren bir R Markdown belgesi oluşturmayı öğreneceğiz.\n\n\n\n\n\n\n\n!!!\n\n\n\nR Markdown’a çok benzeyen quarto adında yeni bir tür tekrarlanabilir rapor formatı var. Bu derste quarto kullanmayacağız çünkü aynı anda hem quarto hem de R Markdown öğreniyorsanız kafa karıştırıcı olabilecek birkaç küçük farkı var, ancak R Markdown’ı öğrendikten sonra quarto’yu çok kolay bir şekilde öğrenebilirsiniz.\n\n\n\nTekrar üretilebilir raporlar oluşturmak için metin ve kodun karıştırılmasını sağlayan R Markdown kullanacağız. Yeniden üretilebilir bir komut dosyası, kod bloklarında kod bölümleri içerecektir. Bir kod bloğu arka arkaya üç backtick sembolü ile başlar ve biter, küme parantezleri arasında kod hakkında bazı bilgiler bulunur, örneğin {r chunk-name, echo=FALSE} (bu kodu çalıştırır, ancak derlenen belgede kod bloğunun metnini göstermez). Kod bloklarının dışındaki metin, başlıklar, paragraflar, listeler, kalınlaştırma ve bağlantılar gibi biçimlendirmeyi belirtmenin bir yolu olan markdown ile yazılır. Örnek Dosyayı beraber inceleyelim.\nBir şablondan yeni bir R Markdown dosyası açarsanız, içinde birkaç kod bloğu bulunan örnek bir belge görürsünüz. Bir R Markdown (Rmd) belgesinden HTML veya PDF raporu oluşturmak için belgeyi derlersiniz. Bir belgeyi derlemeye RStudio’da örme denir. Dosyanızı bir rapora derlemek için üzerine tıkladığınız, içinden iğneler geçen bir iplik yumağına benzeyen bir düğme vardır.\n\n\n\n\n\n\n\n!!!\n\n\n\nFile &gt; New File &gt; R Markdown... menüsünden yeni bir R Markdown dosyası oluşturun. Başlığı ve yazarı değiştirin, dosyayı Ornek1.Rmd olarak kaydedin, ardından bir html dosyası oluşturmak için ör düğmesine tıklayın.\n\n\n\n\n\n🔗 YAML başlığı çeşitli seçenekleri ayarlayabileceğiniz bölümdür.\n\n---\ntitle: \"Demo\"\nauthor: \"Kubra\"\noutput:\n  html_document:\n    toc: true\n    toc_float:\n      collapsed: false\n      smooth_scroll: false\n      number_sections: false\n---\n\n\n\n\n\n\n!!!\n\n\n\nSeçeneklerin ne işe yaradığını görmek için değerleri false tan true ya değiştirmeyi deneyin.\n\n\n\nVarsayılan temalar şunlardır: default, cerulean, cosmo, darkly, flatly, journal, lumen, paper, readable, sandstone, simplex, spacelab, united ve yeti. Linkten 🔗daha fazla temayı inceleyebilirsiniz..\n\n\n\n\n\nVarsayılan şablonu kullanarak RStudio’da yeni bir R Markdown dosyası oluşturduğunuzda, otomatik olarak bir kurulum blogu oluşturulur.\n\n\nknitr::opts_chunk$set(echo = TRUE)\n\n\nKod parçaları için daha fazla varsayılan seçeneği buradan ayarlayabilirsiniz. Olası seçeneklerin açıklamaları için knitr seçenekleri belgelerine bakın. knitr dokumanı\n\n\nknitr::opts_chunk$set(\n  fig.width  = 8,\n  fig.height = 5,\n  fig.path   = 'images/',\n  echo       = FALSE,\n  warning    = TRUE,\n  message    = FALSE,\n  cache      = FALSE\n)\n\nYukarıdaki kod aşağıdaki seçenekleri ayarlar:\n\nfig.width = 8 : varsayılan şekil genişliği 8 inçtir (bunu tek tek şekiller için değiştirebilirsiniz)\nfig.height = 5 : varsayılan şekil yüksekliği 5 inçtir\nfig.path = ‘images/’ : şekiller “images” dizinine kaydedilir\necho = FALSE : işlenen belgede kod parçalarını gösterme\nwarning = FALSE : herhangi bir işlev uyarısı gösterme\nmessage = FALSE : herhangi bir işlev mesajı gösterme\ncache = FALSE : her örgü ördüğünüzde tüm görüntüleri ve nesneleri oluşturmak için tüm kodu çalıştırın (zaman alıcı kodunuz varsa TRUE olarak ayarlayın) Konsola str(knitr::opts_chunk$get()) yazarak geçerli kod bloğu seçeneklerinin bir listesini bulun.\n\nİhtiyacınız olan paketleri library()kullanarak da bu bloğunuza ekleyebilirsiniz. Genellikle bir komut dosyası üzerinde çalışırken, başka bir eklenti paketi yüklemeniz gerektiğini fark edersiniz. library(...) çağrısını kodun en altına gömmeyin. En üste koyun, böylece kullanıcı hangi paketlerin gerekli olduğuna dair genel bir fikir elde edilir.\n\n\n\n\n\n\n!!!\n\n\n\ntidyverse paketinden fonksiyon kullanacağız, bu yüzden kurulum bloğunuza yükleyin.\n\n\n\n\n\n\nBir içindekiler tablosu (toc) eklerseniz, bu tablo belge başlıklarınızdan oluşturulur. Markdown’daki başlıklar, başlık başlığının önüne bir veya daha fazla hash (#) eklenerek oluşturulur.\nKendi analiz komut dosyalarınızı geliştirirken aşağıdaki yapıyı kullanın:\nKullanmanız gereken tüm eklenti paketlerini yükleyin\nherhangi bir özel fonksiyon tanımlayın\nbirlikte çalışacağınız verileri yükleyin veya simüle edin\nkaydetmeniz gereken her şeyi kaydedin\n\n\n\n\n\n\n\n!!!\n\n\n\nVarsayılan metni silin ve başlıklar ve alt başlıklar oluşturarak belgenize biraz yapı ekleyin. Bazı verileri yükleyeceğiz, bir özet tablo oluşturacağız, grafik çizeceğiz ve analiz edeceğiz.\n\n\n\n\n\n\nMetninize eklemek için görüntüler, tablolar veya hesaplamalar oluşturan ve görüntüleyen kod parçaları ekleyebilirsiniz. Bazı verileri yükleyerek başlayalım.\nİlk olarak, belgenizde bir kod bloğu oluşturun. Bu kod iris veri setini yükler.\n\n\nlibrary(datasets)\ndata(iris)\n\n\n\n\n\nKod blokları içine hash sembolü (#) ile yorum ekleyebilirsiniz. R yorumlayıcısı, hash’ten satır sonuna kadar olan karakterleri yoksayacaktır.\n\n\nn &lt;- nrow(iris) # toplam satır sayısı\nmu &lt;- mean(iris$Petal.Length)  # taç yaprak uzunluğu ortalaması\nsd &lt;- sd(iris$Petal.Length) # taç yaprak uzunluğu standart sapması\n\n\nsimule_deger &lt;- rnorm(n, mu, sd)\n\n\nBir kod parçasını, özellikle kod rapor metninde açıklanmamışsa, orada ne yaptığınızı açıklayan bir yorumla başlatmak genellikle iyi bir uygulamadır.\nNesnelerinizi açık bir şekilde adlandırırsanız, genellikle açıklayıcı yorumlar eklemeniz gerekmez. Örneğin, yukarıdaki üç nesneyi n_iris, ort_petal ve sd_petal olarak adlandırmış olsaydım, yorumları atlardım.\nYorumların bir başka kullanımı da çalıştırmak istemediğiniz ancak silmek de istemediğiniz bir kod bölümünü “yorumlamaktır”. Örneğin, bir paketi yüklemek için kullanılan kodu kodunuza dahil edebilirsiniz, ancak kodun her çalıştırıldığında uzun bir yüklemeye zorlamaması için her zaman yorumlamanız gerekir.\n\n\n# install.packages(\"dplyr\")\n# install.packages(\"tidyr\")\n# install.packages(\"ggplot2\")\n\n\n\n\n\n\n\n!!!\n\n\n\nSatırları seçip Cmd-shift-C (Mac) veya Ctrl-shift-C (Windows) yazarak aynı anda birden fazla satıra yorum yazabilir veya yorumu kaldırabilirsiniz.\n\n\n\nKodunuzu iyi bir şekilde yorumlamak biraz sanattır. Bu beceriyi geliştirmenin en iyi yolu, başkalarının kodlarını okumak ve başkalarının kodunuzu incelemesini sağlamaktır.\n\n\n\n\n\nŞimdi setosa ve virginica çiçek türlerinde yaprak uzunluklarını analiz edelim. Önce analiz kodunu çalıştıracağız. Daha sonra makalemizde kullanmak isteyebileceğimiz sayıları değişkenlere kaydedeceğiz ve uygun şekilde yuvarlayacağız. Son olarak, bir sonuçları biçimlendirmek için glue::glue() kullanacağız.\n\n\n# analiz\nlibrary(dplyr)\nsetosa_petal &lt;-filter(iris, Species == \"setosa\") %&gt;%  pull(Petal.Length)\nvirginica_petal &lt;-filter(iris, Species == \"virginica\") %&gt;%  pull(Petal.Length)\npetal_test &lt;-t.test(setosa_petal, virginica_petal)\n\n# rapor edilecek degerleri yorumlama\nt &lt;- petal_test$statistic %&gt;% round(2)\ndf &lt;- petal_test$parameter %&gt;% round(1)\np &lt;- petal_test$p.value %&gt;% round(3)\n# p-değerleri &lt; .001 ata\np_symbol &lt;- ifelse(p &lt; .001, \"&lt;\", \"=\") ## kodun bu kısmı elde edilen p değeri .001'den küçük ise p_symbol değerine &lt;, değil ise = atar.\nif (p &lt; .001) p &lt;- .001 \n\n# sonucları birleştirme\npetal_result &lt;- glue::glue(\"t = {t}, df = {df}, p {p_symbol} {p}\")\n\n\nSonuçları, aşağıdaki gibi görünen satır içi R kodu ile bir paragrafa ekleyebilirsiniz:\n\n virginica çiçeklerinin yaprakları setosa çiçeklerinin yapraklarından uzundur(`r petal_result`).\nvirginica çiçeklerinin yaprakları setosa çiçeklerinin yapraklarından uzundur (t = -49.99, df = 58.6, p &lt; 0.001).\n\n\n\n\n\n\n!!!\n\n\n\nYukarıdaki kod blogunda dplyr paketinin filter() ve pull() fonksiyonları ile yapılan işlemleri subset() fonksiyonu ile yapabilirsiniz. Bunu yapıp öğrenme günlüğünüze ekleyiniz.\n\n\n\n\n\n\nÇalışmaların yöntem bölümüne betimsel bilgiler eklemek istediğimizde\n\n\n\nCode\nozet_tablo &lt;- iris %&gt;%\n  group_by(Species) %&gt;%\n  summarise(\n    n = n(),\n    ortalama = mean(Petal.Length),\n    sd = sd(Petal.Length)\n  )\nozet_tablo\n\n\n# A tibble: 3 × 4\n  Species        n ortalama    sd\n  &lt;fct&gt;      &lt;int&gt;    &lt;dbl&gt; &lt;dbl&gt;\n1 setosa        50     1.46 0.174\n2 versicolor    50     4.26 0.470\n3 virginica     50     5.55 0.552\n\n\n\n\n\n\n\n\n!!!\n\n\n\nYukarıdaki tablo etkileşimli görünümde tibble biçiminde yazdırılacak, ancak ördüğünüzde YAML başlığındaki df_print ayarındaki biçimi kullanacaktır.\n\n\n\nYukarıdaki tabloda, sütun etiketlerini değiştirerek, ortalamaları yuvarlayarak ve bir başlık ekleyerek daha okuyucu dostu hale getirlebilir. Bunun için knitr::kable() işlevini veya tablolarınızı biçimlendirmek için diğer paketlerdeki daha özel fonksiyonlarını kullanabilirsiniz.\n\n\nknitrkableExtrapapajagt\n\n\n\n\nCode\nyeni_ad &lt;- c(\"Çiçek Türü\", \"Frekans\", \"Ortalama\", \"Sd\")\n\nknitr::kable(ozet_tablo,\n             digits = 2,\n             col.names = yeni_ad,\n             caption = \"Petal Uzulukları için Özet Tablo\")\n\n\n\nPetal Uzulukları için Özet Tablo\n\n\nÇiçek Türü\nFrekans\nOrtalama\nSd\n\n\n\n\nsetosa\n50\n1.46\n0.17\n\n\nversicolor\n50\n4.26\n0.47\n\n\nvirginica\n50\n5.55\n0.55\n\n\n\n\n\n\n\nkableExtra paketi çok sayıda seçenek sunar.\n\n\nCode\nlibrary(kableExtra)\n\nkable(ozet_tablo,\n      digits = 2,\n      col.names = c(\"Çiçek Türü\", \"Frekans\", \"Ortalama\", \"Sd\"),\n      caption = \"Petal Uzulukları için Özet Tablo\") |&gt;\n  kable_classic() |&gt;\n  kable_styling(full_width = FALSE, font_size = 20) |&gt;\n  add_header_above(c(\" \" = 2, \"Degerler\" = 2)) |&gt;\n  kableExtra::row_spec(2, bold = TRUE, background = \"lightgrey\")\n\n\n\n\nPetal Uzulukları için Özet Tablo\n\n\n\n\n\n\n\n\n\n\nDegerler\n\n\n\nÇiçek Türü\nFrekans\nOrtalama\nSd\n\n\n\n\nsetosa\n50\n1.46\n0.17\n\n\nversicolor\n50\n4.26\n0.47\n\n\nvirginica\n50\n5.55\n0.55\n\n\n\n\n\n\n\n\n\n\npapaja paketi ile APA formatında tablolar elde edebilirsiniz.\n\n\nCode\npapaja::apa_table(ozet_tablo,\n                  col.names = c(\"Çiçek Türü\", \"Frekans\", \"Ortalama\", \"Sd\"),\n                  caption = \"Petal Uzulukları için Özet Tablo\",\n                  col_spanners = list(\"Means\" = c(3, 4)))\n\n\n\n(#tab:papaja-demo) Petal Uzulukları için Özet Tablo\n\n\nÇiçek Türü\nFrekans\nOrtalama\nSd\n\n\n\n\nsetosa\n50\n1.46\n0.17\n\n\nversicolor\n50\n4.26\n0.47\n\n\nvirginica\n50\n5.55\n0.55\n\n\n\n\n\n\n\ngt paketinde de çok sayıda seçenek bulunmaktadır.\n\n\nCode\nlibrary(gt)\n\ngt(ozet_tablo, caption = \"Petal Uzulukları için Özet Tablo\") |&gt;\n  fmt_number(columns = c(ortalama, sd),\n             decimals = 2) |&gt;\n  cols_label(Species = \"Çiçek Türü\",\n             n = \"Frekans\",\n             ortalama = \"ortalama\",\n             sd = \"sd\") |&gt;\n  tab_spanner(label = \"Degerler\",\n              columns = c(ortalama, sd)) |&gt;\n  opt_stylize(style = 6, color = \"blue\")\n\n\n\n\n\n\n\nPetal Uzulukları için Özet Tablo\n\n\nÇiçek Türü\nFrekans\nDegerler\n\n\nortalama\nsd\n\n\n\n\nsetosa\n50\n1.46\n0.17\n\n\nversicolor\n50\n4.26\n0.47\n\n\nvirginica\n50\n5.55\n0.55\n\n\n\n\n\n\n\n\n\n\n\n\n\nTablo eklemek için diğer bir yol ise elle tablo oluşturmaktadır. Tablo oluşturulmak istendiğinde aşağıdaki şekilde eklenebilir.\n\n| col1   |col2    |  \n|:------:|:------:|\n|içerik1 |içerik2 |\n\nYukarıdaki içerik örüldüğünde aşağıdaki tablo oluşmaktadır.\n\n\n\ncol1\ncol2\n\n\n\n\niçerik1\niçerik2\n\n\n\nTablo eklemek için Rstudio yer alan Visual özelliğini kullanmakta pratiktir. Hazırladığınız markdown dosyasını Visual modunda açtığınızda Table menüsünde tablo oluşturma, satır sütun ekleme, hizalama gibi işlemler menü aracılığı ile yapılabilimektedir.\n\n\n\n\n\nŞekil başlığının kod bloğında nasıl biçimlendirildiğine dikkat edin.\n\n\n\nCode\ndat &lt;- subset(iris, Species != \"versicolor\")\ndat$Species &lt;- factor(dat$Species)\n\nggplot(dat, aes(Species, Petal.Length)) +\n  geom_boxplot(width = 0.25,\n               show.legend = FALSE)  +\n  labs(x = \"\", y = \"Petal Uzunluğu\") +\n  theme(text = element_text(size = 20, family = \"Times\"))\n\n\n\n\n\nPetal Uzunlukları ve Türler\n\n\n\n\n\n\n\n\n\n\n!!!\n\n\n\nSon satır varsayılan metin boyutunu ve yazı tipini değiştirir, bu da bir derginin gereksinimlerini karşılayan şekiller oluşturmak için yararlı olabilir.\n\n\n\nKodlarla oluşturamadığınız şekilleri de resim dosyaları ile dökümana ekleyebilirsiniz:\n\n![neden R](https://miro.medium.com/v2/resize:fit:720/format:webp/1*TX77o_zJ4zbpJ3vN4BkLsg.jpeg){style=\"width: 50%\"}\n\n\n\nneden R\n\n\n\n\n\n\nMarkdown bölümler arasında bağlantılar içeren daha uzun raporlar oluşturmanıza yardımcı olur.\nBaşlığı olan tüm şekillere veya tablolara otomatik olarak şekil ve tablo numaraları ekler ve bunlara referansla bağlantı vermenize olanak sağlar.\nTablolara ve şekillere bağlantılar oluşturmak için, şekillerinizi veya tablolarınızı oluşturan kod bloklarınız adlandırmanız ve ardından satır içi kodlamanızda bu adları çağırmanız gerekir:\n\nBakınız Tablo \\@ref(tab:tablo1) or Sekil \\@ref(fig:sekil1).\n\n\n\n\n\n\n!!!\n\n\n\nKod blok adları yalnızca harf, rakam ve tire içerebilir. Boşluk veya alt çizgi gibi başka karakterler içeriyorlarsa, referanslama çalışmayacaktır.\n\n\nBaşlıklarınızı {#} ile adlandırarak da raporunuzun farklı bölümlerine bağlantı verebilirsiniz:\n# Baslık 1 {#baslık-1}\n\n## Baslık 2 {#baslık-2}\n\nBakınız Bolum \\@ref(baslık-1) and Bolum \\@ref(baslık-2)\n\nAşağıdaki kod, ggplot2 paketindeki diamonds veri seti kullanarak tam bir raporda metnin şekillere veya tablolara nasıl bağlanacağını göstermektedir - bu belgeyi şimdi oluşturmak için aşağıdaki kodları kullanın. Tablo ve şekillere referans verme özelliği bookdown formatına aittir. output seçeneğinin sadece html olarak kalması ile bu özellikten yararlanılamamaktadır.\n\n---\ntitle: \"referans verme\"\nauthor: \"Kubra\"\ndate: \"`r Sys.Date()`\"\noutput: bookdown::html_document2\n---\n\n# ORNEK DOSYA\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = FALSE,\n                      message = FALSE,\n                      warning = FALSE)\nlibrary(tidyverse)\nlibrary(kableExtra)\ntheme_set(theme_minimal())\n```\n\nPırlanta ücretleri çeşitli faktörlere bağlıdır\n\n-   cut (Bakınız Tablo \\@ref(tab:kesim))\n-   colour (Bakınız Tablo \\@ref(tab:renk))\n-   clarity (Bakınız Şekil \\@ref(fig:parlaklik))\n-   carats (Bakınız Şekil \\@ref(fig:karat))\n-   Bakınız Bolum \\@ref(sonuclar) sonuclar icin\n\n## Tablolar\n\n### Kesim\n\n```{r kesim}\ndiamonds %&gt;%\n  group_by(cut) %&gt;%\n  summarise(avg = mean(price),\n            .groups = \"drop\") %&gt;%\n  kable(digits = 0, \n        col.names = c(\"Cut\", \"Average Price\"),\n        caption = \"Kesime göre ortalama pırlanta fiyatı.\") %&gt;%\n  kable_material()\n```\n\n### Renk\n\n```{r renk}\ndiamonds %&gt;%\n  group_by(color) %&gt;%\n  summarise(avg = mean(price),\n            .groups = \"drop\") %&gt;%\n  kable(digits = 0, \n        col.names = c(\"Cut\", \"Average Price\"),\n        caption = \"Renge göre ortalama pırlanta fiyatı.\") %&gt;%\n  kable_material()\n```\n\n## Grafikler\n\n### Parlaklık\n\n```{r parlaklik, fig.cap = \"Parlaklığa göre pırlanta fiyatı\"}\nggplot(diamonds, aes(x = clarity, y = price)) +\n  geom_boxplot() \n```\n\n### Karat\n\n```{r karat, fig.cap = \"Karata göre pırlanta fiyatı\"}\nggplot(diamonds, aes(x = carat, y = price)) +\n  stat_smooth()\n```\n\n### Sonuclar {#sonuclar}\n\n\"Kodlar haricinde pırlantalarla ilgilenmiyorum :) \"\nBu format varsayılan olarak numaralandırılmış bölümler bulunuyor, numaralandırma bunu istemiyorsanız YAML bölümünde number_sections: false ayarını yapın. Numaralandırılmış bölümleri kaldırırsanız, \\@ref(sonuclar) gibi bağlantılar “??” gösterecektir, bu nedenle bunun yerine aşağıdaki gibi URL bağlantı adresi kullanmanız gerekir:\nSon açıklamalar için Kaynakça bakınız."
  },
  {
    "objectID": "06_Rmarkdown.html#Kaynakça",
    "href": "06_Rmarkdown.html#Kaynakça",
    "title": "Rapor Hazırlama",
    "section": "",
    "text": "R Markdown’da metin içi referanslar yapmanın ve otomatik olarak bir kaynakça oluşturmanın birkaç yolu vardır. Markdown dosyalarının, atıfta bulunmanız gereken referansları içeren bir BibTex veya JSON dosyasına (referansları belirli bir formatta içeren düz bir metin dosyası) bağlanması gerekir. Bu dosyanın adını bibliography: refs.bib gibi YAML başlığında belirtirsiniz ve [@tidyverse] gibi bir @ sembolü ve kısa ad kullanarak metin içinde referanslara atıfta bulunursunuz. Referanslarınızı örneğin APA stilinde biçimlendirmek için bir Citation Style Language (.csl) dosyası da ekleyebilirsiniz. apa-tr.csl ise türkçe referans göstermek için kullanılabilir.\na bibliography\n---\ntitle: \"My Paper\"\nauthor: \"Me\"\noutput:\n  html_document:\n    toc: true\nbibliography: refs.bib\ncsl: apa.csl\n---\n\n\nEndNote veya Zotero gibi çoğu referans yazılımı BibTeX formatına aktarabilen dışa aktarma seçeneklerine sahiptir. Ortaya çıkan dosyadaki kısa adları kontrol etmeniz yeterlidir.\n\n\n\n\n\n\n!!!\n\n\n\nBir referans programı kullanmak hayatınızı çok daha kolaylaştıracaktır. Zotero muhtemelen en iyisidir.\n\n\nDışa aktarılan dosya şu şekilde görünmelidir:\n\n@article{kathawalla_easing_2021,\n    title = {Easing {Into} {Open} {Science}: {A} {Guide} for {Graduate} {Students} and {Their} {Advisors}},\n    volume = {7},\n    issn = {2474-7394},\n    shorttitle = {Easing {Into} {Open} {Science}},\n    url = {https://doi.org/10.1525/collabra.18684},\n    doi = {10.1525/collabra.18684},\n    abstract = {This article provides a roadmap to assist graduate students and their advisors to engage in open science practices. We suggest eight open science practices that novice graduate students could begin adopting today. The topics we cover include journal clubs, project workflow, preprints, reproducible code, data sharing, transparent writing, preregistration, and registered reports. To address concerns about not knowing how to engage in open science practices, we provide a difficulty rating of each behavior (easy, medium, difficult), present them in order of suggested adoption, and follow the format of what, why, how, and worries. We give graduate students ideas on how to approach conversations with their advisors/collaborators, ideas on how to integrate open science practices within the graduate school framework, and specific resources on how to engage with each behavior. We emphasize that engaging in open science behaviors need not be an all or nothing approach, but rather graduate students can engage with any number of the behaviors outlined.},\n    number = {1},\n    urldate = {2022-09-07},\n    journal = {Collabra: Psychology},\n    author = {Kathawalla, Ummul-Kiram and Silverstein, Priya and Syed, Moin},\n    month = jan,\n    year = {2021},\n    pages = {18684},\n}\n\n\n\nReferansları manuel olarak da ekleyebilirsiniz. RStudio’da File &gt; New File... &gt; Text File seçeneğine gidin. &gt; Metin Dosyası’na gidin ve dosyayı “refs.bib” olarak kaydedin.\nArdından, YAML başlığınıza bibliography: refs.bib satırını ekleyin.\n\n\n\nBir dergi makalesine aşağıdaki formatta referanslar ekleyebilirsiniz:\n@article{shortname,\n  author = {Author One and Author Two and Author Three},\n  title = {Paper Title},\n  journal = {Journal Title},\n  volume = {vol},\n  number = {issue},\n  pages = {startpage--endpage},\n  year = {year},\n  doi = {doi}\n}\nKitaplara, teknik raporlara ve daha fazlasına atıfta bulunma talimatları için BibTeX formatına ilişkin eksiksiz bir kılavuza bakın.\ncitation() ve toBibtex() fonksiyonlarını kullanarak bir R paketi için referans alabilirsiniz. Bibtex girişini bibliography.bib dosyanıza yapıştırabilirsiniz. Referansa atıfta bulunmak için ilk virgülden önce kısa bir ad (örneğin, “ggplot2”) eklediğinizden emin olun.\nSee A complete guide to the BibTeX format kitaplara, teknik raporlara ve daha fazlasına atıfta bulunma talimatları için.\nBir R paketinin referansını citation() ve toBibtex() fonksiyonlarını kullanarak alabilirsiniz. Bibtex girişini bibliography.bib dosyanıza yapıştırabilirsiniz. Referansa atıfta bulunmak için ilk virgülden önce kısa bir ad (örneğin, “ggplot2”) eklediğinizden emin olun.\n\n\nCode\ncitation(package=\"ggplot2\") %&gt;% toBibtex()\n\n\n@Book{,\n  author = {Hadley Wickham},\n  title = {ggplot2: Elegant Graphics for Data Analysis},\n  publisher = {Springer-Verlag New York},\n  year = {2016},\n  isbn = {978-3-319-24277-4},\n  url = {https://ggplot2.tidyverse.org},\n}\n\n\nGoogle Scholar girişlerinde BibTeX atıf seçeneği vardır. DOI’yi kendiniz eklemeniz gerekse de, Zotero tarayıcı bağlayıcısı aracılığıyla bir atıf ekleyemiyorsanız, ilgili değerleri almanın en kolay yolu genellikle budur. Önerilen kısa adı koruyabilir veya sizin için daha anlamlı olan bir adla değiştirebilirsiniz.\n\n\n\n\n\nGet BibTex citations from Google Scholar.\n\n\n\n\n\n\n\nMetin içinde referansları bu şekilde gösterebilirsiniz:\nThis tutorial uses several R packages [@tidyverse;@rmarkdown].\nBu eğitimde çeşitli R paketleri kullanılmaktadır (Allaire vd., 2018; Wickham, 2017).\n\n\n\nBir öğeyi kaynak göstermeden referans bölümüne eklemek istiyorsanız, bunu YAML başlığına şu şekilde ekleyin:\nnocite: |\n  @kathawalla_easing_2021, @broman2018data, @nordmann2022data\nYa da .bib dosyasındaki tüm öğeleri şu şekilde ekleyin:\nnocite: '@*'\n\n\n\nÇeşitli dergiler için stil dosyalarının bir listesini arayabilir ve kaynakçanızı belirli bir derginin stiline göre biçimlendirecek bir dosya indirebilirsiniz. YAML başlığınıza csl: filename.csl satırını eklemeniz gerekir.\n\nrefs.bib dosyanıza bazı alıntılar ekleyin, metninizde bunlara atıfta bulunun ve otomatik olarak oluşturulan referans bölümünü görmek için makalenizi işleyin. Birkaç farklı atıf stili dosyası deneyin.\n\n\n\n\nVarsayılan olarak, referans bölümü belgenin sonuna eklenir. Konumu değiştirmek istiyorsanız (örneğin, referanslardan sonra şekil ve tablo eklemek için), referansları istediğiniz yere &lt;div id=\"refs\"&gt;&lt;/div&gt; ekleyin.\n\nRaporunuza metin içi alıntılar ve bir referans listesi ekleyin."
  },
  {
    "objectID": "06_Rmarkdown.html#özel-şablonlar",
    "href": "06_Rmarkdown.html#özel-şablonlar",
    "title": "Rapor Hazırlama",
    "section": "",
    "text": "Bazı paketler özel R Markdown şablonları sağlar. reprores, YAML başlığındaki tüm olası seçenekleri gösteren, kaynakça ve stil dosyalarına sahip olan ve bağlantılı şekil ve tabloların nasıl ayarlanacağını açıklayan bir Rapor şablonuna sahiptir. Birden fazla dosya içerdiğinden, RStudio sizden tüm dosyaları tutmak için yeni bir klasör oluşturmanızı isteyecektir.\nÖdevinizi yapmak için aşağdaki kodla reproses pakeini yükleyebilirsiniz.\n\n\nCode\n# devtools::install_github(\"psyteachr/reprores-v3\")\n\n\nDaha sonra aşağıdaki gibi taslağı (template) açabilirsiniz. Örnek dosyayı inceledikten sonra kendi içerieğinizi oluşturabilirsiniz.\n\n\n\n\n\nŞablonlar\n\n\n\n\n\nRapor şablonu ile bir rapor başlatın ve örün. Seçenekleri değiştirmeyi veya silmeyi deneyin."
  },
  {
    "objectID": "06_Rmarkdown.html#ödev",
    "href": "06_Rmarkdown.html#ödev",
    "title": "Rapor Hazırlama",
    "section": "",
    "text": "rpubs sayfalarını oluşturup, bu bilgiyi bana ulaştırınız.\nrpubs sayfasında ilk dört haftada öğrendiklerinizin kısa bir özetini paylaşınız.\nAyrıca linkte yer alan çoklu regresyon ile ilgili dökümanı repores paketinin Report şablonu ile oluşturmanızı bekliyorum. Bu dökümana eklenmiş ayrıca bir adet görsel bulunmaktadır. Görsele buradan ulaşabilirsiniz. Bu ödeviniz gönderdiğim dosyaya benzerliğine göre puanlanacaktır.\nnot: Şablonda (templatede) alan YMAL header css: extras/style.css # path to css file kısmını siliniz."
  },
  {
    "objectID": "06_Rmarkdown.html#diğer-kaynaklar",
    "href": "06_Rmarkdown.html#diğer-kaynaklar",
    "title": "Rapor Hazırlama",
    "section": "",
    "text": "Chapter 27: R Markdown in R for Data Science\nR Markdown Cheat Sheet\nR Markdown reference Guide\nR Markdown Tutorial\nR Markdown: The Definitive Guide by Yihui Xie, J. J. Allaire, & Garrett Grolemund\nProject Structure by Danielle Navarro\nHow to name files by Jenny Bryan\nPapaja Reproducible APA Manuscripts\nThe Turing Way"
  },
  {
    "objectID": "08_fonk.html",
    "href": "08_fonk.html",
    "title": "Fonksiyonlar",
    "section": "",
    "text": "En sık kullandığımız fonksiyonlar\n\n\n\n\n\n\n\noluşturma\nc(), rep(), seq(), numeric(), character(), factor(), logical(), matrix(), array(), data.frame(), list()\n\n\nKaydetme\nsave(), load()\n\n\nokuma/yazma\nread(),write()\n\n\ndönüştürme\nas.numeric(),as.character(),as.factor(),as.logical(), as.matrix(), as.array(), as.data.frame(), as.list()\n\n\nisimlendirme\nnames(), clonames(), rownames()\n\n\nindeksleme\n[ i ] (vektör için), [ i, j] (matris ve data frame için),\n[ i, j, k, …] (dizi için), [ [ k ] ] (liste için)\nj, k, tam sayı, karakter ya da mantıksal ifade olabilir\n\n\nbirleştirme\nc(), paste(), cbind(), rbind(), merge()\n\n\nsıralama\norder(), arrange()\n\n\ntur\nclass(), length(), dim(), nrow(), ncol() ………\n\n\n\nFonksiyon yazmak, bir R programcısının temel faaliyetlerinden biridir. Sadece bir “kullanıcıdan” R için yeni fonksiyonlar yaratan bir geliştiriciye geçişin temel adımını temsil eder. Fonksiyonlar genellikle, belki de biraz farklı koşullar altında birçok kez yürütülmesi gereken bir dizi ifadeyi kapsüllemek için kullanılır. Fonksiyonlar ayrıca genellikle kodun başkalarıyla veya kamuyla paylaşılması gerektiğinde yazılır.\nBir fonksiyonun yazılması, bir geliştiricinin koda bir dizi parametre ile açıkça belirtilen bir arayüz oluşturmasına olanak tanır. Bu arayüz, potansiyel kullanıcılara kodun bir soyutlamasını sağlar. Bu soyutlama kullanıcıların hayatını kolaylaştırır çünkü onları kodun nasıl çalıştığına dair her ayrıntıyı bilmek zorunda bırakmaz. Buna ek olarak, bir arayüzün oluşturulması, geliştiricinin kullanıcıya kodun önemli veya en alakalı yönlerini iletmesine olanak tanır.\n\n\nR’deki fonksiyonlar “birinci sınıf nesnelerdir”, yani diğer R nesneleri gibi ele alınabilirler. Daha da önemlisi,\n\nFonksiyonlar diğer fonksiyonlara argüman olarak aktarılabilir. Bu, lapply() ve sapply() gibi çeşitli döngü fonksiyonları için çok kullanışlıdır.\nFonksiyonlar iç içe geçebilir, böylece bir fonksiyonu başka bir fonksiyonun içinde tanımlayabilirsiniz\n\n\n\n\nFonksiyonlar function() kullanılarak tanımlanır ve diğer her şey gibi R nesneleri olarak saklanır. Özellikle, “function” sınıfının R nesneleridirler.\nİşte hiçbir argüman almayan ve hiçbir şey yapmayan basit bir fonksiyon.\n\n\nCode\nf &lt;- function() {\n        ## Bu boş bir fonksiyondur\n}\n## Fonksiyonların kendi sınıfları vardır\nclass(f)  \n\n\n[1] \"function\"\n\n\nCode\n## Bu işlevi çalıştırın\nf()       \n\n\nNULL\n\n\nÇok ilginç değil ama bu da bir başlangıç. Yapabileceğimiz bir sonraki şey, aslında önemsiz olmayan bir fonksiyon gövdesine sahip bir fonksiyon oluşturmaktır.\n\n\nCode\nf &lt;- function() {\n        cat(\"Merhaba!\\n\")\n}\nf()\n\n\nMerhaba!\n\n\nTemel bir fonksiyonun son unsuru fonksiyon argümanlarıdır. Bunlar, kullanıcıya belirtebileceğiniz ve kullanıcının açıkça ayarlayabileceği seçeneklerdir. Bu temel fonksiyon için, konsola kaç kez “Merhaba!” yazdırılacağını belirleyen bir argüman ekleyebiliriz.\n\n\nCode\n# f &lt;- function(num) {\n#         for(i in seq_len(num)) {\n#                 cat(\"Merhaba!\\n\")\n#         }\n# }\n# f(3)\n\n\nAçıkçası, aynı etki için sadece cat(\"Merhaba!\\n\") üç kere kesip yapıştırabilirdik. Ama o zaman programlama yapmıyor olurduk. Ayrıca, kodunuzu bir başkasına vermeniz ve onu kodu istediği kadar kesip yapıştırmaya zorlamanız da iyi olmayacaktır:) “Merhaba!”.\n\nGenel olarak, kendinizi çok fazla kesme ve yapıştırma yaparken bulursanız, bu genellikle bir fonksiyon yazmanız gerekebileceğine dair iyi bir işarettir.\n\nR’da uzmanlaştıkça ve yapılan işler karmaşıklaştıkça fonksiyon yazma ihtiyacı duyulmaktadır. Fonksiyon yazma gereksinimi özellikle tekrarlı işlemler yapılması gerektiği durumda ortaya çıkmaktadır. Fonksiyon yazmak\n- pratiklik kazandırır (ekonomiktir)\n- Paylaşılmasını koylaştırır.\n- Tekrar kullanılabilirlik sağlar.\nTekrarlı işlemlerde hatalardan kurtulmanın yolu fonksiyon kullanmaktır. Fonksiyonlar, koşullu önermeler ve döngüler ile kullanılarak çok sayıda komut ile yapılabilecek olan işlemler tek bir komut satırı ile yapılabilir hale gelmektedir\nSon olarak, yukarıdaki fonksiyon hiçbir şey döndürmez. Sadece konsola tekrar sayıda “Merhaba!” yazdırır ve sonra çıkar. Ancak bir fonksiyonun, belki de kodun başka bir bölümüne beslenebilecek bir şey döndürmesi genellikle yararlıdır.\nSıradaki fonksiyon konsola yazdırılan toplam karakter sayısını döndürür.\n\n\nCode\n# f &lt;- function(tekrar) {\n#         Merhaba &lt;- \"Merhaba!\\n\"\n#         for(i in seq_len(tekrar)) {\n#                 cat(Merhaba)\n#         }\n#         chars &lt;- nchar(Merhaba) * tekrar\n#         chars\n# }\n# f(3)\n\n\nYukarıdaki fonksiyonda, fonksiyonun karakter sayısını döndürmesi için özel bir şey belirtmemiz gerekmedi. R’de, bir fonksiyonun geri dönüş değeri her zaman değerlendirilen en son ifadedir. Bu fonksiyonda değerlendirilen son ifade chars değişkeni olduğu için, fonksiyonun dönüş değeri de bu olur.\nBir fonksiyondan açık bir değer döndürmek için kullanılabilecek bir return() fonksiyonu olduğunu unutmayın, ancak nadiren kullanılır.\nSon olarak, yukarıdaki fonksiyonda, kullanıcı tekrar argümanının değerini belirtmelidir. Eğer kullanıcı tarafından belirtilmezse, R bir hata verecektir.\n\n\nCode\nf()\n\n\nMerhaba!\n\n\nBu davranışı tekrar argümanı için bir varsayılan değer belirleyerek değiştirebiliriz. Belirtmek isterseniz, herhangi bir fonksiyon argümanının varsayılan bir değeri olabilir. Bazen, argüman değerleri nadiren değiştirilir (özel durumlar hariç) ve bu argüman için bir varsayılan değer ayarlamak mantıklıdır. Bu, kullanıcıyı fonksiyon her çağrıldığında bu argümanın değerini belirtme zorunluluğundan kurtarır.\nÖrneğin, burada tekrar için varsayılan değeri 1 olarak ayarlayabiliriz, böylece fonksiyon tekrar argümanı açıkça belirtilmeden çağrılırsa, konsola bir kez “Merhaba!” yazdırır.\n\n\nCode\n# f &lt;- function(tekrar = 1) {\n#         Merhaba &lt;- \"Merhaba!\\n\"\n#         for(i in seq_len(tekrar)) {\n#                 cat(Merhaba)\n#         }\n#         chars &lt;- nchar(Merhaba) * tekrar\n#         chars\n# }\n# f()    ## 'tekrar' için varsayılan değeri kullan\n# f(2)   ## Kullanıcı tarafından belirtilen değeri kullan\n\n\nFonksiyonun hala konsola yazdırılan karakter sayısını döndürdüğünü unutmayın.\nBu noktada, bir fonksiyon yazdık\n\nfonksiyonunun tekrar adında ve varsayılan değeri 1 olan bir formal argümanı vardır. formal argümanlar fonksiyon tanımına dahil edilen argümanlardır. formals() fonksiyonu bir fonksiyonun tüm biçimsel argümanlarının bir listesini döndürür\n“Merhaba!” mesajını tekrar argümanıyla belirtilen sayıda konsola yazdırır\n*konsola yazdırılan karakter sayısını döndürür\n\nFonksiyonlar, isteğe bağlı olarak varsayılan değerlere sahip olabilen isimli argümanlara sahiptir. Tüm fonksiyon argümanlarının adları olduğundan, bunlar adları kullanılarak belirtilebilir.\n\n\nCode\n# f(tekrar = 2)\n\n\nBir fonksiyonun çok sayıda argümanı varsa ve hangi argümanın belirtildiği her zaman net olmayabilirse, bir argümanı adıyla belirtmek bazen yararlıdır. Burada, fonksiyonumuzun yalnızca bir argümanı vardır, bu nedenle herhangi bir karışıklık olmaz.\n\n\n\nBir R fonksiyonunu argümanlarla çağırmak çeşitli şekillerde yapılabilir. Bu ilk başta kafa karıştırıcı olabilir, ancak komut satırında etkileşimli çalışma yaparken gerçekten kullanışlıdır. R fonksiyonları argümanları konumsal olarak veya isme göre eşleştirilebilir. Konumsal eşleştirme, R’nin ilk değeri ilk argümana, ikinci değeri ikinci argümana vb. atadığı anlamına gelir. Yani aşağıdaki rnorm() çağrısında\n\n\nCode\nstr(rnorm)\n\n\nfunction (n, mean = 0, sd = 1)  \n\n\nCode\nmydata &lt;- rnorm(100, 2, 1)              ## Bazı veriler oluşturun\n\n\n100, n argümanına, 2 ortalama argümanına ve 1 sd argümanına atanır, hepsi de konum eşleştirmesi ile yapılır.\nAşağıdaki sd() fonksiyonu (bir sayı vektörünün ampirik standart sapmasını hesaplar) çağrılarının tümü eşdeğerdir. sd()fonksiyonunun iki argümanı olduğunu unutmayın: x sayı vektörünü gösterir ve na.rm eksik değerlerin kaldırılıp kaldırılmayacağını belirten bir mantıksaldır.\n\n\nCode\n## Konumsal eşleşme ilk argüman, na.rm için varsayılan\nsd(mydata)                     \n\n\n[1] 0.9878214\n\n\nCode\n## 'x' argümanını isimle belirtin, varsayılan 'na.rm'\nsd(x = mydata)                 \n\n\n[1] 0.9878214\n\n\nCode\n## Her iki argümanı da adla belirtin\nsd(x = mydata, na.rm = FALSE)  \n\n\n[1] 0.9878214\n\n\nFonksiyon argümanlarını isimle belirtirken, bunları hangi sırada belirttiğiniz önemli değildir. Aşağıdaki örnekte, fonksiyon tanımında tanımlanan ilk argüman x olmasına rağmen, önce na.rm argümanını, ardından x argümanını belirtiyoruz.\n\n\nCode\n## Her iki argümanı da adla belirtin\nsd(na.rm = FALSE, x = mydata)     \n\n\n[1] 0.9878214\n\n\nKonumsal eşleştirme ile ada göre eşleştirmeyi karıştırabilirsiniz. Bir argüman isme göre eşleştirildiğinde, argüman listesinden “çıkarılır” ve kalan isimsiz argümanlar fonksiyon tanımında listelendikleri sırayla eşleştirilir.\n\n\nCode\nsd(na.rm = FALSE, mydata)\n\n\n[1] 0.9878214\n\n\nBurada, mydata nesnesi x argümanına atanır, çünkü henüz belirtilmemiş tek argüman budur.\nAşağıda, bir veri kümesine doğrusal modeller uyduran lm() fonksiyonunun argüman listesi yer almaktadır.\n\n\nCode\nargs(lm)\n\n\nfunction (formula, data, subset, weights, na.action, method = \"qr\", \n    model = TRUE, x = FALSE, y = FALSE, qr = TRUE, singular.ok = TRUE, \n    contrasts = NULL, offset, ...) \nNULL\n\n\nAşağıdaki iki kod satırı eşdeğerdir.\nlm(data = mydata, y ~ x, model = FALSE, 1:100)\nlm(y ~ x, mydata, 1:100, model = FALSE)\nBu işlem güvenli olsa da, bazı karışıklıklara yol açabileceğinden, argümanların sırası ile çok fazla uğraşmanızı önermem.\nÇoğu zaman, adlandırılmış argümanlar komut satırında uzun bir argüman listeniz olduğunda ve listenin sonuna yakın bir argüman dışında her şey için varsayılanları kullanmak istediğinizde kullanışlıdır. Adlandırılmış argümanlar, konumunu değil, argüman adını hatırlayabiliyorsanız da yardımcı olur. Örneğin, çizim fonksiyonları genellikle özelleştirmeye izin vermek için çok sayıda seçeneğe sahiptir, ancak bu, argüman listesindeki her argümanın konumunu tam olarak hatırlamayı zorlaştırır.\nVarsayılan bir değer belirtmemenin yanı sıra, bir argümanın değerini NULL olarak da ayarlayabilirsiniz.\nf &lt;- function(a, b = 1, c = 2, d = NULL) {\n\n}\nBir R nesnesinin NULL olup olmadığını is.null() fonksiyonu ile kontrol edebilirsiniz. Bazen bir argümanın NULL değerini almasına izin vermek yararlıdır, bu da fonksiyonun belirli bir işlem yapması gerektiğini gösterebilir.\nKullanışlı bir fonksiyon yazmak için mümkün olduğunca kısa isimler kullanılmalıdır; bununla birlikte bu isimler kullanıcıya yapılacak işlemi anlaşılırkılmalıdır. Bunun yanında R’da özel anlamı olan c,C,D,F,I,q,t,T gibi tek harfl ik fonksiyon isimleri kullanmaktan ve R’da hazır olan fonksiyon isimlerini kişisel tanımlı fonksiyonlara vermekten kaçınılmalıdır.\n\n\n\nR’de ... argümanı olarak bilinen ve genellikle diğer fonksiyonlara aktarılan değişken sayıda argümanı gösteren özel bir argüman vardır. ... argümanı genellikle başka bir fonksiyonu genişletirken kullanılır ve orijinal fonksiyonun tüm argüman listesini kopyalamak istemezsiniz\nÖrneğin, özel bir çizim fonksiyonu varsayılan plot() fonksiyonunu tüm argüman listesiyle birlikte kullanmak isteyebilir. Aşağıdaki fonksiyon type argümanı için varsayılanı type = \"l\" değerine değiştirir (orijinal varsayılan type = \"p\" idi).\nmyplot &lt;- function(x, y, type = \"l\", ...) {\n        plot(x, y, type = type, ...)         ## '...'yi 'plot' işlevine geçirin\n}\nJenerik fonksiyonlar, metotlara ekstra argümanlar aktarılabilmesi için ... kullanır.\n\n\nCode\nmean\n\n\nfunction (x, ...) \nUseMethod(\"mean\")\n&lt;bytecode: 0x00000256dcf29610&gt;\n&lt;environment: namespace:base&gt;\n\n\nFonksiyona aktarılan argüman sayısı önceden bilinemediğinde ... argümanı gereklidir. Bu durum paste() ve cat() gibi fonksiyonlarda açıkça görülmektedir.\n\n\nCode\nargs(paste)\n\n\nfunction (..., sep = \" \", collapse = NULL, recycle0 = FALSE) \nNULL\n\n\nCode\nargs(cat)\n\n\nfunction (..., file = \"\", sep = \" \", fill = FALSE, labels = NULL, \n    append = FALSE) \nNULL\n\n\nHem paste() hem de cat() birden fazla karakter vektörünü bir araya getirerek konsola metin yazdırdığından, bu fonksiyonların kullanıcı tarafından fonksiyona kaç karakter vektörü aktarılacağını önceden bilmesi imkansızdır. Bu yüzden her iki fonksiyonun da ilk argümanı ... şeklindedir.\n\n\n\n... ile ilgili bir sorun, argüman listesinde after... olarak görünen herhangi bir argümanın açıkça adlandırılması gerektiği ve kısmen eşleştirilemeyeceği veya konum olarak eşleştirilemeyeceğidir.\npaste() fonksiyonunun argümanlarına bir göz atın.\n\n\nCode\nargs(paste)\n\n\nfunction (..., sep = \" \", collapse = NULL, recycle0 = FALSE) \nNULL\n\n\npaste() fonksiyonu ile,sepvecollapse argümanları, varsayılan değerler kullanılmayacaksa, açıkça ve tam olarak adlandırılmalıdır.\nBurada “a” ve “b”nin birlikte yapıştırılmasını ve iki nokta üst üste ile ayrılmasını istediğimi belirtiyorum.\n\n\nCode\npaste(\"a\", \"b\", sep = \":\")\n\n\n[1] \"a:b\"\n\n\nEğer sep argümanını tam olarak belirtmezsem ve kısmi eşleştirmeye güvenmeye çalışırsam, beklenen sonucu alamıyorum.\n\n\nCode\npaste(\"a\", \"b\", se = \":\")\n\n\n[1] \"a b :\"\n\n\n\n\n\nFonksiyon yazmak kadar iyi bir fonksiyon yazmak da önemlidir. İyi bir fonksiyonun ilk özelliği doğru sonucu veriyor olmasıdır.\nBunu sağlayabilmek için fonksiyon yazmadan önce problemi iyi tanımlamakve problemin çözümünü komut satırları ile yazmak daha sonra bunufonksiyona dönüştürmek gereklidir.\nBir fonksiyonun doğru sonucu vermesi kadar diğer kullanıcılar tarafından anlaşılır olması da önemlidir.\n\nÖnce bir taslak oluşturun.\nTaslağınızı içine komut satırlarınıza yapıştırın\nFonksiyonun argümanları belirleyin\nArgüman isimlerinizi kullanacağınız değişkenlerle değiştirin\n\n\n\n\n\nİstenilen sayıda veri seti oluşturan bir fonksiyon yazalım. Fonksiyonun ilk girdisi veri seti sayısı olmalı, varsayılan olarak bir veri seti oluşturalan fonksiyon taslağı oluşturalım.\n\nfonksiyon_adi &lt;- function(sayi=1){\n\n}\n\nKullanıcı oluşturmak istediği her bir veri seti için satır ve sütun sayısını belirleyebilirsin. Satır ve sütun sayısını argüman olarak tanımlayalım. Örneğin oluşturduğu ilk veri setin 5 satır, 10 sütunlu ikincisi olsun. Bunun için argümana varsayalin değerler atayalım\n\nfonksiyon_adi &lt;- function(sayi=1,satir=c(5),sutun=c(10)){\n\n}\n\nOluşturacak olan her bir veri setinin her bir sütunu standart normal dağılıma uygun olacak şekilde üretilsin. Oluşturulan veri setlerinden ilki “veri_1.xlsx” şeklinde çalışma alanına yazdırılsın\n\n\n\nCode\nfonksiyon_adi &lt;- function(sayi=1,satir=c(5),sutun=c(10)){\n\n    df &lt;- data.frame(matrix(0,nrow=satir, ncol=sutun))\n     writexl::write_xlsx(df,\"veri_1.xlsx\")\n}\nfonksiyon_adi(sayi=1,satir=c(5),sutun=c(10))\n\n\n\nŞimdi ise bu fonksiyonu çoklu dosya yazımına uygun hale getirelim\n\n\n\nCode\nfonksiyon_adi &lt;- function(sayi=3,satir=c(5,5,5),sutun=c(10,10,10)){\n    \n  df_list &lt;- list() ## her bir veri setinin atanacağı yeni nesne\n    \n    for( i in 1:sayi){\n    df &lt;- data.frame(matrix(0,nrow=satir[i], ncol=sutun[i])) # veri seti istenilen ozelliklerde olusturulur\n    }\n     for(j in 1:sutun[i]){\n     df[,j] &lt;- round(rnorm(satir[i],0,1),2) #  her bir veri setinin her bir sütunu standart normal dağılıma uygun uretilir\n    }\n     df_list[[i]] &lt;- df\n      df_list\n      writexl::write_xlsx(df_list[[i]],paste(\"veri\",i,\".xlsx\", sep=\"\"))\n}\nfonksiyon_adi(sayi=3,satir=c(5,4,3),sutun=c(10,5,4))\n\n\n\n\nGeometrik ortalamanın farklı hesaplama yolları bulunmaktadır. Logaritma değerlerine dayalı olarak hesaplandığında, geometrik ortalama,gözlem değerlerinin logaritmalarının aritmetik ortalamasıdır. Bir x vektorunun geometrik ortalamaasını logartimalara dayalı olarakhesaplayan bir fonsiyon yazıp, x &lt;- 1:100 için çalıştırınız.\n\n\n\n\n\nFonksiyonlar function() direktifi kullanılarak tanımlanabilir ve diğer R nesneleri gibi R nesnelerine atanır\nFonksiyonlar adlandırılmış argümanlarla tanımlanabilir; bu fonksiyon argümanlarının varsayılan değerleri olabilir\nFonksiyon argümanları isme göre veya argüman listesindeki konuma göre belirtilebilir\nFonksiyonlar her zaman fonkisyon gövdesinde değerlendirilen son ifadeyi döndürür\nBir fonksiyon tanımında özel ... argümanı kullanılarak değişken sayıda argüman belirtilebilir."
  },
  {
    "objectID": "08_fonk.html#rda-fonkisyonlar",
    "href": "08_fonk.html#rda-fonkisyonlar",
    "title": "Fonksiyonlar",
    "section": "",
    "text": "R’deki fonksiyonlar “birinci sınıf nesnelerdir”, yani diğer R nesneleri gibi ele alınabilirler. Daha da önemlisi,\n\nFonksiyonlar diğer fonksiyonlara argüman olarak aktarılabilir. Bu, lapply() ve sapply() gibi çeşitli döngü fonksiyonları için çok kullanışlıdır.\nFonksiyonlar iç içe geçebilir, böylece bir fonksiyonu başka bir fonksiyonun içinde tanımlayabilirsiniz"
  },
  {
    "objectID": "08_fonk.html#ilk-fonksiyon",
    "href": "08_fonk.html#ilk-fonksiyon",
    "title": "Fonksiyonlar",
    "section": "",
    "text": "Fonksiyonlar function() kullanılarak tanımlanır ve diğer her şey gibi R nesneleri olarak saklanır. Özellikle, “function” sınıfının R nesneleridirler.\nİşte hiçbir argüman almayan ve hiçbir şey yapmayan basit bir fonksiyon.\n\n\nCode\nf &lt;- function() {\n        ## Bu boş bir fonksiyondur\n}\n## Fonksiyonların kendi sınıfları vardır\nclass(f)  \n\n\n[1] \"function\"\n\n\nCode\n## Bu işlevi çalıştırın\nf()       \n\n\nNULL\n\n\nÇok ilginç değil ama bu da bir başlangıç. Yapabileceğimiz bir sonraki şey, aslında önemsiz olmayan bir fonksiyon gövdesine sahip bir fonksiyon oluşturmaktır.\n\n\nCode\nf &lt;- function() {\n        cat(\"Merhaba!\\n\")\n}\nf()\n\n\nMerhaba!\n\n\nTemel bir fonksiyonun son unsuru fonksiyon argümanlarıdır. Bunlar, kullanıcıya belirtebileceğiniz ve kullanıcının açıkça ayarlayabileceği seçeneklerdir. Bu temel fonksiyon için, konsola kaç kez “Merhaba!” yazdırılacağını belirleyen bir argüman ekleyebiliriz.\n\n\nCode\n# f &lt;- function(num) {\n#         for(i in seq_len(num)) {\n#                 cat(\"Merhaba!\\n\")\n#         }\n# }\n# f(3)\n\n\nAçıkçası, aynı etki için sadece cat(\"Merhaba!\\n\") üç kere kesip yapıştırabilirdik. Ama o zaman programlama yapmıyor olurduk. Ayrıca, kodunuzu bir başkasına vermeniz ve onu kodu istediği kadar kesip yapıştırmaya zorlamanız da iyi olmayacaktır:) “Merhaba!”.\n\nGenel olarak, kendinizi çok fazla kesme ve yapıştırma yaparken bulursanız, bu genellikle bir fonksiyon yazmanız gerekebileceğine dair iyi bir işarettir.\n\nR’da uzmanlaştıkça ve yapılan işler karmaşıklaştıkça fonksiyon yazma ihtiyacı duyulmaktadır. Fonksiyon yazma gereksinimi özellikle tekrarlı işlemler yapılması gerektiği durumda ortaya çıkmaktadır. Fonksiyon yazmak\n- pratiklik kazandırır (ekonomiktir)\n- Paylaşılmasını koylaştırır.\n- Tekrar kullanılabilirlik sağlar.\nTekrarlı işlemlerde hatalardan kurtulmanın yolu fonksiyon kullanmaktır. Fonksiyonlar, koşullu önermeler ve döngüler ile kullanılarak çok sayıda komut ile yapılabilecek olan işlemler tek bir komut satırı ile yapılabilir hale gelmektedir\nSon olarak, yukarıdaki fonksiyon hiçbir şey döndürmez. Sadece konsola tekrar sayıda “Merhaba!” yazdırır ve sonra çıkar. Ancak bir fonksiyonun, belki de kodun başka bir bölümüne beslenebilecek bir şey döndürmesi genellikle yararlıdır.\nSıradaki fonksiyon konsola yazdırılan toplam karakter sayısını döndürür.\n\n\nCode\n# f &lt;- function(tekrar) {\n#         Merhaba &lt;- \"Merhaba!\\n\"\n#         for(i in seq_len(tekrar)) {\n#                 cat(Merhaba)\n#         }\n#         chars &lt;- nchar(Merhaba) * tekrar\n#         chars\n# }\n# f(3)\n\n\nYukarıdaki fonksiyonda, fonksiyonun karakter sayısını döndürmesi için özel bir şey belirtmemiz gerekmedi. R’de, bir fonksiyonun geri dönüş değeri her zaman değerlendirilen en son ifadedir. Bu fonksiyonda değerlendirilen son ifade chars değişkeni olduğu için, fonksiyonun dönüş değeri de bu olur.\nBir fonksiyondan açık bir değer döndürmek için kullanılabilecek bir return() fonksiyonu olduğunu unutmayın, ancak nadiren kullanılır.\nSon olarak, yukarıdaki fonksiyonda, kullanıcı tekrar argümanının değerini belirtmelidir. Eğer kullanıcı tarafından belirtilmezse, R bir hata verecektir.\n\n\nCode\nf()\n\n\nMerhaba!\n\n\nBu davranışı tekrar argümanı için bir varsayılan değer belirleyerek değiştirebiliriz. Belirtmek isterseniz, herhangi bir fonksiyon argümanının varsayılan bir değeri olabilir. Bazen, argüman değerleri nadiren değiştirilir (özel durumlar hariç) ve bu argüman için bir varsayılan değer ayarlamak mantıklıdır. Bu, kullanıcıyı fonksiyon her çağrıldığında bu argümanın değerini belirtme zorunluluğundan kurtarır.\nÖrneğin, burada tekrar için varsayılan değeri 1 olarak ayarlayabiliriz, böylece fonksiyon tekrar argümanı açıkça belirtilmeden çağrılırsa, konsola bir kez “Merhaba!” yazdırır.\n\n\nCode\n# f &lt;- function(tekrar = 1) {\n#         Merhaba &lt;- \"Merhaba!\\n\"\n#         for(i in seq_len(tekrar)) {\n#                 cat(Merhaba)\n#         }\n#         chars &lt;- nchar(Merhaba) * tekrar\n#         chars\n# }\n# f()    ## 'tekrar' için varsayılan değeri kullan\n# f(2)   ## Kullanıcı tarafından belirtilen değeri kullan\n\n\nFonksiyonun hala konsola yazdırılan karakter sayısını döndürdüğünü unutmayın.\nBu noktada, bir fonksiyon yazdık\n\nfonksiyonunun tekrar adında ve varsayılan değeri 1 olan bir formal argümanı vardır. formal argümanlar fonksiyon tanımına dahil edilen argümanlardır. formals() fonksiyonu bir fonksiyonun tüm biçimsel argümanlarının bir listesini döndürür\n“Merhaba!” mesajını tekrar argümanıyla belirtilen sayıda konsola yazdırır\n*konsola yazdırılan karakter sayısını döndürür\n\nFonksiyonlar, isteğe bağlı olarak varsayılan değerlere sahip olabilen isimli argümanlara sahiptir. Tüm fonksiyon argümanlarının adları olduğundan, bunlar adları kullanılarak belirtilebilir.\n\n\nCode\n# f(tekrar = 2)\n\n\nBir fonksiyonun çok sayıda argümanı varsa ve hangi argümanın belirtildiği her zaman net olmayabilirse, bir argümanı adıyla belirtmek bazen yararlıdır. Burada, fonksiyonumuzun yalnızca bir argümanı vardır, bu nedenle herhangi bir karışıklık olmaz."
  },
  {
    "objectID": "08_fonk.html#argüman-eşleştirme",
    "href": "08_fonk.html#argüman-eşleştirme",
    "title": "Fonksiyonlar",
    "section": "",
    "text": "Bir R fonksiyonunu argümanlarla çağırmak çeşitli şekillerde yapılabilir. Bu ilk başta kafa karıştırıcı olabilir, ancak komut satırında etkileşimli çalışma yaparken gerçekten kullanışlıdır. R fonksiyonları argümanları konumsal olarak veya isme göre eşleştirilebilir. Konumsal eşleştirme, R’nin ilk değeri ilk argümana, ikinci değeri ikinci argümana vb. atadığı anlamına gelir. Yani aşağıdaki rnorm() çağrısında\n\n\nCode\nstr(rnorm)\n\n\nfunction (n, mean = 0, sd = 1)  \n\n\nCode\nmydata &lt;- rnorm(100, 2, 1)              ## Bazı veriler oluşturun\n\n\n100, n argümanına, 2 ortalama argümanına ve 1 sd argümanına atanır, hepsi de konum eşleştirmesi ile yapılır.\nAşağıdaki sd() fonksiyonu (bir sayı vektörünün ampirik standart sapmasını hesaplar) çağrılarının tümü eşdeğerdir. sd()fonksiyonunun iki argümanı olduğunu unutmayın: x sayı vektörünü gösterir ve na.rm eksik değerlerin kaldırılıp kaldırılmayacağını belirten bir mantıksaldır.\n\n\nCode\n## Konumsal eşleşme ilk argüman, na.rm için varsayılan\nsd(mydata)                     \n\n\n[1] 0.9878214\n\n\nCode\n## 'x' argümanını isimle belirtin, varsayılan 'na.rm'\nsd(x = mydata)                 \n\n\n[1] 0.9878214\n\n\nCode\n## Her iki argümanı da adla belirtin\nsd(x = mydata, na.rm = FALSE)  \n\n\n[1] 0.9878214\n\n\nFonksiyon argümanlarını isimle belirtirken, bunları hangi sırada belirttiğiniz önemli değildir. Aşağıdaki örnekte, fonksiyon tanımında tanımlanan ilk argüman x olmasına rağmen, önce na.rm argümanını, ardından x argümanını belirtiyoruz.\n\n\nCode\n## Her iki argümanı da adla belirtin\nsd(na.rm = FALSE, x = mydata)     \n\n\n[1] 0.9878214\n\n\nKonumsal eşleştirme ile ada göre eşleştirmeyi karıştırabilirsiniz. Bir argüman isme göre eşleştirildiğinde, argüman listesinden “çıkarılır” ve kalan isimsiz argümanlar fonksiyon tanımında listelendikleri sırayla eşleştirilir.\n\n\nCode\nsd(na.rm = FALSE, mydata)\n\n\n[1] 0.9878214\n\n\nBurada, mydata nesnesi x argümanına atanır, çünkü henüz belirtilmemiş tek argüman budur.\nAşağıda, bir veri kümesine doğrusal modeller uyduran lm() fonksiyonunun argüman listesi yer almaktadır.\n\n\nCode\nargs(lm)\n\n\nfunction (formula, data, subset, weights, na.action, method = \"qr\", \n    model = TRUE, x = FALSE, y = FALSE, qr = TRUE, singular.ok = TRUE, \n    contrasts = NULL, offset, ...) \nNULL\n\n\nAşağıdaki iki kod satırı eşdeğerdir.\nlm(data = mydata, y ~ x, model = FALSE, 1:100)\nlm(y ~ x, mydata, 1:100, model = FALSE)\nBu işlem güvenli olsa da, bazı karışıklıklara yol açabileceğinden, argümanların sırası ile çok fazla uğraşmanızı önermem.\nÇoğu zaman, adlandırılmış argümanlar komut satırında uzun bir argüman listeniz olduğunda ve listenin sonuna yakın bir argüman dışında her şey için varsayılanları kullanmak istediğinizde kullanışlıdır. Adlandırılmış argümanlar, konumunu değil, argüman adını hatırlayabiliyorsanız da yardımcı olur. Örneğin, çizim fonksiyonları genellikle özelleştirmeye izin vermek için çok sayıda seçeneğe sahiptir, ancak bu, argüman listesindeki her argümanın konumunu tam olarak hatırlamayı zorlaştırır.\nVarsayılan bir değer belirtmemenin yanı sıra, bir argümanın değerini NULL olarak da ayarlayabilirsiniz.\nf &lt;- function(a, b = 1, c = 2, d = NULL) {\n\n}\nBir R nesnesinin NULL olup olmadığını is.null() fonksiyonu ile kontrol edebilirsiniz. Bazen bir argümanın NULL değerini almasına izin vermek yararlıdır, bu da fonksiyonun belirli bir işlem yapması gerektiğini gösterebilir.\nKullanışlı bir fonksiyon yazmak için mümkün olduğunca kısa isimler kullanılmalıdır; bununla birlikte bu isimler kullanıcıya yapılacak işlemi anlaşılırkılmalıdır. Bunun yanında R’da özel anlamı olan c,C,D,F,I,q,t,T gibi tek harfl ik fonksiyon isimleri kullanmaktan ve R’da hazır olan fonksiyon isimlerini kişisel tanımlı fonksiyonlara vermekten kaçınılmalıdır."
  },
  {
    "objectID": "08_fonk.html#argümanı",
    "href": "08_fonk.html#argümanı",
    "title": "Fonksiyonlar",
    "section": "",
    "text": "R’de ... argümanı olarak bilinen ve genellikle diğer fonksiyonlara aktarılan değişken sayıda argümanı gösteren özel bir argüman vardır. ... argümanı genellikle başka bir fonksiyonu genişletirken kullanılır ve orijinal fonksiyonun tüm argüman listesini kopyalamak istemezsiniz\nÖrneğin, özel bir çizim fonksiyonu varsayılan plot() fonksiyonunu tüm argüman listesiyle birlikte kullanmak isteyebilir. Aşağıdaki fonksiyon type argümanı için varsayılanı type = \"l\" değerine değiştirir (orijinal varsayılan type = \"p\" idi).\nmyplot &lt;- function(x, y, type = \"l\", ...) {\n        plot(x, y, type = type, ...)         ## '...'yi 'plot' işlevine geçirin\n}\nJenerik fonksiyonlar, metotlara ekstra argümanlar aktarılabilmesi için ... kullanır.\n\n\nCode\nmean\n\n\nfunction (x, ...) \nUseMethod(\"mean\")\n&lt;bytecode: 0x00000256dcf29610&gt;\n&lt;environment: namespace:base&gt;\n\n\nFonksiyona aktarılan argüman sayısı önceden bilinemediğinde ... argümanı gereklidir. Bu durum paste() ve cat() gibi fonksiyonlarda açıkça görülmektedir.\n\n\nCode\nargs(paste)\n\n\nfunction (..., sep = \" \", collapse = NULL, recycle0 = FALSE) \nNULL\n\n\nCode\nargs(cat)\n\n\nfunction (..., file = \"\", sep = \" \", fill = FALSE, labels = NULL, \n    append = FALSE) \nNULL\n\n\nHem paste() hem de cat() birden fazla karakter vektörünü bir araya getirerek konsola metin yazdırdığından, bu fonksiyonların kullanıcı tarafından fonksiyona kaç karakter vektörü aktarılacağını önceden bilmesi imkansızdır. Bu yüzden her iki fonksiyonun da ilk argümanı ... şeklindedir."
  },
  {
    "objectID": "08_fonk.html#argümanından-sonra-gelen-argümanlar",
    "href": "08_fonk.html#argümanından-sonra-gelen-argümanlar",
    "title": "Fonksiyonlar",
    "section": "",
    "text": "... ile ilgili bir sorun, argüman listesinde after... olarak görünen herhangi bir argümanın açıkça adlandırılması gerektiği ve kısmen eşleştirilemeyeceği veya konum olarak eşleştirilemeyeceğidir.\npaste() fonksiyonunun argümanlarına bir göz atın.\n\n\nCode\nargs(paste)\n\n\nfunction (..., sep = \" \", collapse = NULL, recycle0 = FALSE) \nNULL\n\n\npaste() fonksiyonu ile,sepvecollapse argümanları, varsayılan değerler kullanılmayacaksa, açıkça ve tam olarak adlandırılmalıdır.\nBurada “a” ve “b”nin birlikte yapıştırılmasını ve iki nokta üst üste ile ayrılmasını istediğimi belirtiyorum.\n\n\nCode\npaste(\"a\", \"b\", sep = \":\")\n\n\n[1] \"a:b\"\n\n\nEğer sep argümanını tam olarak belirtmezsem ve kısmi eşleştirmeye güvenmeye çalışırsam, beklenen sonucu alamıyorum.\n\n\nCode\npaste(\"a\", \"b\", se = \":\")\n\n\n[1] \"a b :\""
  },
  {
    "objectID": "08_fonk.html#yazım-aşamaları",
    "href": "08_fonk.html#yazım-aşamaları",
    "title": "Fonksiyonlar",
    "section": "",
    "text": "Fonksiyon yazmak kadar iyi bir fonksiyon yazmak da önemlidir. İyi bir fonksiyonun ilk özelliği doğru sonucu veriyor olmasıdır.\nBunu sağlayabilmek için fonksiyon yazmadan önce problemi iyi tanımlamakve problemin çözümünü komut satırları ile yazmak daha sonra bunufonksiyona dönüştürmek gereklidir.\nBir fonksiyonun doğru sonucu vermesi kadar diğer kullanıcılar tarafından anlaşılır olması da önemlidir.\n\nÖnce bir taslak oluşturun.\nTaslağınızı içine komut satırlarınıza yapıştırın\nFonksiyonun argümanları belirleyin\nArgüman isimlerinizi kullanacağınız değişkenlerle değiştirin"
  },
  {
    "objectID": "08_fonk.html#çoklu-veri-seti-oluşturma-ve-dışarı-aktarma",
    "href": "08_fonk.html#çoklu-veri-seti-oluşturma-ve-dışarı-aktarma",
    "title": "Fonksiyonlar",
    "section": "",
    "text": "İstenilen sayıda veri seti oluşturan bir fonksiyon yazalım. Fonksiyonun ilk girdisi veri seti sayısı olmalı, varsayılan olarak bir veri seti oluşturalan fonksiyon taslağı oluşturalım.\n\nfonksiyon_adi &lt;- function(sayi=1){\n\n}\n\nKullanıcı oluşturmak istediği her bir veri seti için satır ve sütun sayısını belirleyebilirsin. Satır ve sütun sayısını argüman olarak tanımlayalım. Örneğin oluşturduğu ilk veri setin 5 satır, 10 sütunlu ikincisi olsun. Bunun için argümana varsayalin değerler atayalım\n\nfonksiyon_adi &lt;- function(sayi=1,satir=c(5),sutun=c(10)){\n\n}\n\nOluşturacak olan her bir veri setinin her bir sütunu standart normal dağılıma uygun olacak şekilde üretilsin. Oluşturulan veri setlerinden ilki “veri_1.xlsx” şeklinde çalışma alanına yazdırılsın\n\n\n\nCode\nfonksiyon_adi &lt;- function(sayi=1,satir=c(5),sutun=c(10)){\n\n    df &lt;- data.frame(matrix(0,nrow=satir, ncol=sutun))\n     writexl::write_xlsx(df,\"veri_1.xlsx\")\n}\nfonksiyon_adi(sayi=1,satir=c(5),sutun=c(10))\n\n\n\nŞimdi ise bu fonksiyonu çoklu dosya yazımına uygun hale getirelim\n\n\n\nCode\nfonksiyon_adi &lt;- function(sayi=3,satir=c(5,5,5),sutun=c(10,10,10)){\n    \n  df_list &lt;- list() ## her bir veri setinin atanacağı yeni nesne\n    \n    for( i in 1:sayi){\n    df &lt;- data.frame(matrix(0,nrow=satir[i], ncol=sutun[i])) # veri seti istenilen ozelliklerde olusturulur\n    }\n     for(j in 1:sutun[i]){\n     df[,j] &lt;- round(rnorm(satir[i],0,1),2) #  her bir veri setinin her bir sütunu standart normal dağılıma uygun uretilir\n    }\n     df_list[[i]] &lt;- df\n      df_list\n      writexl::write_xlsx(df_list[[i]],paste(\"veri\",i,\".xlsx\", sep=\"\"))\n}\nfonksiyon_adi(sayi=3,satir=c(5,4,3),sutun=c(10,5,4))\n\n\n\n\nGeometrik ortalamanın farklı hesaplama yolları bulunmaktadır. Logaritma değerlerine dayalı olarak hesaplandığında, geometrik ortalama,gözlem değerlerinin logaritmalarının aritmetik ortalamasıdır. Bir x vektorunun geometrik ortalamaasını logartimalara dayalı olarakhesaplayan bir fonsiyon yazıp, x &lt;- 1:100 için çalıştırınız."
  },
  {
    "objectID": "08_fonk.html#özet",
    "href": "08_fonk.html#özet",
    "title": "Fonksiyonlar",
    "section": "",
    "text": "Fonksiyonlar function() direktifi kullanılarak tanımlanabilir ve diğer R nesneleri gibi R nesnelerine atanır\nFonksiyonlar adlandırılmış argümanlarla tanımlanabilir; bu fonksiyon argümanlarının varsayılan değerleri olabilir\nFonksiyon argümanları isme göre veya argüman listesindeki konuma göre belirtilebilir\nFonksiyonlar her zaman fonkisyon gövdesinde değerlendirilen son ifadeyi döndürür\nBir fonksiyon tanımında özel ... argümanı kullanılarak değişken sayıda argüman belirtilebilir."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "İçerik",
    "section": "",
    "text": "R ve R studio kurulumu, gerekli diğer yüklemeler (Rtools, java vb. ), temel bilgiler, atama operatoru ve basit islemler"
  },
  {
    "objectID": "about.html#hafta-1-r-ve-rstudio-temeller",
    "href": "about.html#hafta-1-r-ve-rstudio-temeller",
    "title": "İçerik",
    "section": "",
    "text": "R ve R studio kurulumu, gerekli diğer yüklemeler (Rtools, java vb. ), temel bilgiler, atama operatoru ve basit islemler"
  },
  {
    "objectID": "about.html#hafta-2-programlama-dili-esasları",
    "href": "about.html#hafta-2-programlama-dili-esasları",
    "title": "İçerik",
    "section": "Hafta 2: Programlama Dili Esasları",
    "text": "Hafta 2: Programlama Dili Esasları\n\nPaket kurulumu ve kullanımı\nFonksiyonlar"
  },
  {
    "objectID": "about.html#hafta-3-programlama-dili-esasları",
    "href": "about.html#hafta-3-programlama-dili-esasları",
    "title": "İçerik",
    "section": "Hafta 3: Programlama Dili Esasları",
    "text": "Hafta 3: Programlama Dili Esasları\n\nNesneler - I\nNesneler - II"
  },
  {
    "objectID": "about.html#hafta-4-5-markdown-kullanımı",
    "href": "about.html#hafta-4-5-markdown-kullanımı",
    "title": "İçerik",
    "section": "Hafta 4-5: Markdown Kullanımı",
    "text": "Hafta 4-5: Markdown Kullanımı\n\nMarkdown Kullanımı"
  },
  {
    "objectID": "about.html#hafta-5-8-veri-düzenleme---görselleştirme",
    "href": "about.html#hafta-5-8-veri-düzenleme---görselleştirme",
    "title": "İçerik",
    "section": "Hafta 5-8: Veri Düzenleme - Görselleştirme",
    "text": "Hafta 5-8: Veri Düzenleme - Görselleştirme\n\nDersin bu bölümü Atalay Kabasakal, K. ve Gönen, S. (2023) Veri Düzenleme ve Görşelleştirme. Epodder Kitaplık kaynağından işlenecektir."
  },
  {
    "objectID": "about.html#hafta-9-ara-sınav",
    "href": "about.html#hafta-9-ara-sınav",
    "title": "İçerik",
    "section": "Hafta 9: Ara Sınav",
    "text": "Hafta 9: Ara Sınav"
  },
  {
    "objectID": "about.html#hafta-10-11-programlamaya-giriş",
    "href": "about.html#hafta-10-11-programlamaya-giriş",
    "title": "İçerik",
    "section": "Hafta 10-11: Programlamaya Giriş",
    "text": "Hafta 10-11: Programlamaya Giriş\n\nKontrol Yapıları ve Döngüler\nFonksiyonlar\nApply Ailesi"
  },
  {
    "objectID": "about.html#hafta-11-hipotez-testleri-ve-raporlama",
    "href": "about.html#hafta-11-hipotez-testleri-ve-raporlama",
    "title": "İçerik",
    "section": "Hafta 11: Hipotez testleri ve raporlama",
    "text": "Hafta 11: Hipotez testleri ve raporlama\n\nHipotez Testleri"
  },
  {
    "objectID": "about.html#hafta-11-korelasyon-türleri-ve-basit-regresyon",
    "href": "about.html#hafta-11-korelasyon-türleri-ve-basit-regresyon",
    "title": "İçerik",
    "section": "Hafta 11: Korelasyon türleri ve basit regresyon",
    "text": "Hafta 11: Korelasyon türleri ve basit regresyon"
  },
  {
    "objectID": "about.html#hafta-12-çok-değişkenli-istatistik-varsayımları",
    "href": "about.html#hafta-12-çok-değişkenli-istatistik-varsayımları",
    "title": "İçerik",
    "section": "Hafta 12: Çok değişkenli istatistik varsayımları",
    "text": "Hafta 12: Çok değişkenli istatistik varsayımları"
  },
  {
    "objectID": "about.html#hafta-13-çoklu-regresyon",
    "href": "about.html#hafta-13-çoklu-regresyon",
    "title": "İçerik",
    "section": "Hafta 13: Çoklu Regresyon",
    "text": "Hafta 13: Çoklu Regresyon"
  },
  {
    "objectID": "demo/html_document2_1.html",
    "href": "demo/html_document2_1.html",
    "title": "referans verme",
    "section": "",
    "text": "Pırlanta ücretleri çeşitli faktörlere bağlıdır\n\ncut (Bakınız Tablo @ref(tab:kesim))\ncolour (Bakınız Tablo @ref(tab:renk))\nclarity (Bakınız Şekil @ref(fig:parlaklik))\ncarats (Bakınız Şekil @ref(fig:karat))\nBakınız Bolum @ref(sonuclar) sonuclar icin\n\n\n\n\n\n\n\nCode\ndiamonds %&gt;%\n  group_by(cut) %&gt;%\n  summarise(avg = mean(price),\n            .groups = \"drop\") %&gt;%\n  kable(digits = 0, \n        col.names = c(\"Cut\", \"Average Price\"),\n        caption = \"Kesime göre ortalama pırlanta fiyatı.\") %&gt;%\n  kable_material()\n\n\n\n\nKesime göre ortalama pırlanta fiyatı.\n\n\nCut\nAverage Price\n\n\n\n\nFair\n4359\n\n\nGood\n3929\n\n\nVery Good\n3982\n\n\nPremium\n4584\n\n\nIdeal\n3458\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndiamonds %&gt;%\n  group_by(color) %&gt;%\n  summarise(avg = mean(price),\n            .groups = \"drop\") %&gt;%\n  kable(digits = 0, \n        col.names = c(\"Cut\", \"Average Price\"),\n        caption = \"Renge göre ortalama pırlanta fiyatı.\") %&gt;%\n  kable_material()\n\n\n\n\nRenge göre ortalama pırlanta fiyatı.\n\n\nCut\nAverage Price\n\n\n\n\nD\n3170\n\n\nE\n3077\n\n\nF\n3725\n\n\nG\n3999\n\n\nH\n4487\n\n\nI\n5092\n\n\nJ\n5324\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(diamonds, aes(x = clarity, y = price)) +\n  geom_boxplot() \n\n\n\n\n\nParlaklığa göre pırlanta fiyatı\n\n\n\n\n\n\n\n\n\nCode\nggplot(diamonds, aes(x = carat, y = price)) +\n  stat_smooth()\n\n\n\n\n\nKarata göre pırlanta fiyatı\n\n\n\n\n\n\n\n“Kodlar haricinde pırlantalarla ilgilenmiyorum :)”"
  },
  {
    "objectID": "demo/html_document2_1.html#tablolar",
    "href": "demo/html_document2_1.html#tablolar",
    "title": "referans verme",
    "section": "",
    "text": "Code\ndiamonds %&gt;%\n  group_by(cut) %&gt;%\n  summarise(avg = mean(price),\n            .groups = \"drop\") %&gt;%\n  kable(digits = 0, \n        col.names = c(\"Cut\", \"Average Price\"),\n        caption = \"Kesime göre ortalama pırlanta fiyatı.\") %&gt;%\n  kable_material()\n\n\n\n\nKesime göre ortalama pırlanta fiyatı.\n\n\nCut\nAverage Price\n\n\n\n\nFair\n4359\n\n\nGood\n3929\n\n\nVery Good\n3982\n\n\nPremium\n4584\n\n\nIdeal\n3458\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndiamonds %&gt;%\n  group_by(color) %&gt;%\n  summarise(avg = mean(price),\n            .groups = \"drop\") %&gt;%\n  kable(digits = 0, \n        col.names = c(\"Cut\", \"Average Price\"),\n        caption = \"Renge göre ortalama pırlanta fiyatı.\") %&gt;%\n  kable_material()\n\n\n\n\nRenge göre ortalama pırlanta fiyatı.\n\n\nCut\nAverage Price\n\n\n\n\nD\n3170\n\n\nE\n3077\n\n\nF\n3725\n\n\nG\n3999\n\n\nH\n4487\n\n\nI\n5092\n\n\nJ\n5324"
  },
  {
    "objectID": "demo/html_document2_1.html#grafikler",
    "href": "demo/html_document2_1.html#grafikler",
    "title": "referans verme",
    "section": "",
    "text": "Code\nggplot(diamonds, aes(x = clarity, y = price)) +\n  geom_boxplot() \n\n\n\n\n\nParlaklığa göre pırlanta fiyatı\n\n\n\n\n\n\n\n\n\nCode\nggplot(diamonds, aes(x = carat, y = price)) +\n  stat_smooth()\n\n\n\n\n\nKarata göre pırlanta fiyatı\n\n\n\n\n\n\n\n“Kodlar haricinde pırlantalarla ilgilenmiyorum :)”"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "OLC731 R ile Veri Analizi",
    "section": "",
    "text": "Bu dersin amacı, R yazılımını kullanarak veri üzerinde istenilen çok değişkenli istatistiksel ve psikometrik işlemlerin yapılabilmesini sağlamaktır.\nTez ve makale çalışmalarında öğrencilerimizin analizlerini R yazılımı ile hiçbir paket programa ihtiyaç duymadan kendi başlarına yapmalarını sağlamaktır.\nDers Salı günleri 09:30 - 12:30 arasında bilgisayar laboratuvarında yapılacaktır.\n\n\n🔗 Dr. Kübra Atalay Kabasakal\n🔗kkatalay@gmail.com\n🔗 katalay@hacettepe.edu.tr\n\n\n\n\n🔗Atar, B., Atalay Kabasakal, K, Unsal Ozberk, E. B., Ozberk, E. H. & Kibrislioglu Uysal, N. (2020). R ile Veri Analizi ve Psikometri Uygulamaları, Pegem Akademi, Ankara.\n🔗 Desjardins, C. D., & Bulut, O. (2018). Handbook of educational measurement and psychometrics using R. Boca Raton, FL: CRC Press.\n🔗Demir, E.(2021). R Diliyle İstatistik Uygulamaları. Pegem Akademi, Ankara..\nGüngör, M. (2024). R Programlama Diline Giriş. Epodder Kitaplık\nAtalay Kabasakal, K. ve Gönen, S. (2023) Veri Düzenleme ve Görşelleştirme. Epodder Kitaplık\n\n\n\nBu ders materyallerine ek olarak, R öğrenmek için bir dizi mükemmel kaynak vardır:\n\n\n\n\n\nDers sunumlarında yer alan R kodları ve veri setleri her ders öğrencilerle paylaşılacaktır. Paylaşım için 🔗moodle platformu kullanılcaktır.\nDers sunuların içinde kodlar saklı tutulmuştur. Sunumlar sırasında kodları açmadan önce düşünmenizi rica ediyorum.\n\n\n\nCode\nx &lt;- y + 2 \n\n\n\nDers sunumları içinde yer alan günün sorusu ve ödevleri mutlaka kendi çözümlerinizle yapmalısınız. Bunları da arşiv olarak kendi rpubs sayfasınızda saklamanızı istiyorum. rpubs sayfası açma işini sonra yapacağız.\nR kullanma konusunda hızlanmak istiyorsanız mümkün olduğu kadar çok alıştırma yapmanız gerekmektedir. Bunun için datacamp platformundan yararlanabilirsiniz.\nDers değerlendirmesi: ders içinde yapılan mini sınavlar 25 puan , ara sınav 25 puan ve final 50 puan olacak şekilde planlanmıştır. Ders içi mini sınavlar için 🔗moodle platformu kullanılcaktır.\nAra sınavın 12 Kasım, finalin ise 14 Ocak tarihinde yapılması planlanmaktadır*.\n*Tarihlerde değişiklik olduğunda sayfa güncellenecektir.\n\n\n\n\n\n🔗 R kurulumu ile ilgili bilgiler içerir.\n🔗 R studio ve güncellemeler ile ilgili bilgiler içerir."
  },
  {
    "objectID": "index.html#eğitmen",
    "href": "index.html#eğitmen",
    "title": "OLC731 R ile Veri Analizi",
    "section": "",
    "text": "🔗 Dr. Kübra Atalay Kabasakal\n🔗kkatalay@gmail.com\n🔗 katalay@hacettepe.edu.tr"
  },
  {
    "objectID": "index.html#kitaplar",
    "href": "index.html#kitaplar",
    "title": "OLC731 R ile Veri Analizi",
    "section": "",
    "text": "🔗Atar, B., Atalay Kabasakal, K, Unsal Ozberk, E. B., Ozberk, E. H. & Kibrislioglu Uysal, N. (2020). R ile Veri Analizi ve Psikometri Uygulamaları, Pegem Akademi, Ankara.\n🔗 Desjardins, C. D., & Bulut, O. (2018). Handbook of educational measurement and psychometrics using R. Boca Raton, FL: CRC Press.\n🔗Demir, E.(2021). R Diliyle İstatistik Uygulamaları. Pegem Akademi, Ankara..\nGüngör, M. (2024). R Programlama Diline Giriş. Epodder Kitaplık\nAtalay Kabasakal, K. ve Gönen, S. (2023) Veri Düzenleme ve Görşelleştirme. Epodder Kitaplık\n\n\n\nBu ders materyallerine ek olarak, R öğrenmek için bir dizi mükemmel kaynak vardır:"
  },
  {
    "objectID": "index.html#dersin-işlenişi-ve-değerlendirme",
    "href": "index.html#dersin-işlenişi-ve-değerlendirme",
    "title": "OLC731 R ile Veri Analizi",
    "section": "",
    "text": "Ders sunumlarında yer alan R kodları ve veri setleri her ders öğrencilerle paylaşılacaktır. Paylaşım için 🔗moodle platformu kullanılcaktır.\nDers sunuların içinde kodlar saklı tutulmuştur. Sunumlar sırasında kodları açmadan önce düşünmenizi rica ediyorum.\n\n\n\nCode\nx &lt;- y + 2 \n\n\n\nDers sunumları içinde yer alan günün sorusu ve ödevleri mutlaka kendi çözümlerinizle yapmalısınız. Bunları da arşiv olarak kendi rpubs sayfasınızda saklamanızı istiyorum. rpubs sayfası açma işini sonra yapacağız.\nR kullanma konusunda hızlanmak istiyorsanız mümkün olduğu kadar çok alıştırma yapmanız gerekmektedir. Bunun için datacamp platformundan yararlanabilirsiniz.\nDers değerlendirmesi: ders içinde yapılan mini sınavlar 25 puan , ara sınav 25 puan ve final 50 puan olacak şekilde planlanmıştır. Ders içi mini sınavlar için 🔗moodle platformu kullanılcaktır.\nAra sınavın 12 Kasım, finalin ise 14 Ocak tarihinde yapılması planlanmaktadır*.\n*Tarihlerde değişiklik olduğunda sayfa güncellenecektir."
  },
  {
    "objectID": "index.html#kurulumlar",
    "href": "index.html#kurulumlar",
    "title": "OLC731 R ile Veri Analizi",
    "section": "",
    "text": "🔗 R kurulumu ile ilgili bilgiler içerir.\n🔗 R studio ve güncellemeler ile ilgili bilgiler içerir."
  }
]